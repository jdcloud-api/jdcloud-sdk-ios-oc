/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

京东云iotlink接口
iotlink相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef IotlinkClient_h
#define IotlinkClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKIotlink/IotlinkApiModel.h>

@interface IotlinkClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    onOffStatus sync request
    @param onOffStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `onOffStatusResponse` the request response data model
    */
    -(NSDictionary*) onOffStatusSyncWithRequest:(IotlinkOnOffStatusRequest*) onOffStatusRequest;

    -(void)onOffStatusAsyncWithRequest:(IotlinkOnOffStatusRequest*) onOffStatusRequest
    completionHandler:(void(^)(int statusCode,IotlinkOnOffStatusResponse* _Nullable onOffStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    openIotCard sync request
    @param openIotCardRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `openIotCardResponse` the request response data model
    */
    -(NSDictionary*) openIotCardSyncWithRequest:(IotlinkOpenIotCardRequest*) openIotCardRequest;

    -(void)openIotCardAsyncWithRequest:(IotlinkOpenIotCardRequest*) openIotCardRequest
    completionHandler:(void(^)(int statusCode,IotlinkOpenIotCardResponse* _Nullable openIotCardResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    closeIotCard sync request
    @param closeIotCardRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `closeIotCardResponse` the request response data model
    */
    -(NSDictionary*) closeIotCardSyncWithRequest:(IotlinkCloseIotCardRequest*) closeIotCardRequest;

    -(void)closeIotCardAsyncWithRequest:(IotlinkCloseIotCardRequest*) closeIotCardRequest
    completionHandler:(void(^)(int statusCode,IotlinkCloseIotCardResponse* _Nullable closeIotCardResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    lifeStatus sync request
    @param lifeStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `lifeStatusResponse` the request response data model
    */
    -(NSDictionary*) lifeStatusSyncWithRequest:(IotlinkLifeStatusRequest*) lifeStatusRequest;

    -(void)lifeStatusAsyncWithRequest:(IotlinkLifeStatusRequest*) lifeStatusRequest
    completionHandler:(void(^)(int statusCode,IotlinkLifeStatusResponse* _Nullable lifeStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    closeIotFlow sync request
    @param closeIotFlowRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `closeIotFlowResponse` the request response data model
    */
    -(NSDictionary*) closeIotFlowSyncWithRequest:(IotlinkCloseIotFlowRequest*) closeIotFlowRequest;

    -(void)closeIotFlowAsyncWithRequest:(IotlinkCloseIotFlowRequest*) closeIotFlowRequest
    completionHandler:(void(^)(int statusCode,IotlinkCloseIotFlowResponse* _Nullable closeIotFlowResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    gprsStatus sync request
    @param gprsStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `gprsStatusResponse` the request response data model
    */
    -(NSDictionary*) gprsStatusSyncWithRequest:(IotlinkGprsStatusRequest*) gprsStatusRequest;

    -(void)gprsStatusAsyncWithRequest:(IotlinkGprsStatusRequest*) gprsStatusRequest
    completionHandler:(void(^)(int statusCode,IotlinkGprsStatusResponse* _Nullable gprsStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    openIotFlow sync request
    @param openIotFlowRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `openIotFlowResponse` the request response data model
    */
    -(NSDictionary*) openIotFlowSyncWithRequest:(IotlinkOpenIotFlowRequest*) openIotFlowRequest;

    -(void)openIotFlowAsyncWithRequest:(IotlinkOpenIotFlowRequest*) openIotFlowRequest
    completionHandler:(void(^)(int statusCode,IotlinkOpenIotFlowResponse* _Nullable openIotFlowResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    gprsRealtimeInfo sync request
    @param gprsRealtimeInfoRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `gprsRealtimeInfoResponse` the request response data model
    */
    -(NSDictionary*) gprsRealtimeInfoSyncWithRequest:(IotlinkGprsRealtimeInfoRequest*) gprsRealtimeInfoRequest;

    -(void)gprsRealtimeInfoAsyncWithRequest:(IotlinkGprsRealtimeInfoRequest*) gprsRealtimeInfoRequest
    completionHandler:(void(^)(int statusCode,IotlinkGprsRealtimeInfoResponse* _Nullable gprsRealtimeInfoResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    iotlink common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) iotlinkCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)iotlinkCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* IotlinkClient_h */
