/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

容器镜像仓库
容器镜像仓库服务

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef CrClient_h
#define CrClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKCr/CrApiModel.h>

@interface CrClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    deleteImage sync request
    @param deleteImageRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteImageResponse` the request response data model
    */
    -(NSDictionary*) deleteImageSyncWithRequest:(CrDeleteImageRequest*) deleteImageRequest;

    -(void)deleteImageAsyncWithRequest:(CrDeleteImageRequest*) deleteImageRequest
    completionHandler:(void(^)(int statusCode,CrDeleteImageResponse* _Nullable deleteImageResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeRepositories sync request
    @param describeRepositoriesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRepositoriesResponse` the request response data model
    */
    -(NSDictionary*) describeRepositoriesSyncWithRequest:(CrDescribeRepositoriesRequest*) describeRepositoriesRequest;

    -(void)describeRepositoriesAsyncWithRequest:(CrDescribeRepositoriesRequest*) describeRepositoriesRequest
    completionHandler:(void(^)(int statusCode,CrDescribeRepositoriesResponse* _Nullable describeRepositoriesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    releaseAuthorizationToken sync request
    @param releaseAuthorizationTokenRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `releaseAuthorizationTokenResponse` the request response data model
    */
    -(NSDictionary*) releaseAuthorizationTokenSyncWithRequest:(CrReleaseAuthorizationTokenRequest*) releaseAuthorizationTokenRequest;

    -(void)releaseAuthorizationTokenAsyncWithRequest:(CrReleaseAuthorizationTokenRequest*) releaseAuthorizationTokenRequest
    completionHandler:(void(^)(int statusCode,CrReleaseAuthorizationTokenResponse* _Nullable releaseAuthorizationTokenResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAuthorizationTokens sync request
    @param describeAuthorizationTokensRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuthorizationTokensResponse` the request response data model
    */
    -(NSDictionary*) describeAuthorizationTokensSyncWithRequest:(CrDescribeAuthorizationTokensRequest*) describeAuthorizationTokensRequest;

    -(void)describeAuthorizationTokensAsyncWithRequest:(CrDescribeAuthorizationTokensRequest*) describeAuthorizationTokensRequest
    completionHandler:(void(^)(int statusCode,CrDescribeAuthorizationTokensResponse* _Nullable describeAuthorizationTokensResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    checkRepositoryName sync request
    @param checkRepositoryNameRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `checkRepositoryNameResponse` the request response data model
    */
    -(NSDictionary*) checkRepositoryNameSyncWithRequest:(CrCheckRepositoryNameRequest*) checkRepositoryNameRequest;

    -(void)checkRepositoryNameAsyncWithRequest:(CrCheckRepositoryNameRequest*) checkRepositoryNameRequest
    completionHandler:(void(^)(int statusCode,CrCheckRepositoryNameResponse* _Nullable checkRepositoryNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeImages sync request
    @param describeImagesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeImagesResponse` the request response data model
    */
    -(NSDictionary*) describeImagesSyncWithRequest:(CrDescribeImagesRequest*) describeImagesRequest;

    -(void)describeImagesAsyncWithRequest:(CrDescribeImagesRequest*) describeImagesRequest
    completionHandler:(void(^)(int statusCode,CrDescribeImagesResponse* _Nullable describeImagesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeRegistries sync request
    @param describeRegistriesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRegistriesResponse` the request response data model
    */
    -(NSDictionary*) describeRegistriesSyncWithRequest:(CrDescribeRegistriesRequest*) describeRegistriesRequest;

    -(void)describeRegistriesAsyncWithRequest:(CrDescribeRegistriesRequest*) describeRegistriesRequest
    completionHandler:(void(^)(int statusCode,CrDescribeRegistriesResponse* _Nullable describeRegistriesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeRegistry sync request
    @param describeRegistryRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRegistryResponse` the request response data model
    */
    -(NSDictionary*) describeRegistrySyncWithRequest:(CrDescribeRegistryRequest*) describeRegistryRequest;

    -(void)describeRegistryAsyncWithRequest:(CrDescribeRegistryRequest*) describeRegistryRequest
    completionHandler:(void(^)(int statusCode,CrDescribeRegistryResponse* _Nullable describeRegistryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getAuthorizationToken sync request
    @param getAuthorizationTokenRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getAuthorizationTokenResponse` the request response data model
    */
    -(NSDictionary*) getAuthorizationTokenSyncWithRequest:(CrGetAuthorizationTokenRequest*) getAuthorizationTokenRequest;

    -(void)getAuthorizationTokenAsyncWithRequest:(CrGetAuthorizationTokenRequest*) getAuthorizationTokenRequest
    completionHandler:(void(^)(int statusCode,CrGetAuthorizationTokenResponse* _Nullable getAuthorizationTokenResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createRepository sync request
    @param createRepositoryRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRepositoryResponse` the request response data model
    */
    -(NSDictionary*) createRepositorySyncWithRequest:(CrCreateRepositoryRequest*) createRepositoryRequest;

    -(void)createRepositoryAsyncWithRequest:(CrCreateRepositoryRequest*) createRepositoryRequest
    completionHandler:(void(^)(int statusCode,CrCreateRepositoryResponse* _Nullable createRepositoryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeQuotas sync request
    @param describeQuotasRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeQuotasResponse` the request response data model
    */
    -(NSDictionary*) describeQuotasSyncWithRequest:(CrDescribeQuotasRequest*) describeQuotasRequest;

    -(void)describeQuotasAsyncWithRequest:(CrDescribeQuotasRequest*) describeQuotasRequest
    completionHandler:(void(^)(int statusCode,CrDescribeQuotasResponse* _Nullable describeQuotasResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createRegistry sync request
    @param createRegistryRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRegistryResponse` the request response data model
    */
    -(NSDictionary*) createRegistrySyncWithRequest:(CrCreateRegistryRequest*) createRegistryRequest;

    -(void)createRegistryAsyncWithRequest:(CrCreateRegistryRequest*) createRegistryRequest
    completionHandler:(void(^)(int statusCode,CrCreateRegistryResponse* _Nullable createRegistryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteRepository sync request
    @param deleteRepositoryRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteRepositoryResponse` the request response data model
    */
    -(NSDictionary*) deleteRepositorySyncWithRequest:(CrDeleteRepositoryRequest*) deleteRepositoryRequest;

    -(void)deleteRepositoryAsyncWithRequest:(CrDeleteRepositoryRequest*) deleteRepositoryRequest
    completionHandler:(void(^)(int statusCode,CrDeleteRepositoryResponse* _Nullable deleteRepositoryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteRegistry sync request
    @param deleteRegistryRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteRegistryResponse` the request response data model
    */
    -(NSDictionary*) deleteRegistrySyncWithRequest:(CrDeleteRegistryRequest*) deleteRegistryRequest;

    -(void)deleteRegistryAsyncWithRequest:(CrDeleteRegistryRequest*) deleteRegistryRequest
    completionHandler:(void(^)(int statusCode,CrDeleteRegistryResponse* _Nullable deleteRegistryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    checkRegistryName sync request
    @param checkRegistryNameRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `checkRegistryNameResponse` the request response data model
    */
    -(NSDictionary*) checkRegistryNameSyncWithRequest:(CrCheckRegistryNameRequest*) checkRegistryNameRequest;

    -(void)checkRegistryNameAsyncWithRequest:(CrCheckRegistryNameRequest*) checkRegistryNameRequest
    completionHandler:(void(^)(int statusCode,CrCheckRegistryNameResponse* _Nullable checkRegistryNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    cr common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) crCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)crCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* CrClient_h */
