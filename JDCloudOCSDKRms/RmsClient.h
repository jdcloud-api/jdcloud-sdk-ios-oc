/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

京东云富媒体短信OpenAPI接口
京东云富媒体短信OpenAPI接口

OpenAPI spec version: v2
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef RmsClient_h
#define RmsClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKRms/RmsApiModel.h>

@interface RmsClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    queryPackageRemainder sync request
    @param queryPackageRemainderRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryPackageRemainderResponse` the request response data model
    */
    -(NSDictionary*) queryPackageRemainderSyncWithRequest:(RmsQueryPackageRemainderRequest*) queryPackageRemainderRequest;

    -(void)queryPackageRemainderAsyncWithRequest:(RmsQueryPackageRemainderRequest*) queryPackageRemainderRequest
    completionHandler:(void(^)(int statusCode,RmsQueryPackageRemainderResponse* _Nullable queryPackageRemainderResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    addTemplate sync request
    @param addTemplateRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `addTemplateResponse` the request response data model
    */
    -(NSDictionary*) addTemplateSyncWithRequest:(RmsAddTemplateRequest*) addTemplateRequest;

    -(void)addTemplateAsyncWithRequest:(RmsAddTemplateRequest*) addTemplateRequest
    completionHandler:(void(^)(int statusCode,RmsAddTemplateResponse* _Nullable addTemplateResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    sendBatchMsg sync request
    @param sendBatchMsgRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `sendBatchMsgResponse` the request response data model
    */
    -(NSDictionary*) sendBatchMsgSyncWithRequest:(RmsSendBatchMsgRequest*) sendBatchMsgRequest;

    -(void)sendBatchMsgAsyncWithRequest:(RmsSendBatchMsgRequest*) sendBatchMsgRequest
    completionHandler:(void(^)(int statusCode,RmsSendBatchMsgResponse* _Nullable sendBatchMsgResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryTemplateById sync request
    @param queryTemplateByIdRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryTemplateByIdResponse` the request response data model
    */
    -(NSDictionary*) queryTemplateByIdSyncWithRequest:(RmsQueryTemplateByIdRequest*) queryTemplateByIdRequest;

    -(void)queryTemplateByIdAsyncWithRequest:(RmsQueryTemplateByIdRequest*) queryTemplateByIdRequest
    completionHandler:(void(^)(int statusCode,RmsQueryTemplateByIdResponse* _Nullable queryTemplateByIdResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryTemplateList sync request
    @param queryTemplateListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryTemplateListResponse` the request response data model
    */
    -(NSDictionary*) queryTemplateListSyncWithRequest:(RmsQueryTemplateListRequest*) queryTemplateListRequest;

    -(void)queryTemplateListAsyncWithRequest:(RmsQueryTemplateListRequest*) queryTemplateListRequest
    completionHandler:(void(^)(int statusCode,RmsQueryTemplateListResponse* _Nullable queryTemplateListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    querySendStatus sync request
    @param querySendStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `querySendStatusResponse` the request response data model
    */
    -(NSDictionary*) querySendStatusSyncWithRequest:(RmsQuerySendStatusRequest*) querySendStatusRequest;

    -(void)querySendStatusAsyncWithRequest:(RmsQuerySendStatusRequest*) querySendStatusRequest
    completionHandler:(void(^)(int statusCode,RmsQuerySendStatusResponse* _Nullable querySendStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    rms common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) rmsCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)rmsCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* RmsClient_h */
