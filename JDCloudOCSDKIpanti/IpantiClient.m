 /* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

京东云IP高防相关接口
京东云IP高防相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#import <Foundation/Foundation.h>
#import <JDCloudOCSDKIpanti/IpantiExecutor.h>

@implementation IpantiClient

@synthesize userAgent = _userAgent;
@synthesize serviceName = _serviceName;
@synthesize version = _version;

-(void) addCustomerHeaderWithKey:(NSString*) key
                           value:(NSString*) value{
    if(![self customHeader])
    {
        self.customHeader = [[NSMutableDictionary alloc] init];
    }
    if(key && value)
    {
        [[self customHeader] setValue:value forKey:key];
    }
   
}

-(id)initWithGlobalConfig{
    if(![GlobalConfig credential])
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@"GlobalConfig credential not config" userInfo:nil];
        @throw e;
    }
    self.credential = [GlobalConfig credential];
    if(![GlobalConfig sdkEnvironment])
    {
        self.sdkEnvironment = [[SDKEnvironment alloc] initWithEndPoint:@"ipanti.jdcloud-api.com"];
    }else
    {
        self.sdkEnvironment = [GlobalConfig sdkEnvironment];
    }
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 ipanti  v1";
    _serviceName = @"ipanti";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}

-(id)initWithCredential:(Credential*)credential
         sdkEnvironment:(SDKEnvironment*)sdkEnvironment
{
    if(!credential)
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@" credential can not null" userInfo:nil];
        @throw e;
    }else{
        self.credential = credential;
    }
    
    if(!sdkEnvironment)
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@" sdkEnvironment can not null" userInfo:nil];
        @throw e;
    }else{
        self.sdkEnvironment = sdkEnvironment;
    }
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 ipanti  v1";
    _serviceName = @"ipanti";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}

-(id)initWithCredential:(Credential*)credential
{
    if(!credential)
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@" credential can not null" userInfo:nil];
        @throw e;
    }else{
        self.credential = credential;
    }
    if(![GlobalConfig sdkEnvironment])
    {
        self.sdkEnvironment = [[SDKEnvironment alloc] initWithEndPoint:@"ipanti.jdcloud-api.com"];
    }else
    {
        self.sdkEnvironment = [GlobalConfig sdkEnvironment];
    }
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 ipanti  v1";
    _serviceName = @"ipanti";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}

-(id)init{
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 ipanti  v1";
    _serviceName = @"ipanti";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}


/**
enableBlackListRuleOfForwardRule sync request
@param enableBlackListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableBlackListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) enableBlackListRuleOfForwardRuleSyncWithRequest:(IpantiEnableBlackListRuleOfForwardRuleRequest*) enableBlackListRuleOfForwardRuleRequest
{
IpantiEnableBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiEnableBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableBlackListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableBlackListRuleOfForwardRuleResponse* response = [[IpantiEnableBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableBlackListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableBlackListRuleOfForwardRuleAsyncWithRequest:(IpantiEnableBlackListRuleOfForwardRuleRequest*) enableBlackListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableBlackListRuleOfForwardRuleResponse* _Nullable enableBlackListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiEnableBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableBlackListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableBlackListRuleOfForwardRuleResponse* response = [[IpantiEnableBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeAlarmConfig sync request
@param describeAlarmConfigRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAlarmConfigResponse` the request response data model
*/
-(NSDictionary*) describeAlarmConfigSyncWithRequest:(IpantiDescribeAlarmConfigRequest*) describeAlarmConfigRequest
{
IpantiDescribeAlarmConfigExecutor* excutor = [[IpantiDescribeAlarmConfigExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeAlarmConfigRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeAlarmConfigResponse* response = [[IpantiDescribeAlarmConfigResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeAlarmConfigResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeAlarmConfigAsyncWithRequest:(IpantiDescribeAlarmConfigRequest*) describeAlarmConfigRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeAlarmConfigResponse* _Nullable describeAlarmConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeAlarmConfigExecutor* excutor = [[IpantiDescribeAlarmConfigExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeAlarmConfigRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeAlarmConfigResponse* response = [[IpantiDescribeAlarmConfigResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createIpSet sync request
@param createIpSetRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createIpSetResponse` the request response data model
*/
-(NSDictionary*) createIpSetSyncWithRequest:(IpantiCreateIpSetRequest*) createIpSetRequest
{
IpantiCreateIpSetExecutor* excutor = [[IpantiCreateIpSetExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createIpSetRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateIpSetResponse* response = [[IpantiCreateIpSetResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createIpSetResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createIpSetAsyncWithRequest:(IpantiCreateIpSetRequest*) createIpSetRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateIpSetResponse* _Nullable createIpSetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateIpSetExecutor* excutor = [[IpantiCreateIpSetExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createIpSetRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateIpSetResponse* response = [[IpantiCreateIpSetResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWebRuleBlackListUsage sync request
@param describeWebRuleBlackListUsageRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWebRuleBlackListUsageResponse` the request response data model
*/
-(NSDictionary*) describeWebRuleBlackListUsageSyncWithRequest:(IpantiDescribeWebRuleBlackListUsageRequest*) describeWebRuleBlackListUsageRequest
{
IpantiDescribeWebRuleBlackListUsageExecutor* excutor = [[IpantiDescribeWebRuleBlackListUsageExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWebRuleBlackListUsageRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleBlackListUsageResponse* response = [[IpantiDescribeWebRuleBlackListUsageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWebRuleBlackListUsageResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWebRuleBlackListUsageAsyncWithRequest:(IpantiDescribeWebRuleBlackListUsageRequest*) describeWebRuleBlackListUsageRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWebRuleBlackListUsageResponse* _Nullable describeWebRuleBlackListUsageResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWebRuleBlackListUsageExecutor* excutor = [[IpantiDescribeWebRuleBlackListUsageExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWebRuleBlackListUsageRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleBlackListUsageResponse* response = [[IpantiDescribeWebRuleBlackListUsageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeProtectionRuleOfForwardRule sync request
@param describeProtectionRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeProtectionRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) describeProtectionRuleOfForwardRuleSyncWithRequest:(IpantiDescribeProtectionRuleOfForwardRuleRequest*) describeProtectionRuleOfForwardRuleRequest
{
IpantiDescribeProtectionRuleOfForwardRuleExecutor* excutor = [[IpantiDescribeProtectionRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeProtectionRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeProtectionRuleOfForwardRuleResponse* response = [[IpantiDescribeProtectionRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeProtectionRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeProtectionRuleOfForwardRuleAsyncWithRequest:(IpantiDescribeProtectionRuleOfForwardRuleRequest*) describeProtectionRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeProtectionRuleOfForwardRuleResponse* _Nullable describeProtectionRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeProtectionRuleOfForwardRuleExecutor* excutor = [[IpantiDescribeProtectionRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeProtectionRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeProtectionRuleOfForwardRuleResponse* response = [[IpantiDescribeProtectionRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createCCProtectionRuleOfWebRule sync request
@param createCCProtectionRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createCCProtectionRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) createCCProtectionRuleOfWebRuleSyncWithRequest:(IpantiCreateCCProtectionRuleOfWebRuleRequest*) createCCProtectionRuleOfWebRuleRequest
{
IpantiCreateCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiCreateCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createCCProtectionRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateCCProtectionRuleOfWebRuleResponse* response = [[IpantiCreateCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createCCProtectionRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createCCProtectionRuleOfWebRuleAsyncWithRequest:(IpantiCreateCCProtectionRuleOfWebRuleRequest*) createCCProtectionRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateCCProtectionRuleOfWebRuleResponse* _Nullable createCCProtectionRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiCreateCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createCCProtectionRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateCCProtectionRuleOfWebRuleResponse* response = [[IpantiCreateCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyEPB sync request
@param modifyEPBRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyEPBResponse` the request response data model
*/
-(NSDictionary*) modifyEPBSyncWithRequest:(IpantiModifyEPBRequest*) modifyEPBRequest
{
IpantiModifyEPBExecutor* excutor = [[IpantiModifyEPBExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyEPBRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyEPBResponse* response = [[IpantiModifyEPBResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyEPBResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyEPBAsyncWithRequest:(IpantiModifyEPBRequest*) modifyEPBRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyEPBResponse* _Nullable modifyEPBResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyEPBExecutor* excutor = [[IpantiModifyEPBExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyEPBRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyEPBResponse* response = [[IpantiModifyEPBResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCProtectionDefaultConfigOfWebRule sync request
@param describeCCProtectionDefaultConfigOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCProtectionDefaultConfigOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeCCProtectionDefaultConfigOfWebRuleSyncWithRequest:(IpantiDescribeCCProtectionDefaultConfigOfWebRuleRequest*) describeCCProtectionDefaultConfigOfWebRuleRequest
{
IpantiDescribeCCProtectionDefaultConfigOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionDefaultConfigOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCProtectionDefaultConfigOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionDefaultConfigOfWebRuleResponse* response = [[IpantiDescribeCCProtectionDefaultConfigOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCProtectionDefaultConfigOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCProtectionDefaultConfigOfWebRuleAsyncWithRequest:(IpantiDescribeCCProtectionDefaultConfigOfWebRuleRequest*) describeCCProtectionDefaultConfigOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCProtectionDefaultConfigOfWebRuleResponse* _Nullable describeCCProtectionDefaultConfigOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCProtectionDefaultConfigOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionDefaultConfigOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCProtectionDefaultConfigOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionDefaultConfigOfWebRuleResponse* response = [[IpantiDescribeCCProtectionDefaultConfigOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyWhiteListRuleOfWebRule sync request
@param modifyWhiteListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyWhiteListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) modifyWhiteListRuleOfWebRuleSyncWithRequest:(IpantiModifyWhiteListRuleOfWebRuleRequest*) modifyWhiteListRuleOfWebRuleRequest
{
IpantiModifyWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiModifyWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyWhiteListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyWhiteListRuleOfWebRuleResponse* response = [[IpantiModifyWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyWhiteListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyWhiteListRuleOfWebRuleAsyncWithRequest:(IpantiModifyWhiteListRuleOfWebRuleRequest*) modifyWhiteListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyWhiteListRuleOfWebRuleResponse* _Nullable modifyWhiteListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiModifyWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyWhiteListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyWhiteListRuleOfWebRuleResponse* response = [[IpantiModifyWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyWebRule sync request
@param modifyWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyWebRuleResponse` the request response data model
*/
-(NSDictionary*) modifyWebRuleSyncWithRequest:(IpantiModifyWebRuleRequest*) modifyWebRuleRequest
{
IpantiModifyWebRuleExecutor* excutor = [[IpantiModifyWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyWebRuleResponse* response = [[IpantiModifyWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyWebRuleAsyncWithRequest:(IpantiModifyWebRuleRequest*) modifyWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyWebRuleResponse* _Nullable modifyWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyWebRuleExecutor* excutor = [[IpantiModifyWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyWebRuleResponse* response = [[IpantiModifyWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableWebRuleBlackList sync request
@param enableWebRuleBlackListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWebRuleBlackListResponse` the request response data model
*/
-(NSDictionary*) enableWebRuleBlackListSyncWithRequest:(IpantiEnableWebRuleBlackListRequest*) enableWebRuleBlackListRequest
{
IpantiEnableWebRuleBlackListExecutor* excutor = [[IpantiEnableWebRuleBlackListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableWebRuleBlackListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleBlackListResponse* response = [[IpantiEnableWebRuleBlackListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableWebRuleBlackListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableWebRuleBlackListAsyncWithRequest:(IpantiEnableWebRuleBlackListRequest*) enableWebRuleBlackListRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableWebRuleBlackListResponse* _Nullable enableWebRuleBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableWebRuleBlackListExecutor* excutor = [[IpantiEnableWebRuleBlackListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableWebRuleBlackListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleBlackListResponse* response = [[IpantiEnableWebRuleBlackListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableBlackListRuleOfWebRule sync request
@param enableBlackListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableBlackListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) enableBlackListRuleOfWebRuleSyncWithRequest:(IpantiEnableBlackListRuleOfWebRuleRequest*) enableBlackListRuleOfWebRuleRequest
{
IpantiEnableBlackListRuleOfWebRuleExecutor* excutor = [[IpantiEnableBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableBlackListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableBlackListRuleOfWebRuleResponse* response = [[IpantiEnableBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableBlackListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableBlackListRuleOfWebRuleAsyncWithRequest:(IpantiEnableBlackListRuleOfWebRuleRequest*) enableBlackListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableBlackListRuleOfWebRuleResponse* _Nullable enableBlackListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableBlackListRuleOfWebRuleExecutor* excutor = [[IpantiEnableBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableBlackListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableBlackListRuleOfWebRuleResponse* response = [[IpantiEnableBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeIpSets sync request
@param describeIpSetsRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeIpSetsResponse` the request response data model
*/
-(NSDictionary*) describeIpSetsSyncWithRequest:(IpantiDescribeIpSetsRequest*) describeIpSetsRequest
{
IpantiDescribeIpSetsExecutor* excutor = [[IpantiDescribeIpSetsExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeIpSetsRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeIpSetsResponse* response = [[IpantiDescribeIpSetsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeIpSetsResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeIpSetsAsyncWithRequest:(IpantiDescribeIpSetsRequest*) describeIpSetsRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeIpSetsResponse* _Nullable describeIpSetsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeIpSetsExecutor* excutor = [[IpantiDescribeIpSetsExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeIpSetsRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeIpSetsResponse* response = [[IpantiDescribeIpSetsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableWhiteListRuleOfWebRule sync request
@param enableWhiteListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWhiteListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) enableWhiteListRuleOfWebRuleSyncWithRequest:(IpantiEnableWhiteListRuleOfWebRuleRequest*) enableWhiteListRuleOfWebRuleRequest
{
IpantiEnableWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiEnableWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableWhiteListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWhiteListRuleOfWebRuleResponse* response = [[IpantiEnableWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableWhiteListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableWhiteListRuleOfWebRuleAsyncWithRequest:(IpantiEnableWhiteListRuleOfWebRuleRequest*) enableWhiteListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableWhiteListRuleOfWebRuleResponse* _Nullable enableWhiteListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiEnableWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableWhiteListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWhiteListRuleOfWebRuleResponse* response = [[IpantiEnableWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteWhiteListRuleOfWebRule sync request
@param deleteWhiteListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteWhiteListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) deleteWhiteListRuleOfWebRuleSyncWithRequest:(IpantiDeleteWhiteListRuleOfWebRuleRequest*) deleteWhiteListRuleOfWebRuleRequest
{
IpantiDeleteWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiDeleteWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteWhiteListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteWhiteListRuleOfWebRuleResponse* response = [[IpantiDeleteWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteWhiteListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteWhiteListRuleOfWebRuleAsyncWithRequest:(IpantiDeleteWhiteListRuleOfWebRuleRequest*) deleteWhiteListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDeleteWhiteListRuleOfWebRuleResponse* _Nullable deleteWhiteListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDeleteWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiDeleteWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteWhiteListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteWhiteListRuleOfWebRuleResponse* response = [[IpantiDeleteWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableWebRuleWhiteList sync request
@param disableWebRuleWhiteListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWebRuleWhiteListResponse` the request response data model
*/
-(NSDictionary*) disableWebRuleWhiteListSyncWithRequest:(IpantiDisableWebRuleWhiteListRequest*) disableWebRuleWhiteListRequest
{
IpantiDisableWebRuleWhiteListExecutor* excutor = [[IpantiDisableWebRuleWhiteListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableWebRuleWhiteListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleWhiteListResponse* response = [[IpantiDisableWebRuleWhiteListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableWebRuleWhiteListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableWebRuleWhiteListAsyncWithRequest:(IpantiDisableWebRuleWhiteListRequest*) disableWebRuleWhiteListRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableWebRuleWhiteListResponse* _Nullable disableWebRuleWhiteListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableWebRuleWhiteListExecutor* excutor = [[IpantiDisableWebRuleWhiteListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableWebRuleWhiteListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleWhiteListResponse* response = [[IpantiDisableWebRuleWhiteListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeIpSet sync request
@param describeIpSetRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeIpSetResponse` the request response data model
*/
-(NSDictionary*) describeIpSetSyncWithRequest:(IpantiDescribeIpSetRequest*) describeIpSetRequest
{
IpantiDescribeIpSetExecutor* excutor = [[IpantiDescribeIpSetExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeIpSetRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeIpSetResponse* response = [[IpantiDescribeIpSetResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeIpSetResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeIpSetAsyncWithRequest:(IpantiDescribeIpSetRequest*) describeIpSetRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeIpSetResponse* _Nullable describeIpSetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeIpSetExecutor* excutor = [[IpantiDescribeIpSetExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeIpSetRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeIpSetResponse* response = [[IpantiDescribeIpSetResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteForwardRule sync request
@param deleteForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteForwardRuleResponse` the request response data model
*/
-(NSDictionary*) deleteForwardRuleSyncWithRequest:(IpantiDeleteForwardRuleRequest*) deleteForwardRuleRequest
{
IpantiDeleteForwardRuleExecutor* excutor = [[IpantiDeleteForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteForwardRuleResponse* response = [[IpantiDeleteForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteForwardRuleAsyncWithRequest:(IpantiDeleteForwardRuleRequest*) deleteForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDeleteForwardRuleResponse* _Nullable deleteForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDeleteForwardRuleExecutor* excutor = [[IpantiDeleteForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteForwardRuleResponse* response = [[IpantiDeleteForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
switchWebRuleProtect sync request
@param switchWebRuleProtectRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `switchWebRuleProtectResponse` the request response data model
*/
-(NSDictionary*) switchWebRuleProtectSyncWithRequest:(IpantiSwitchWebRuleProtectRequest*) switchWebRuleProtectRequest
{
IpantiSwitchWebRuleProtectExecutor* excutor = [[IpantiSwitchWebRuleProtectExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:switchWebRuleProtectRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchWebRuleProtectResponse* response = [[IpantiSwitchWebRuleProtectResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"switchWebRuleProtectResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)switchWebRuleProtectAsyncWithRequest:(IpantiSwitchWebRuleProtectRequest*) switchWebRuleProtectRequest
                       completionHandler:(void(^)(int statusCode,IpantiSwitchWebRuleProtectResponse* _Nullable switchWebRuleProtectResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiSwitchWebRuleProtectExecutor* excutor = [[IpantiSwitchWebRuleProtectExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:switchWebRuleProtectRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchWebRuleProtectResponse* response = [[IpantiSwitchWebRuleProtectResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeInstances sync request
@param describeInstancesRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstancesResponse` the request response data model
*/
-(NSDictionary*) describeInstancesSyncWithRequest:(IpantiDescribeInstancesRequest*) describeInstancesRequest
{
IpantiDescribeInstancesExecutor* excutor = [[IpantiDescribeInstancesExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeInstancesRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeInstancesResponse* response = [[IpantiDescribeInstancesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeInstancesResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeInstancesAsyncWithRequest:(IpantiDescribeInstancesRequest*) describeInstancesRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeInstancesResponse* _Nullable describeInstancesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeInstancesExecutor* excutor = [[IpantiDescribeInstancesExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeInstancesRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeInstancesResponse* response = [[IpantiDescribeInstancesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createInstance sync request
@param createInstanceRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createInstanceResponse` the request response data model
*/
-(NSDictionary*) createInstanceSyncWithRequest:(IpantiCreateInstanceRequest*) createInstanceRequest
{
IpantiCreateInstanceExecutor* excutor = [[IpantiCreateInstanceExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createInstanceRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateInstanceResponse* response = [[IpantiCreateInstanceResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createInstanceResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createInstanceAsyncWithRequest:(IpantiCreateInstanceRequest*) createInstanceRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateInstanceResponse* _Nullable createInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateInstanceExecutor* excutor = [[IpantiCreateInstanceExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createInstanceRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateInstanceResponse* response = [[IpantiCreateInstanceResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCpsIpList sync request
@param describeCpsIpListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCpsIpListResponse` the request response data model
*/
-(NSDictionary*) describeCpsIpListSyncWithRequest:(IpantiDescribeCpsIpListRequest*) describeCpsIpListRequest
{
IpantiDescribeCpsIpListExecutor* excutor = [[IpantiDescribeCpsIpListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCpsIpListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCpsIpListResponse* response = [[IpantiDescribeCpsIpListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCpsIpListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCpsIpListAsyncWithRequest:(IpantiDescribeCpsIpListRequest*) describeCpsIpListRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCpsIpListResponse* _Nullable describeCpsIpListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCpsIpListExecutor* excutor = [[IpantiDescribeCpsIpListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCpsIpListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCpsIpListResponse* response = [[IpantiDescribeCpsIpListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCAttackLogDetails sync request
@param describeCCAttackLogDetailsRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCAttackLogDetailsResponse` the request response data model
*/
-(NSDictionary*) describeCCAttackLogDetailsSyncWithRequest:(IpantiDescribeCCAttackLogDetailsRequest*) describeCCAttackLogDetailsRequest
{
IpantiDescribeCCAttackLogDetailsExecutor* excutor = [[IpantiDescribeCCAttackLogDetailsExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCAttackLogDetailsRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCAttackLogDetailsResponse* response = [[IpantiDescribeCCAttackLogDetailsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCAttackLogDetailsResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCAttackLogDetailsAsyncWithRequest:(IpantiDescribeCCAttackLogDetailsRequest*) describeCCAttackLogDetailsRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCAttackLogDetailsResponse* _Nullable describeCCAttackLogDetailsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCAttackLogDetailsExecutor* excutor = [[IpantiDescribeCCAttackLogDetailsExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCAttackLogDetailsRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCAttackLogDetailsResponse* response = [[IpantiDescribeCCAttackLogDetailsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
switchForwardRuleOrigin sync request
@param switchForwardRuleOriginRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `switchForwardRuleOriginResponse` the request response data model
*/
-(NSDictionary*) switchForwardRuleOriginSyncWithRequest:(IpantiSwitchForwardRuleOriginRequest*) switchForwardRuleOriginRequest
{
IpantiSwitchForwardRuleOriginExecutor* excutor = [[IpantiSwitchForwardRuleOriginExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:switchForwardRuleOriginRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchForwardRuleOriginResponse* response = [[IpantiSwitchForwardRuleOriginResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"switchForwardRuleOriginResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)switchForwardRuleOriginAsyncWithRequest:(IpantiSwitchForwardRuleOriginRequest*) switchForwardRuleOriginRequest
                       completionHandler:(void(^)(int statusCode,IpantiSwitchForwardRuleOriginResponse* _Nullable switchForwardRuleOriginResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiSwitchForwardRuleOriginExecutor* excutor = [[IpantiSwitchForwardRuleOriginExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:switchForwardRuleOriginRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchForwardRuleOriginResponse* response = [[IpantiSwitchForwardRuleOriginResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeBlackListRuleOfForwardRule sync request
@param describeBlackListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBlackListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) describeBlackListRuleOfForwardRuleSyncWithRequest:(IpantiDescribeBlackListRuleOfForwardRuleRequest*) describeBlackListRuleOfForwardRuleRequest
{
IpantiDescribeBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiDescribeBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeBlackListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeBlackListRuleOfForwardRuleResponse* response = [[IpantiDescribeBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeBlackListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeBlackListRuleOfForwardRuleAsyncWithRequest:(IpantiDescribeBlackListRuleOfForwardRuleRequest*) describeBlackListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeBlackListRuleOfForwardRuleResponse* _Nullable describeBlackListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiDescribeBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeBlackListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeBlackListRuleOfForwardRuleResponse* response = [[IpantiDescribeBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeAttackTypeCount sync request
@param describeAttackTypeCountRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAttackTypeCountResponse` the request response data model
*/
-(NSDictionary*) describeAttackTypeCountSyncWithRequest:(IpantiDescribeAttackTypeCountRequest*) describeAttackTypeCountRequest
{
IpantiDescribeAttackTypeCountExecutor* excutor = [[IpantiDescribeAttackTypeCountExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeAttackTypeCountRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeAttackTypeCountResponse* response = [[IpantiDescribeAttackTypeCountResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeAttackTypeCountResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeAttackTypeCountAsyncWithRequest:(IpantiDescribeAttackTypeCountRequest*) describeAttackTypeCountRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeAttackTypeCountResponse* _Nullable describeAttackTypeCountResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeAttackTypeCountExecutor* excutor = [[IpantiDescribeAttackTypeCountExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeAttackTypeCountRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeAttackTypeCountResponse* response = [[IpantiDescribeAttackTypeCountResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableCCProtectionRuleOfWebRule sync request
@param disableCCProtectionRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableCCProtectionRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) disableCCProtectionRuleOfWebRuleSyncWithRequest:(IpantiDisableCCProtectionRuleOfWebRuleRequest*) disableCCProtectionRuleOfWebRuleRequest
{
IpantiDisableCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiDisableCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableCCProtectionRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableCCProtectionRuleOfWebRuleResponse* response = [[IpantiDisableCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableCCProtectionRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableCCProtectionRuleOfWebRuleAsyncWithRequest:(IpantiDisableCCProtectionRuleOfWebRuleRequest*) disableCCProtectionRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableCCProtectionRuleOfWebRuleResponse* _Nullable disableCCProtectionRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiDisableCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableCCProtectionRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableCCProtectionRuleOfWebRuleResponse* response = [[IpantiDisableCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableWebRuleCC sync request
@param enableWebRuleCCRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWebRuleCCResponse` the request response data model
*/
-(NSDictionary*) enableWebRuleCCSyncWithRequest:(IpantiEnableWebRuleCCRequest*) enableWebRuleCCRequest
{
IpantiEnableWebRuleCCExecutor* excutor = [[IpantiEnableWebRuleCCExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableWebRuleCCRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleCCResponse* response = [[IpantiEnableWebRuleCCResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableWebRuleCCResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableWebRuleCCAsyncWithRequest:(IpantiEnableWebRuleCCRequest*) enableWebRuleCCRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableWebRuleCCResponse* _Nullable enableWebRuleCCResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableWebRuleCCExecutor* excutor = [[IpantiEnableWebRuleCCExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableWebRuleCCRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleCCResponse* response = [[IpantiEnableWebRuleCCResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeGeoAreas sync request
@param describeGeoAreasRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeGeoAreasResponse` the request response data model
*/
-(NSDictionary*) describeGeoAreasSyncWithRequest:(IpantiDescribeGeoAreasRequest*) describeGeoAreasRequest
{
IpantiDescribeGeoAreasExecutor* excutor = [[IpantiDescribeGeoAreasExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeGeoAreasRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeGeoAreasResponse* response = [[IpantiDescribeGeoAreasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeGeoAreasResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeGeoAreasAsyncWithRequest:(IpantiDescribeGeoAreasRequest*) describeGeoAreasRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeGeoAreasResponse* _Nullable describeGeoAreasResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeGeoAreasExecutor* excutor = [[IpantiDescribeGeoAreasExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeGeoAreasRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeGeoAreasResponse* response = [[IpantiDescribeGeoAreasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCAttackLogs sync request
@param describeCCAttackLogsRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCAttackLogsResponse` the request response data model
*/
-(NSDictionary*) describeCCAttackLogsSyncWithRequest:(IpantiDescribeCCAttackLogsRequest*) describeCCAttackLogsRequest
{
IpantiDescribeCCAttackLogsExecutor* excutor = [[IpantiDescribeCCAttackLogsExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCAttackLogsRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCAttackLogsResponse* response = [[IpantiDescribeCCAttackLogsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCAttackLogsResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCAttackLogsAsyncWithRequest:(IpantiDescribeCCAttackLogsRequest*) describeCCAttackLogsRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCAttackLogsResponse* _Nullable describeCCAttackLogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCAttackLogsExecutor* excutor = [[IpantiDescribeCCAttackLogsExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCAttackLogsRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCAttackLogsResponse* response = [[IpantiDescribeCCAttackLogsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteCCProtectionRuleOfWebRule sync request
@param deleteCCProtectionRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteCCProtectionRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) deleteCCProtectionRuleOfWebRuleSyncWithRequest:(IpantiDeleteCCProtectionRuleOfWebRuleRequest*) deleteCCProtectionRuleOfWebRuleRequest
{
IpantiDeleteCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiDeleteCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteCCProtectionRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteCCProtectionRuleOfWebRuleResponse* response = [[IpantiDeleteCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteCCProtectionRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteCCProtectionRuleOfWebRuleAsyncWithRequest:(IpantiDeleteCCProtectionRuleOfWebRuleRequest*) deleteCCProtectionRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDeleteCCProtectionRuleOfWebRuleResponse* _Nullable deleteCCProtectionRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDeleteCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiDeleteCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteCCProtectionRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteCCProtectionRuleOfWebRuleResponse* response = [[IpantiDeleteCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableWebRuleCCObserverMode sync request
@param disableWebRuleCCObserverModeRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWebRuleCCObserverModeResponse` the request response data model
*/
-(NSDictionary*) disableWebRuleCCObserverModeSyncWithRequest:(IpantiDisableWebRuleCCObserverModeRequest*) disableWebRuleCCObserverModeRequest
{
IpantiDisableWebRuleCCObserverModeExecutor* excutor = [[IpantiDisableWebRuleCCObserverModeExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableWebRuleCCObserverModeRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleCCObserverModeResponse* response = [[IpantiDisableWebRuleCCObserverModeResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableWebRuleCCObserverModeResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableWebRuleCCObserverModeAsyncWithRequest:(IpantiDisableWebRuleCCObserverModeRequest*) disableWebRuleCCObserverModeRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableWebRuleCCObserverModeResponse* _Nullable disableWebRuleCCObserverModeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableWebRuleCCObserverModeExecutor* excutor = [[IpantiDisableWebRuleCCObserverModeExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableWebRuleCCObserverModeRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleCCObserverModeResponse* response = [[IpantiDisableWebRuleCCObserverModeResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyForwardRule sync request
@param modifyForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyForwardRuleResponse` the request response data model
*/
-(NSDictionary*) modifyForwardRuleSyncWithRequest:(IpantiModifyForwardRuleRequest*) modifyForwardRuleRequest
{
IpantiModifyForwardRuleExecutor* excutor = [[IpantiModifyForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyForwardRuleResponse* response = [[IpantiModifyForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyForwardRuleAsyncWithRequest:(IpantiModifyForwardRuleRequest*) modifyForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyForwardRuleResponse* _Nullable modifyForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyForwardRuleExecutor* excutor = [[IpantiModifyForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyForwardRuleResponse* response = [[IpantiModifyForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeNameList sync request
@param describeNameListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeNameListResponse` the request response data model
*/
-(NSDictionary*) describeNameListSyncWithRequest:(IpantiDescribeNameListRequest*) describeNameListRequest
{
IpantiDescribeNameListExecutor* excutor = [[IpantiDescribeNameListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeNameListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeNameListResponse* response = [[IpantiDescribeNameListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeNameListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeNameListAsyncWithRequest:(IpantiDescribeNameListRequest*) describeNameListRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeNameListResponse* _Nullable describeNameListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeNameListExecutor* excutor = [[IpantiDescribeNameListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeNameListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeNameListResponse* response = [[IpantiDescribeNameListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeFwdGraph sync request
@param describeFwdGraphRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeFwdGraphResponse` the request response data model
*/
-(NSDictionary*) describeFwdGraphSyncWithRequest:(IpantiDescribeFwdGraphRequest*) describeFwdGraphRequest
{
IpantiDescribeFwdGraphExecutor* excutor = [[IpantiDescribeFwdGraphExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeFwdGraphRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeFwdGraphResponse* response = [[IpantiDescribeFwdGraphResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeFwdGraphResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeFwdGraphAsyncWithRequest:(IpantiDescribeFwdGraphRequest*) describeFwdGraphRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeFwdGraphResponse* _Nullable describeFwdGraphResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeFwdGraphExecutor* excutor = [[IpantiDescribeFwdGraphExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeFwdGraphRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeFwdGraphResponse* response = [[IpantiDescribeFwdGraphResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWebRules sync request
@param describeWebRulesRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWebRulesResponse` the request response data model
*/
-(NSDictionary*) describeWebRulesSyncWithRequest:(IpantiDescribeWebRulesRequest*) describeWebRulesRequest
{
IpantiDescribeWebRulesExecutor* excutor = [[IpantiDescribeWebRulesExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWebRulesRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRulesResponse* response = [[IpantiDescribeWebRulesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWebRulesResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWebRulesAsyncWithRequest:(IpantiDescribeWebRulesRequest*) describeWebRulesRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWebRulesResponse* _Nullable describeWebRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWebRulesExecutor* excutor = [[IpantiDescribeWebRulesExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWebRulesRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRulesResponse* response = [[IpantiDescribeWebRulesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeForwardRules sync request
@param describeForwardRulesRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeForwardRulesResponse` the request response data model
*/
-(NSDictionary*) describeForwardRulesSyncWithRequest:(IpantiDescribeForwardRulesRequest*) describeForwardRulesRequest
{
IpantiDescribeForwardRulesExecutor* excutor = [[IpantiDescribeForwardRulesExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeForwardRulesRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeForwardRulesResponse* response = [[IpantiDescribeForwardRulesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeForwardRulesResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeForwardRulesAsyncWithRequest:(IpantiDescribeForwardRulesRequest*) describeForwardRulesRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeForwardRulesResponse* _Nullable describeForwardRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeForwardRulesExecutor* excutor = [[IpantiDescribeForwardRulesExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeForwardRulesRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeForwardRulesResponse* response = [[IpantiDescribeForwardRulesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyBlackListRuleOfWebRule sync request
@param modifyBlackListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyBlackListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) modifyBlackListRuleOfWebRuleSyncWithRequest:(IpantiModifyBlackListRuleOfWebRuleRequest*) modifyBlackListRuleOfWebRuleRequest
{
IpantiModifyBlackListRuleOfWebRuleExecutor* excutor = [[IpantiModifyBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyBlackListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyBlackListRuleOfWebRuleResponse* response = [[IpantiModifyBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyBlackListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyBlackListRuleOfWebRuleAsyncWithRequest:(IpantiModifyBlackListRuleOfWebRuleRequest*) modifyBlackListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyBlackListRuleOfWebRuleResponse* _Nullable modifyBlackListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyBlackListRuleOfWebRuleExecutor* excutor = [[IpantiModifyBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyBlackListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyBlackListRuleOfWebRuleResponse* response = [[IpantiModifyBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteIpSet sync request
@param deleteIpSetRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteIpSetResponse` the request response data model
*/
-(NSDictionary*) deleteIpSetSyncWithRequest:(IpantiDeleteIpSetRequest*) deleteIpSetRequest
{
IpantiDeleteIpSetExecutor* excutor = [[IpantiDeleteIpSetExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteIpSetRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteIpSetResponse* response = [[IpantiDeleteIpSetResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteIpSetResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteIpSetAsyncWithRequest:(IpantiDeleteIpSetRequest*) deleteIpSetRequest
                       completionHandler:(void(^)(int statusCode,IpantiDeleteIpSetResponse* _Nullable deleteIpSetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDeleteIpSetExecutor* excutor = [[IpantiDeleteIpSetExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteIpSetRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteIpSetResponse* response = [[IpantiDeleteIpSetResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableWebRuleWhiteList sync request
@param enableWebRuleWhiteListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWebRuleWhiteListResponse` the request response data model
*/
-(NSDictionary*) enableWebRuleWhiteListSyncWithRequest:(IpantiEnableWebRuleWhiteListRequest*) enableWebRuleWhiteListRequest
{
IpantiEnableWebRuleWhiteListExecutor* excutor = [[IpantiEnableWebRuleWhiteListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableWebRuleWhiteListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleWhiteListResponse* response = [[IpantiEnableWebRuleWhiteListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableWebRuleWhiteListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableWebRuleWhiteListAsyncWithRequest:(IpantiEnableWebRuleWhiteListRequest*) enableWebRuleWhiteListRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableWebRuleWhiteListResponse* _Nullable enableWebRuleWhiteListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableWebRuleWhiteListExecutor* excutor = [[IpantiEnableWebRuleWhiteListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableWebRuleWhiteListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleWhiteListResponse* response = [[IpantiEnableWebRuleWhiteListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWebRuleWhiteListUsage sync request
@param describeWebRuleWhiteListUsageRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWebRuleWhiteListUsageResponse` the request response data model
*/
-(NSDictionary*) describeWebRuleWhiteListUsageSyncWithRequest:(IpantiDescribeWebRuleWhiteListUsageRequest*) describeWebRuleWhiteListUsageRequest
{
IpantiDescribeWebRuleWhiteListUsageExecutor* excutor = [[IpantiDescribeWebRuleWhiteListUsageExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWebRuleWhiteListUsageRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleWhiteListUsageResponse* response = [[IpantiDescribeWebRuleWhiteListUsageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWebRuleWhiteListUsageResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWebRuleWhiteListUsageAsyncWithRequest:(IpantiDescribeWebRuleWhiteListUsageRequest*) describeWebRuleWhiteListUsageRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWebRuleWhiteListUsageResponse* _Nullable describeWebRuleWhiteListUsageResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWebRuleWhiteListUsageExecutor* excutor = [[IpantiDescribeWebRuleWhiteListUsageExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWebRuleWhiteListUsageRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleWhiteListUsageResponse* response = [[IpantiDescribeWebRuleWhiteListUsageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeProtectionStatistics sync request
@param describeProtectionStatisticsRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeProtectionStatisticsResponse` the request response data model
*/
-(NSDictionary*) describeProtectionStatisticsSyncWithRequest:(IpantiDescribeProtectionStatisticsRequest*) describeProtectionStatisticsRequest
{
IpantiDescribeProtectionStatisticsExecutor* excutor = [[IpantiDescribeProtectionStatisticsExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeProtectionStatisticsRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeProtectionStatisticsResponse* response = [[IpantiDescribeProtectionStatisticsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeProtectionStatisticsResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeProtectionStatisticsAsyncWithRequest:(IpantiDescribeProtectionStatisticsRequest*) describeProtectionStatisticsRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeProtectionStatisticsResponse* _Nullable describeProtectionStatisticsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeProtectionStatisticsExecutor* excutor = [[IpantiDescribeProtectionStatisticsExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeProtectionStatisticsRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeProtectionStatisticsResponse* response = [[IpantiDescribeProtectionStatisticsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyCertInfo sync request
@param modifyCertInfoRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyCertInfoResponse` the request response data model
*/
-(NSDictionary*) modifyCertInfoSyncWithRequest:(IpantiModifyCertInfoRequest*) modifyCertInfoRequest
{
IpantiModifyCertInfoExecutor* excutor = [[IpantiModifyCertInfoExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyCertInfoRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyCertInfoResponse* response = [[IpantiModifyCertInfoResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyCertInfoResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyCertInfoAsyncWithRequest:(IpantiModifyCertInfoRequest*) modifyCertInfoRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyCertInfoResponse* _Nullable modifyCertInfoResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyCertInfoExecutor* excutor = [[IpantiModifyCertInfoExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyCertInfoRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyCertInfoResponse* response = [[IpantiModifyCertInfoResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyAlarmConfig sync request
@param modifyAlarmConfigRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyAlarmConfigResponse` the request response data model
*/
-(NSDictionary*) modifyAlarmConfigSyncWithRequest:(IpantiModifyAlarmConfigRequest*) modifyAlarmConfigRequest
{
IpantiModifyAlarmConfigExecutor* excutor = [[IpantiModifyAlarmConfigExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyAlarmConfigRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyAlarmConfigResponse* response = [[IpantiModifyAlarmConfigResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyAlarmConfigResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyAlarmConfigAsyncWithRequest:(IpantiModifyAlarmConfigRequest*) modifyAlarmConfigRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyAlarmConfigResponse* _Nullable modifyAlarmConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyAlarmConfigExecutor* excutor = [[IpantiModifyAlarmConfigExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyAlarmConfigRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyAlarmConfigResponse* response = [[IpantiModifyAlarmConfigResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWebRuleWhiteListGeoAreas sync request
@param describeWebRuleWhiteListGeoAreasRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWebRuleWhiteListGeoAreasResponse` the request response data model
*/
-(NSDictionary*) describeWebRuleWhiteListGeoAreasSyncWithRequest:(IpantiDescribeWebRuleWhiteListGeoAreasRequest*) describeWebRuleWhiteListGeoAreasRequest
{
IpantiDescribeWebRuleWhiteListGeoAreasExecutor* excutor = [[IpantiDescribeWebRuleWhiteListGeoAreasExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWebRuleWhiteListGeoAreasRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleWhiteListGeoAreasResponse* response = [[IpantiDescribeWebRuleWhiteListGeoAreasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWebRuleWhiteListGeoAreasResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWebRuleWhiteListGeoAreasAsyncWithRequest:(IpantiDescribeWebRuleWhiteListGeoAreasRequest*) describeWebRuleWhiteListGeoAreasRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWebRuleWhiteListGeoAreasResponse* _Nullable describeWebRuleWhiteListGeoAreasResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWebRuleWhiteListGeoAreasExecutor* excutor = [[IpantiDescribeWebRuleWhiteListGeoAreasExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWebRuleWhiteListGeoAreasRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleWhiteListGeoAreasResponse* response = [[IpantiDescribeWebRuleWhiteListGeoAreasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyBlackListRuleOfForwardRule sync request
@param modifyBlackListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyBlackListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) modifyBlackListRuleOfForwardRuleSyncWithRequest:(IpantiModifyBlackListRuleOfForwardRuleRequest*) modifyBlackListRuleOfForwardRuleRequest
{
IpantiModifyBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiModifyBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyBlackListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyBlackListRuleOfForwardRuleResponse* response = [[IpantiModifyBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyBlackListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyBlackListRuleOfForwardRuleAsyncWithRequest:(IpantiModifyBlackListRuleOfForwardRuleRequest*) modifyBlackListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyBlackListRuleOfForwardRuleResponse* _Nullable modifyBlackListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiModifyBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyBlackListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyBlackListRuleOfForwardRuleResponse* response = [[IpantiModifyBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableWebRuleBlackList sync request
@param disableWebRuleBlackListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWebRuleBlackListResponse` the request response data model
*/
-(NSDictionary*) disableWebRuleBlackListSyncWithRequest:(IpantiDisableWebRuleBlackListRequest*) disableWebRuleBlackListRequest
{
IpantiDisableWebRuleBlackListExecutor* excutor = [[IpantiDisableWebRuleBlackListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableWebRuleBlackListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleBlackListResponse* response = [[IpantiDisableWebRuleBlackListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableWebRuleBlackListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableWebRuleBlackListAsyncWithRequest:(IpantiDisableWebRuleBlackListRequest*) disableWebRuleBlackListRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableWebRuleBlackListResponse* _Nullable disableWebRuleBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableWebRuleBlackListExecutor* excutor = [[IpantiDisableWebRuleBlackListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableWebRuleBlackListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleBlackListResponse* response = [[IpantiDisableWebRuleBlackListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
switchForwardRuleProtect sync request
@param switchForwardRuleProtectRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `switchForwardRuleProtectResponse` the request response data model
*/
-(NSDictionary*) switchForwardRuleProtectSyncWithRequest:(IpantiSwitchForwardRuleProtectRequest*) switchForwardRuleProtectRequest
{
IpantiSwitchForwardRuleProtectExecutor* excutor = [[IpantiSwitchForwardRuleProtectExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:switchForwardRuleProtectRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchForwardRuleProtectResponse* response = [[IpantiSwitchForwardRuleProtectResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"switchForwardRuleProtectResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)switchForwardRuleProtectAsyncWithRequest:(IpantiSwitchForwardRuleProtectRequest*) switchForwardRuleProtectRequest
                       completionHandler:(void(^)(int statusCode,IpantiSwitchForwardRuleProtectResponse* _Nullable switchForwardRuleProtectResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiSwitchForwardRuleProtectExecutor* excutor = [[IpantiSwitchForwardRuleProtectExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:switchForwardRuleProtectRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchForwardRuleProtectResponse* response = [[IpantiSwitchForwardRuleProtectResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteBlackListRuleOfWebRule sync request
@param deleteBlackListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteBlackListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) deleteBlackListRuleOfWebRuleSyncWithRequest:(IpantiDeleteBlackListRuleOfWebRuleRequest*) deleteBlackListRuleOfWebRuleRequest
{
IpantiDeleteBlackListRuleOfWebRuleExecutor* excutor = [[IpantiDeleteBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteBlackListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteBlackListRuleOfWebRuleResponse* response = [[IpantiDeleteBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteBlackListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteBlackListRuleOfWebRuleAsyncWithRequest:(IpantiDeleteBlackListRuleOfWebRuleRequest*) deleteBlackListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDeleteBlackListRuleOfWebRuleResponse* _Nullable deleteBlackListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDeleteBlackListRuleOfWebRuleExecutor* excutor = [[IpantiDeleteBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteBlackListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteBlackListRuleOfWebRuleResponse* response = [[IpantiDeleteBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCProtectionRuleOfWebRule sync request
@param describeCCProtectionRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCProtectionRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeCCProtectionRuleOfWebRuleSyncWithRequest:(IpantiDescribeCCProtectionRuleOfWebRuleRequest*) describeCCProtectionRuleOfWebRuleRequest
{
IpantiDescribeCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCProtectionRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionRuleOfWebRuleResponse* response = [[IpantiDescribeCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCProtectionRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCProtectionRuleOfWebRuleAsyncWithRequest:(IpantiDescribeCCProtectionRuleOfWebRuleRequest*) describeCCProtectionRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCProtectionRuleOfWebRuleResponse* _Nullable describeCCProtectionRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCProtectionRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionRuleOfWebRuleResponse* response = [[IpantiDescribeCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableBlackListRuleOfWebRule sync request
@param disableBlackListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableBlackListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) disableBlackListRuleOfWebRuleSyncWithRequest:(IpantiDisableBlackListRuleOfWebRuleRequest*) disableBlackListRuleOfWebRuleRequest
{
IpantiDisableBlackListRuleOfWebRuleExecutor* excutor = [[IpantiDisableBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableBlackListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableBlackListRuleOfWebRuleResponse* response = [[IpantiDisableBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableBlackListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableBlackListRuleOfWebRuleAsyncWithRequest:(IpantiDisableBlackListRuleOfWebRuleRequest*) disableBlackListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableBlackListRuleOfWebRuleResponse* _Nullable disableBlackListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableBlackListRuleOfWebRuleExecutor* excutor = [[IpantiDisableBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableBlackListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableBlackListRuleOfWebRuleResponse* response = [[IpantiDisableBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
switchWebRuleOrigin sync request
@param switchWebRuleOriginRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `switchWebRuleOriginResponse` the request response data model
*/
-(NSDictionary*) switchWebRuleOriginSyncWithRequest:(IpantiSwitchWebRuleOriginRequest*) switchWebRuleOriginRequest
{
IpantiSwitchWebRuleOriginExecutor* excutor = [[IpantiSwitchWebRuleOriginExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:switchWebRuleOriginRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchWebRuleOriginResponse* response = [[IpantiSwitchWebRuleOriginResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"switchWebRuleOriginResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)switchWebRuleOriginAsyncWithRequest:(IpantiSwitchWebRuleOriginRequest*) switchWebRuleOriginRequest
                       completionHandler:(void(^)(int statusCode,IpantiSwitchWebRuleOriginResponse* _Nullable switchWebRuleOriginResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiSwitchWebRuleOriginExecutor* excutor = [[IpantiSwitchWebRuleOriginExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:switchWebRuleOriginRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiSwitchWebRuleOriginResponse* response = [[IpantiSwitchWebRuleOriginResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWhiteListRuleOfWebRule sync request
@param describeWhiteListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWhiteListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeWhiteListRuleOfWebRuleSyncWithRequest:(IpantiDescribeWhiteListRuleOfWebRuleRequest*) describeWhiteListRuleOfWebRuleRequest
{
IpantiDescribeWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiDescribeWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWhiteListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWhiteListRuleOfWebRuleResponse* response = [[IpantiDescribeWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWhiteListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWhiteListRuleOfWebRuleAsyncWithRequest:(IpantiDescribeWhiteListRuleOfWebRuleRequest*) describeWhiteListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWhiteListRuleOfWebRuleResponse* _Nullable describeWhiteListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiDescribeWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWhiteListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWhiteListRuleOfWebRuleResponse* response = [[IpantiDescribeWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeBlackListRuleOfWebRule sync request
@param describeBlackListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBlackListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeBlackListRuleOfWebRuleSyncWithRequest:(IpantiDescribeBlackListRuleOfWebRuleRequest*) describeBlackListRuleOfWebRuleRequest
{
IpantiDescribeBlackListRuleOfWebRuleExecutor* excutor = [[IpantiDescribeBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeBlackListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeBlackListRuleOfWebRuleResponse* response = [[IpantiDescribeBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeBlackListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeBlackListRuleOfWebRuleAsyncWithRequest:(IpantiDescribeBlackListRuleOfWebRuleRequest*) describeBlackListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeBlackListRuleOfWebRuleResponse* _Nullable describeBlackListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeBlackListRuleOfWebRuleExecutor* excutor = [[IpantiDescribeBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeBlackListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeBlackListRuleOfWebRuleResponse* response = [[IpantiDescribeBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeAttackStatistics sync request
@param describeAttackStatisticsRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAttackStatisticsResponse` the request response data model
*/
-(NSDictionary*) describeAttackStatisticsSyncWithRequest:(IpantiDescribeAttackStatisticsRequest*) describeAttackStatisticsRequest
{
IpantiDescribeAttackStatisticsExecutor* excutor = [[IpantiDescribeAttackStatisticsExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeAttackStatisticsRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeAttackStatisticsResponse* response = [[IpantiDescribeAttackStatisticsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeAttackStatisticsResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeAttackStatisticsAsyncWithRequest:(IpantiDescribeAttackStatisticsRequest*) describeAttackStatisticsRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeAttackStatisticsResponse* _Nullable describeAttackStatisticsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeAttackStatisticsExecutor* excutor = [[IpantiDescribeAttackStatisticsExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeAttackStatisticsRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeAttackStatisticsResponse* response = [[IpantiDescribeAttackStatisticsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeBlackListRulesOfWebRule sync request
@param describeBlackListRulesOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBlackListRulesOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeBlackListRulesOfWebRuleSyncWithRequest:(IpantiDescribeBlackListRulesOfWebRuleRequest*) describeBlackListRulesOfWebRuleRequest
{
IpantiDescribeBlackListRulesOfWebRuleExecutor* excutor = [[IpantiDescribeBlackListRulesOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeBlackListRulesOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeBlackListRulesOfWebRuleResponse* response = [[IpantiDescribeBlackListRulesOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeBlackListRulesOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeBlackListRulesOfWebRuleAsyncWithRequest:(IpantiDescribeBlackListRulesOfWebRuleRequest*) describeBlackListRulesOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeBlackListRulesOfWebRuleResponse* _Nullable describeBlackListRulesOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeBlackListRulesOfWebRuleExecutor* excutor = [[IpantiDescribeBlackListRulesOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeBlackListRulesOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeBlackListRulesOfWebRuleResponse* response = [[IpantiDescribeBlackListRulesOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeDDoSAttackLogs sync request
@param describeDDoSAttackLogsRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeDDoSAttackLogsResponse` the request response data model
*/
-(NSDictionary*) describeDDoSAttackLogsSyncWithRequest:(IpantiDescribeDDoSAttackLogsRequest*) describeDDoSAttackLogsRequest
{
IpantiDescribeDDoSAttackLogsExecutor* excutor = [[IpantiDescribeDDoSAttackLogsExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeDDoSAttackLogsRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeDDoSAttackLogsResponse* response = [[IpantiDescribeDDoSAttackLogsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeDDoSAttackLogsResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeDDoSAttackLogsAsyncWithRequest:(IpantiDescribeDDoSAttackLogsRequest*) describeDDoSAttackLogsRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeDDoSAttackLogsResponse* _Nullable describeDDoSAttackLogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeDDoSAttackLogsExecutor* excutor = [[IpantiDescribeDDoSAttackLogsExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeDDoSAttackLogsRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeDDoSAttackLogsResponse* response = [[IpantiDescribeDDoSAttackLogsResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableWhiteListRuleOfForwardRule sync request
@param enableWhiteListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWhiteListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) enableWhiteListRuleOfForwardRuleSyncWithRequest:(IpantiEnableWhiteListRuleOfForwardRuleRequest*) enableWhiteListRuleOfForwardRuleRequest
{
IpantiEnableWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiEnableWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableWhiteListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWhiteListRuleOfForwardRuleResponse* response = [[IpantiEnableWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableWhiteListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableWhiteListRuleOfForwardRuleAsyncWithRequest:(IpantiEnableWhiteListRuleOfForwardRuleRequest*) enableWhiteListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableWhiteListRuleOfForwardRuleResponse* _Nullable enableWhiteListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiEnableWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableWhiteListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWhiteListRuleOfForwardRuleResponse* response = [[IpantiEnableWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableWhiteListRuleOfWebRule sync request
@param disableWhiteListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWhiteListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) disableWhiteListRuleOfWebRuleSyncWithRequest:(IpantiDisableWhiteListRuleOfWebRuleRequest*) disableWhiteListRuleOfWebRuleRequest
{
IpantiDisableWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiDisableWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableWhiteListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWhiteListRuleOfWebRuleResponse* response = [[IpantiDisableWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableWhiteListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableWhiteListRuleOfWebRuleAsyncWithRequest:(IpantiDisableWhiteListRuleOfWebRuleRequest*) disableWhiteListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableWhiteListRuleOfWebRuleResponse* _Nullable disableWhiteListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiDisableWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableWhiteListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWhiteListRuleOfWebRuleResponse* response = [[IpantiDisableWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyWhiteListRuleOfForwardRule sync request
@param modifyWhiteListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyWhiteListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) modifyWhiteListRuleOfForwardRuleSyncWithRequest:(IpantiModifyWhiteListRuleOfForwardRuleRequest*) modifyWhiteListRuleOfForwardRuleRequest
{
IpantiModifyWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiModifyWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyWhiteListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyWhiteListRuleOfForwardRuleResponse* response = [[IpantiModifyWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyWhiteListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyWhiteListRuleOfForwardRuleAsyncWithRequest:(IpantiModifyWhiteListRuleOfForwardRuleRequest*) modifyWhiteListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyWhiteListRuleOfForwardRuleResponse* _Nullable modifyWhiteListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiModifyWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyWhiteListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyWhiteListRuleOfForwardRuleResponse* response = [[IpantiModifyWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createWebRule sync request
@param createWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createWebRuleResponse` the request response data model
*/
-(NSDictionary*) createWebRuleSyncWithRequest:(IpantiCreateWebRuleRequest*) createWebRuleRequest
{
IpantiCreateWebRuleExecutor* excutor = [[IpantiCreateWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateWebRuleResponse* response = [[IpantiCreateWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createWebRuleAsyncWithRequest:(IpantiCreateWebRuleRequest*) createWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateWebRuleResponse* _Nullable createWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateWebRuleExecutor* excutor = [[IpantiCreateWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateWebRuleResponse* response = [[IpantiCreateWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyCCProtectionRuleOfWebRule sync request
@param modifyCCProtectionRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyCCProtectionRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) modifyCCProtectionRuleOfWebRuleSyncWithRequest:(IpantiModifyCCProtectionRuleOfWebRuleRequest*) modifyCCProtectionRuleOfWebRuleRequest
{
IpantiModifyCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiModifyCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyCCProtectionRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyCCProtectionRuleOfWebRuleResponse* response = [[IpantiModifyCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyCCProtectionRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyCCProtectionRuleOfWebRuleAsyncWithRequest:(IpantiModifyCCProtectionRuleOfWebRuleRequest*) modifyCCProtectionRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyCCProtectionRuleOfWebRuleResponse* _Nullable modifyCCProtectionRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiModifyCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyCCProtectionRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyCCProtectionRuleOfWebRuleResponse* response = [[IpantiModifyCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCProtectionConfigOfWebRule sync request
@param describeCCProtectionConfigOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCProtectionConfigOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeCCProtectionConfigOfWebRuleSyncWithRequest:(IpantiDescribeCCProtectionConfigOfWebRuleRequest*) describeCCProtectionConfigOfWebRuleRequest
{
IpantiDescribeCCProtectionConfigOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionConfigOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCProtectionConfigOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionConfigOfWebRuleResponse* response = [[IpantiDescribeCCProtectionConfigOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCProtectionConfigOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCProtectionConfigOfWebRuleAsyncWithRequest:(IpantiDescribeCCProtectionConfigOfWebRuleRequest*) describeCCProtectionConfigOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCProtectionConfigOfWebRuleResponse* _Nullable describeCCProtectionConfigOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCProtectionConfigOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionConfigOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCProtectionConfigOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionConfigOfWebRuleResponse* response = [[IpantiDescribeCCProtectionConfigOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCProtectionRulesOfWebRule sync request
@param describeCCProtectionRulesOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCProtectionRulesOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeCCProtectionRulesOfWebRuleSyncWithRequest:(IpantiDescribeCCProtectionRulesOfWebRuleRequest*) describeCCProtectionRulesOfWebRuleRequest
{
IpantiDescribeCCProtectionRulesOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionRulesOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCProtectionRulesOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionRulesOfWebRuleResponse* response = [[IpantiDescribeCCProtectionRulesOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCProtectionRulesOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCProtectionRulesOfWebRuleAsyncWithRequest:(IpantiDescribeCCProtectionRulesOfWebRuleRequest*) describeCCProtectionRulesOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCProtectionRulesOfWebRuleResponse* _Nullable describeCCProtectionRulesOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCProtectionRulesOfWebRuleExecutor* excutor = [[IpantiDescribeCCProtectionRulesOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCProtectionRulesOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCProtectionRulesOfWebRuleResponse* response = [[IpantiDescribeCCProtectionRulesOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableWebRuleCC sync request
@param disableWebRuleCCRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWebRuleCCResponse` the request response data model
*/
-(NSDictionary*) disableWebRuleCCSyncWithRequest:(IpantiDisableWebRuleCCRequest*) disableWebRuleCCRequest
{
IpantiDisableWebRuleCCExecutor* excutor = [[IpantiDisableWebRuleCCExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableWebRuleCCRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleCCResponse* response = [[IpantiDisableWebRuleCCResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableWebRuleCCResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableWebRuleCCAsyncWithRequest:(IpantiDisableWebRuleCCRequest*) disableWebRuleCCRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableWebRuleCCResponse* _Nullable disableWebRuleCCResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableWebRuleCCExecutor* excutor = [[IpantiDisableWebRuleCCExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableWebRuleCCRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWebRuleCCResponse* response = [[IpantiDisableWebRuleCCResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createWhiteListRuleOfWebRule sync request
@param createWhiteListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createWhiteListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) createWhiteListRuleOfWebRuleSyncWithRequest:(IpantiCreateWhiteListRuleOfWebRuleRequest*) createWhiteListRuleOfWebRuleRequest
{
IpantiCreateWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiCreateWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createWhiteListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateWhiteListRuleOfWebRuleResponse* response = [[IpantiCreateWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createWhiteListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createWhiteListRuleOfWebRuleAsyncWithRequest:(IpantiCreateWhiteListRuleOfWebRuleRequest*) createWhiteListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateWhiteListRuleOfWebRuleResponse* _Nullable createWhiteListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateWhiteListRuleOfWebRuleExecutor* excutor = [[IpantiCreateWhiteListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createWhiteListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateWhiteListRuleOfWebRuleResponse* response = [[IpantiCreateWhiteListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createBlackListRuleOfWebRule sync request
@param createBlackListRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createBlackListRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) createBlackListRuleOfWebRuleSyncWithRequest:(IpantiCreateBlackListRuleOfWebRuleRequest*) createBlackListRuleOfWebRuleRequest
{
IpantiCreateBlackListRuleOfWebRuleExecutor* excutor = [[IpantiCreateBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createBlackListRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateBlackListRuleOfWebRuleResponse* response = [[IpantiCreateBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createBlackListRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createBlackListRuleOfWebRuleAsyncWithRequest:(IpantiCreateBlackListRuleOfWebRuleRequest*) createBlackListRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateBlackListRuleOfWebRuleResponse* _Nullable createBlackListRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateBlackListRuleOfWebRuleExecutor* excutor = [[IpantiCreateBlackListRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createBlackListRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateBlackListRuleOfWebRuleResponse* response = [[IpantiCreateBlackListRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
checkName sync request
@param checkNameRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `checkNameResponse` the request response data model
*/
-(NSDictionary*) checkNameSyncWithRequest:(IpantiCheckNameRequest*) checkNameRequest
{
IpantiCheckNameExecutor* excutor = [[IpantiCheckNameExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:checkNameRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCheckNameResponse* response = [[IpantiCheckNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"checkNameResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)checkNameAsyncWithRequest:(IpantiCheckNameRequest*) checkNameRequest
                       completionHandler:(void(^)(int statusCode,IpantiCheckNameResponse* _Nullable checkNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCheckNameExecutor* excutor = [[IpantiCheckNameExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:checkNameRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCheckNameResponse* response = [[IpantiCheckNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeDDoSGraph sync request
@param describeDDoSGraphRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeDDoSGraphResponse` the request response data model
*/
-(NSDictionary*) describeDDoSGraphSyncWithRequest:(IpantiDescribeDDoSGraphRequest*) describeDDoSGraphRequest
{
IpantiDescribeDDoSGraphExecutor* excutor = [[IpantiDescribeDDoSGraphExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeDDoSGraphRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeDDoSGraphResponse* response = [[IpantiDescribeDDoSGraphResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeDDoSGraphResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeDDoSGraphAsyncWithRequest:(IpantiDescribeDDoSGraphRequest*) describeDDoSGraphRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeDDoSGraphResponse* _Nullable describeDDoSGraphResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeDDoSGraphExecutor* excutor = [[IpantiDescribeDDoSGraphExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeDDoSGraphRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeDDoSGraphResponse* response = [[IpantiDescribeDDoSGraphResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableBlackListRuleOfForwardRule sync request
@param disableBlackListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableBlackListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) disableBlackListRuleOfForwardRuleSyncWithRequest:(IpantiDisableBlackListRuleOfForwardRuleRequest*) disableBlackListRuleOfForwardRuleRequest
{
IpantiDisableBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiDisableBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableBlackListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableBlackListRuleOfForwardRuleResponse* response = [[IpantiDisableBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableBlackListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableBlackListRuleOfForwardRuleAsyncWithRequest:(IpantiDisableBlackListRuleOfForwardRuleRequest*) disableBlackListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableBlackListRuleOfForwardRuleResponse* _Nullable disableBlackListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableBlackListRuleOfForwardRuleExecutor* excutor = [[IpantiDisableBlackListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableBlackListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableBlackListRuleOfForwardRuleResponse* response = [[IpantiDisableBlackListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeIpSetUsage sync request
@param describeIpSetUsageRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeIpSetUsageResponse` the request response data model
*/
-(NSDictionary*) describeIpSetUsageSyncWithRequest:(IpantiDescribeIpSetUsageRequest*) describeIpSetUsageRequest
{
IpantiDescribeIpSetUsageExecutor* excutor = [[IpantiDescribeIpSetUsageExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeIpSetUsageRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeIpSetUsageResponse* response = [[IpantiDescribeIpSetUsageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeIpSetUsageResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeIpSetUsageAsyncWithRequest:(IpantiDescribeIpSetUsageRequest*) describeIpSetUsageRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeIpSetUsageResponse* _Nullable describeIpSetUsageResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeIpSetUsageExecutor* excutor = [[IpantiDescribeIpSetUsageExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeIpSetUsageRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeIpSetUsageResponse* response = [[IpantiDescribeIpSetUsageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyCCProtectionConfigOfWebRule sync request
@param modifyCCProtectionConfigOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyCCProtectionConfigOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) modifyCCProtectionConfigOfWebRuleSyncWithRequest:(IpantiModifyCCProtectionConfigOfWebRuleRequest*) modifyCCProtectionConfigOfWebRuleRequest
{
IpantiModifyCCProtectionConfigOfWebRuleExecutor* excutor = [[IpantiModifyCCProtectionConfigOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyCCProtectionConfigOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyCCProtectionConfigOfWebRuleResponse* response = [[IpantiModifyCCProtectionConfigOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyCCProtectionConfigOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyCCProtectionConfigOfWebRuleAsyncWithRequest:(IpantiModifyCCProtectionConfigOfWebRuleRequest*) modifyCCProtectionConfigOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyCCProtectionConfigOfWebRuleResponse* _Nullable modifyCCProtectionConfigOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyCCProtectionConfigOfWebRuleExecutor* excutor = [[IpantiModifyCCProtectionConfigOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyCCProtectionConfigOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyCCProtectionConfigOfWebRuleResponse* response = [[IpantiModifyCCProtectionConfigOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
disableWhiteListRuleOfForwardRule sync request
@param disableWhiteListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWhiteListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) disableWhiteListRuleOfForwardRuleSyncWithRequest:(IpantiDisableWhiteListRuleOfForwardRuleRequest*) disableWhiteListRuleOfForwardRuleRequest
{
IpantiDisableWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiDisableWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:disableWhiteListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWhiteListRuleOfForwardRuleResponse* response = [[IpantiDisableWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"disableWhiteListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)disableWhiteListRuleOfForwardRuleAsyncWithRequest:(IpantiDisableWhiteListRuleOfForwardRuleRequest*) disableWhiteListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDisableWhiteListRuleOfForwardRuleResponse* _Nullable disableWhiteListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDisableWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiDisableWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:disableWhiteListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDisableWhiteListRuleOfForwardRuleResponse* response = [[IpantiDisableWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableCCProtectionRuleOfWebRule sync request
@param enableCCProtectionRuleOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableCCProtectionRuleOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) enableCCProtectionRuleOfWebRuleSyncWithRequest:(IpantiEnableCCProtectionRuleOfWebRuleRequest*) enableCCProtectionRuleOfWebRuleRequest
{
IpantiEnableCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiEnableCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableCCProtectionRuleOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableCCProtectionRuleOfWebRuleResponse* response = [[IpantiEnableCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableCCProtectionRuleOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableCCProtectionRuleOfWebRuleAsyncWithRequest:(IpantiEnableCCProtectionRuleOfWebRuleRequest*) enableCCProtectionRuleOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableCCProtectionRuleOfWebRuleResponse* _Nullable enableCCProtectionRuleOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableCCProtectionRuleOfWebRuleExecutor* excutor = [[IpantiEnableCCProtectionRuleOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableCCProtectionRuleOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableCCProtectionRuleOfWebRuleResponse* response = [[IpantiEnableCCProtectionRuleOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWhiteListRulesOfWebRule sync request
@param describeWhiteListRulesOfWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWhiteListRulesOfWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeWhiteListRulesOfWebRuleSyncWithRequest:(IpantiDescribeWhiteListRulesOfWebRuleRequest*) describeWhiteListRulesOfWebRuleRequest
{
IpantiDescribeWhiteListRulesOfWebRuleExecutor* excutor = [[IpantiDescribeWhiteListRulesOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWhiteListRulesOfWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWhiteListRulesOfWebRuleResponse* response = [[IpantiDescribeWhiteListRulesOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWhiteListRulesOfWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWhiteListRulesOfWebRuleAsyncWithRequest:(IpantiDescribeWhiteListRulesOfWebRuleRequest*) describeWhiteListRulesOfWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWhiteListRulesOfWebRuleResponse* _Nullable describeWhiteListRulesOfWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWhiteListRulesOfWebRuleExecutor* excutor = [[IpantiDescribeWhiteListRulesOfWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWhiteListRulesOfWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWhiteListRulesOfWebRuleResponse* response = [[IpantiDescribeWhiteListRulesOfWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWebRule sync request
@param describeWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWebRuleResponse` the request response data model
*/
-(NSDictionary*) describeWebRuleSyncWithRequest:(IpantiDescribeWebRuleRequest*) describeWebRuleRequest
{
IpantiDescribeWebRuleExecutor* excutor = [[IpantiDescribeWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleResponse* response = [[IpantiDescribeWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWebRuleAsyncWithRequest:(IpantiDescribeWebRuleRequest*) describeWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWebRuleResponse* _Nullable describeWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWebRuleExecutor* excutor = [[IpantiDescribeWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleResponse* response = [[IpantiDescribeWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWebRuleBlackListGeoAreas sync request
@param describeWebRuleBlackListGeoAreasRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWebRuleBlackListGeoAreasResponse` the request response data model
*/
-(NSDictionary*) describeWebRuleBlackListGeoAreasSyncWithRequest:(IpantiDescribeWebRuleBlackListGeoAreasRequest*) describeWebRuleBlackListGeoAreasRequest
{
IpantiDescribeWebRuleBlackListGeoAreasExecutor* excutor = [[IpantiDescribeWebRuleBlackListGeoAreasExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWebRuleBlackListGeoAreasRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleBlackListGeoAreasResponse* response = [[IpantiDescribeWebRuleBlackListGeoAreasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWebRuleBlackListGeoAreasResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWebRuleBlackListGeoAreasAsyncWithRequest:(IpantiDescribeWebRuleBlackListGeoAreasRequest*) describeWebRuleBlackListGeoAreasRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWebRuleBlackListGeoAreasResponse* _Nullable describeWebRuleBlackListGeoAreasResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWebRuleBlackListGeoAreasExecutor* excutor = [[IpantiDescribeWebRuleBlackListGeoAreasExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWebRuleBlackListGeoAreasRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWebRuleBlackListGeoAreasResponse* response = [[IpantiDescribeWebRuleBlackListGeoAreasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createForwardRule sync request
@param createForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createForwardRuleResponse` the request response data model
*/
-(NSDictionary*) createForwardRuleSyncWithRequest:(IpantiCreateForwardRuleRequest*) createForwardRuleRequest
{
IpantiCreateForwardRuleExecutor* excutor = [[IpantiCreateForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateForwardRuleResponse* response = [[IpantiCreateForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createForwardRuleAsyncWithRequest:(IpantiCreateForwardRuleRequest*) createForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiCreateForwardRuleResponse* _Nullable createForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiCreateForwardRuleExecutor* excutor = [[IpantiCreateForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiCreateForwardRuleResponse* response = [[IpantiCreateForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeVpcIpList sync request
@param describeVpcIpListRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeVpcIpListResponse` the request response data model
*/
-(NSDictionary*) describeVpcIpListSyncWithRequest:(IpantiDescribeVpcIpListRequest*) describeVpcIpListRequest
{
IpantiDescribeVpcIpListExecutor* excutor = [[IpantiDescribeVpcIpListExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeVpcIpListRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeVpcIpListResponse* response = [[IpantiDescribeVpcIpListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeVpcIpListResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeVpcIpListAsyncWithRequest:(IpantiDescribeVpcIpListRequest*) describeVpcIpListRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeVpcIpListResponse* _Nullable describeVpcIpListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeVpcIpListExecutor* excutor = [[IpantiDescribeVpcIpListExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeVpcIpListRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeVpcIpListResponse* response = [[IpantiDescribeVpcIpListResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyProtectionRuleOfForwardRule sync request
@param modifyProtectionRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyProtectionRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) modifyProtectionRuleOfForwardRuleSyncWithRequest:(IpantiModifyProtectionRuleOfForwardRuleRequest*) modifyProtectionRuleOfForwardRuleRequest
{
IpantiModifyProtectionRuleOfForwardRuleExecutor* excutor = [[IpantiModifyProtectionRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyProtectionRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyProtectionRuleOfForwardRuleResponse* response = [[IpantiModifyProtectionRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyProtectionRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyProtectionRuleOfForwardRuleAsyncWithRequest:(IpantiModifyProtectionRuleOfForwardRuleRequest*) modifyProtectionRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyProtectionRuleOfForwardRuleResponse* _Nullable modifyProtectionRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyProtectionRuleOfForwardRuleExecutor* excutor = [[IpantiModifyProtectionRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyProtectionRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyProtectionRuleOfForwardRuleResponse* response = [[IpantiModifyProtectionRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteWebRule sync request
@param deleteWebRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteWebRuleResponse` the request response data model
*/
-(NSDictionary*) deleteWebRuleSyncWithRequest:(IpantiDeleteWebRuleRequest*) deleteWebRuleRequest
{
IpantiDeleteWebRuleExecutor* excutor = [[IpantiDeleteWebRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteWebRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteWebRuleResponse* response = [[IpantiDeleteWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteWebRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteWebRuleAsyncWithRequest:(IpantiDeleteWebRuleRequest*) deleteWebRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDeleteWebRuleResponse* _Nullable deleteWebRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDeleteWebRuleExecutor* excutor = [[IpantiDeleteWebRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteWebRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDeleteWebRuleResponse* response = [[IpantiDeleteWebRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
modifyInstanceName sync request
@param modifyInstanceNameRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyInstanceNameResponse` the request response data model
*/
-(NSDictionary*) modifyInstanceNameSyncWithRequest:(IpantiModifyInstanceNameRequest*) modifyInstanceNameRequest
{
IpantiModifyInstanceNameExecutor* excutor = [[IpantiModifyInstanceNameExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:modifyInstanceNameRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyInstanceNameResponse* response = [[IpantiModifyInstanceNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"modifyInstanceNameResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)modifyInstanceNameAsyncWithRequest:(IpantiModifyInstanceNameRequest*) modifyInstanceNameRequest
                       completionHandler:(void(^)(int statusCode,IpantiModifyInstanceNameResponse* _Nullable modifyInstanceNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiModifyInstanceNameExecutor* excutor = [[IpantiModifyInstanceNameExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:modifyInstanceNameRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiModifyInstanceNameResponse* response = [[IpantiModifyInstanceNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeForwardRule sync request
@param describeForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeForwardRuleResponse` the request response data model
*/
-(NSDictionary*) describeForwardRuleSyncWithRequest:(IpantiDescribeForwardRuleRequest*) describeForwardRuleRequest
{
IpantiDescribeForwardRuleExecutor* excutor = [[IpantiDescribeForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeForwardRuleResponse* response = [[IpantiDescribeForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeForwardRuleAsyncWithRequest:(IpantiDescribeForwardRuleRequest*) describeForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeForwardRuleResponse* _Nullable describeForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeForwardRuleExecutor* excutor = [[IpantiDescribeForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeForwardRuleResponse* response = [[IpantiDescribeForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeWhiteListRuleOfForwardRule sync request
@param describeWhiteListRuleOfForwardRuleRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWhiteListRuleOfForwardRuleResponse` the request response data model
*/
-(NSDictionary*) describeWhiteListRuleOfForwardRuleSyncWithRequest:(IpantiDescribeWhiteListRuleOfForwardRuleRequest*) describeWhiteListRuleOfForwardRuleRequest
{
IpantiDescribeWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiDescribeWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeWhiteListRuleOfForwardRuleRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWhiteListRuleOfForwardRuleResponse* response = [[IpantiDescribeWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeWhiteListRuleOfForwardRuleResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeWhiteListRuleOfForwardRuleAsyncWithRequest:(IpantiDescribeWhiteListRuleOfForwardRuleRequest*) describeWhiteListRuleOfForwardRuleRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeWhiteListRuleOfForwardRuleResponse* _Nullable describeWhiteListRuleOfForwardRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeWhiteListRuleOfForwardRuleExecutor* excutor = [[IpantiDescribeWhiteListRuleOfForwardRuleExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeWhiteListRuleOfForwardRuleRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeWhiteListRuleOfForwardRuleResponse* response = [[IpantiDescribeWhiteListRuleOfForwardRuleResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeCCGraph sync request
@param describeCCGraphRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCCGraphResponse` the request response data model
*/
-(NSDictionary*) describeCCGraphSyncWithRequest:(IpantiDescribeCCGraphRequest*) describeCCGraphRequest
{
IpantiDescribeCCGraphExecutor* excutor = [[IpantiDescribeCCGraphExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeCCGraphRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCGraphResponse* response = [[IpantiDescribeCCGraphResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeCCGraphResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeCCGraphAsyncWithRequest:(IpantiDescribeCCGraphRequest*) describeCCGraphRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeCCGraphResponse* _Nullable describeCCGraphResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeCCGraphExecutor* excutor = [[IpantiDescribeCCGraphExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeCCGraphRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeCCGraphResponse* response = [[IpantiDescribeCCGraphResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeInstance sync request
@param describeInstanceRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceResponse` the request response data model
*/
-(NSDictionary*) describeInstanceSyncWithRequest:(IpantiDescribeInstanceRequest*) describeInstanceRequest
{
IpantiDescribeInstanceExecutor* excutor = [[IpantiDescribeInstanceExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeInstanceRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeInstanceResponse* response = [[IpantiDescribeInstanceResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeInstanceResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeInstanceAsyncWithRequest:(IpantiDescribeInstanceRequest*) describeInstanceRequest
                       completionHandler:(void(^)(int statusCode,IpantiDescribeInstanceResponse* _Nullable describeInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiDescribeInstanceExecutor* excutor = [[IpantiDescribeInstanceExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeInstanceRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiDescribeInstanceResponse* response = [[IpantiDescribeInstanceResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
enableWebRuleCCObserverMode sync request
@param enableWebRuleCCObserverModeRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWebRuleCCObserverModeResponse` the request response data model
*/
-(NSDictionary*) enableWebRuleCCObserverModeSyncWithRequest:(IpantiEnableWebRuleCCObserverModeRequest*) enableWebRuleCCObserverModeRequest
{
IpantiEnableWebRuleCCObserverModeExecutor* excutor = [[IpantiEnableWebRuleCCObserverModeExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:enableWebRuleCCObserverModeRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleCCObserverModeResponse* response = [[IpantiEnableWebRuleCCObserverModeResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"enableWebRuleCCObserverModeResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)enableWebRuleCCObserverModeAsyncWithRequest:(IpantiEnableWebRuleCCObserverModeRequest*) enableWebRuleCCObserverModeRequest
                       completionHandler:(void(^)(int statusCode,IpantiEnableWebRuleCCObserverModeResponse* _Nullable enableWebRuleCCObserverModeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
IpantiEnableWebRuleCCObserverModeExecutor* excutor = [[IpantiEnableWebRuleCCObserverModeExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:enableWebRuleCCObserverModeRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    IpantiEnableWebRuleCCObserverModeResponse* response = [[IpantiEnableWebRuleCCObserverModeResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}


 /**
 ipanti common sync request
 @param  jdcloudDataRequest request param
 @return key `statusCode` http request status code type is int
             `dataResult` the http request response data  type is NSData
             `requestError` the request error type is NSError
 */
 -(NSDictionary*) ipantiCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                                   url:(NSString*) url
                                                method:(NSString*) method{
    CommonExecutor* excutor = [[CommonExecutor alloc] initWithJDCloudClient:self url:url method:method];
    NSDictionary* responseResult = [excutor executeDataSync:jdcloudDataRequest];
    return responseResult;
}

-(void)ipantiCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                         url:(NSString*) url
                                      method:(NSString*) method
                           completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
     CommonExecutor* excutor = [[CommonExecutor alloc] initWithJDCloudClient:self url:url method:method];
    
    [excutor executeDataAsync:jdcloudDataRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        completionHandler(statusCode,responseData,error);
    }];
} 

@end
