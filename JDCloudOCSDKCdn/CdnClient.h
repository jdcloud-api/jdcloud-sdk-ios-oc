/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

JDCLOUD CDN Operation And Query API
API related to CDN instances

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef CdnClient_h
#define CdnClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKCdn/CdnApiModel.h>

@interface CdnClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    setOnlineBillingType sync request
    @param setOnlineBillingTypeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setOnlineBillingTypeResponse` the request response data model
    */
    -(NSDictionary*) setOnlineBillingTypeSyncWithRequest:(CdnSetOnlineBillingTypeRequest*) setOnlineBillingTypeRequest;

    -(void)setOnlineBillingTypeAsyncWithRequest:(CdnSetOnlineBillingTypeRequest*) setOnlineBillingTypeRequest
    completionHandler:(void(^)(int statusCode,CdnSetOnlineBillingTypeResponse* _Nullable setOnlineBillingTypeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainGroupDetail sync request
    @param queryDomainGroupDetailRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainGroupDetailResponse` the request response data model
    */
    -(NSDictionary*) queryDomainGroupDetailSyncWithRequest:(CdnQueryDomainGroupDetailRequest*) queryDomainGroupDetailRequest;

    -(void)queryDomainGroupDetailAsyncWithRequest:(CdnQueryDomainGroupDetailRequest*) queryDomainGroupDetailRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainGroupDetailResponse* _Nullable queryDomainGroupDetailResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryWafBlackRuleSwitch sync request
    @param queryWafBlackRuleSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryWafBlackRuleSwitchResponse` the request response data model
    */
    -(NSDictionary*) queryWafBlackRuleSwitchSyncWithRequest:(CdnQueryWafBlackRuleSwitchRequest*) queryWafBlackRuleSwitchRequest;

    -(void)queryWafBlackRuleSwitchAsyncWithRequest:(CdnQueryWafBlackRuleSwitchRequest*) queryWafBlackRuleSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnQueryWafBlackRuleSwitchResponse* _Nullable queryWafBlackRuleSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    operateLiveDomainIgnoreQueryString sync request
    @param operateLiveDomainIgnoreQueryStringRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `operateLiveDomainIgnoreQueryStringResponse` the request response data model
    */
    -(NSDictionary*) operateLiveDomainIgnoreQueryStringSyncWithRequest:(CdnOperateLiveDomainIgnoreQueryStringRequest*) operateLiveDomainIgnoreQueryStringRequest;

    -(void)operateLiveDomainIgnoreQueryStringAsyncWithRequest:(CdnOperateLiveDomainIgnoreQueryStringRequest*) operateLiveDomainIgnoreQueryStringRequest
    completionHandler:(void(^)(int statusCode,CdnOperateLiveDomainIgnoreQueryStringResponse* _Nullable operateLiveDomainIgnoreQueryStringResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteHttpHeader sync request
    @param deleteHttpHeaderRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteHttpHeaderResponse` the request response data model
    */
    -(NSDictionary*) deleteHttpHeaderSyncWithRequest:(CdnDeleteHttpHeaderRequest*) deleteHttpHeaderRequest;

    -(void)deleteHttpHeaderAsyncWithRequest:(CdnDeleteHttpHeaderRequest*) deleteHttpHeaderRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteHttpHeaderResponse* _Nullable deleteHttpHeaderResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disableWafBlackRules sync request
    @param disableWafBlackRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWafBlackRulesResponse` the request response data model
    */
    -(NSDictionary*) disableWafBlackRulesSyncWithRequest:(CdnDisableWafBlackRulesRequest*) disableWafBlackRulesRequest;

    -(void)disableWafBlackRulesAsyncWithRequest:(CdnDisableWafBlackRulesRequest*) disableWafBlackRulesRequest
    completionHandler:(void(^)(int statusCode,CdnDisableWafBlackRulesResponse* _Nullable disableWafBlackRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryWebProtectSettings sync request
    @param queryWebProtectSettingsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryWebProtectSettingsResponse` the request response data model
    */
    -(NSDictionary*) queryWebProtectSettingsSyncWithRequest:(CdnQueryWebProtectSettingsRequest*) queryWebProtectSettingsRequest;

    -(void)queryWebProtectSettingsAsyncWithRequest:(CdnQueryWebProtectSettingsRequest*) queryWebProtectSettingsRequest
    completionHandler:(void(^)(int statusCode,CdnQueryWebProtectSettingsResponse* _Nullable queryWebProtectSettingsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryGeoAreas sync request
    @param queryGeoAreasRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryGeoAreasResponse` the request response data model
    */
    -(NSDictionary*) queryGeoAreasSyncWithRequest:(CdnQueryGeoAreasRequest*) queryGeoAreasRequest;

    -(void)queryGeoAreasAsyncWithRequest:(CdnQueryGeoAreasRequest*) queryGeoAreasRequest
    completionHandler:(void(^)(int statusCode,CdnQueryGeoAreasResponse* _Nullable queryGeoAreasResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryStatisticsTopUrl sync request
    @param queryStatisticsTopUrlRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryStatisticsTopUrlResponse` the request response data model
    */
    -(NSDictionary*) queryStatisticsTopUrlSyncWithRequest:(CdnQueryStatisticsTopUrlRequest*) queryStatisticsTopUrlRequest;

    -(void)queryStatisticsTopUrlAsyncWithRequest:(CdnQueryStatisticsTopUrlRequest*) queryStatisticsTopUrlRequest
    completionHandler:(void(^)(int statusCode,CdnQueryStatisticsTopUrlResponse* _Nullable queryStatisticsTopUrlResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainConfigStatus sync request
    @param queryDomainConfigStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainConfigStatusResponse` the request response data model
    */
    -(NSDictionary*) queryDomainConfigStatusSyncWithRequest:(CdnQueryDomainConfigStatusRequest*) queryDomainConfigStatusRequest;

    -(void)queryDomainConfigStatusAsyncWithRequest:(CdnQueryDomainConfigStatusRequest*) queryDomainConfigStatusRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainConfigStatusResponse* _Nullable queryDomainConfigStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLiveStatisticsAreaDataGroupBy sync request
    @param queryLiveStatisticsAreaDataGroupByRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLiveStatisticsAreaDataGroupByResponse` the request response data model
    */
    -(NSDictionary*) queryLiveStatisticsAreaDataGroupBySyncWithRequest:(CdnQueryLiveStatisticsAreaDataGroupByRequest*) queryLiveStatisticsAreaDataGroupByRequest;

    -(void)queryLiveStatisticsAreaDataGroupByAsyncWithRequest:(CdnQueryLiveStatisticsAreaDataGroupByRequest*) queryLiveStatisticsAreaDataGroupByRequest
    completionHandler:(void(^)(int statusCode,CdnQueryLiveStatisticsAreaDataGroupByResponse* _Nullable queryLiveStatisticsAreaDataGroupByResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getAllUpperNodeIpList sync request
    @param getAllUpperNodeIpListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getAllUpperNodeIpListResponse` the request response data model
    */
    -(NSDictionary*) getAllUpperNodeIpListSyncWithRequest:(CdnGetAllUpperNodeIpListRequest*) getAllUpperNodeIpListRequest;

    -(void)getAllUpperNodeIpListAsyncWithRequest:(CdnGetAllUpperNodeIpListRequest*) getAllUpperNodeIpListRequest
    completionHandler:(void(^)(int statusCode,CdnGetAllUpperNodeIpListResponse* _Nullable getAllUpperNodeIpListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setIpBlackList sync request
    @param setIpBlackListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setIpBlackListResponse` the request response data model
    */
    -(NSDictionary*) setIpBlackListSyncWithRequest:(CdnSetIpBlackListRequest*) setIpBlackListRequest;

    -(void)setIpBlackListAsyncWithRequest:(CdnSetIpBlackListRequest*) setIpBlackListRequest
    completionHandler:(void(^)(int statusCode,CdnSetIpBlackListResponse* _Nullable setIpBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateWafWhiteRule sync request
    @param updateWafWhiteRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateWafWhiteRuleResponse` the request response data model
    */
    -(NSDictionary*) updateWafWhiteRuleSyncWithRequest:(CdnUpdateWafWhiteRuleRequest*) updateWafWhiteRuleRequest;

    -(void)updateWafWhiteRuleAsyncWithRequest:(CdnUpdateWafWhiteRuleRequest*) updateWafWhiteRuleRequest
    completionHandler:(void(^)(int statusCode,CdnUpdateWafWhiteRuleResponse* _Nullable updateWafWhiteRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setDomainConfig sync request
    @param setDomainConfigRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setDomainConfigResponse` the request response data model
    */
    -(NSDictionary*) setDomainConfigSyncWithRequest:(CdnSetDomainConfigRequest*) setDomainConfigRequest;

    -(void)setDomainConfigAsyncWithRequest:(CdnSetDomainConfigRequest*) setDomainConfigRequest
    completionHandler:(void(^)(int statusCode,CdnSetDomainConfigResponse* _Nullable setDomainConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    startDomain sync request
    @param startDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `startDomainResponse` the request response data model
    */
    -(NSDictionary*) startDomainSyncWithRequest:(CdnStartDomainRequest*) startDomainRequest;

    -(void)startDomainAsyncWithRequest:(CdnStartDomainRequest*) startDomainRequest
    completionHandler:(void(^)(int statusCode,CdnStartDomainResponse* _Nullable startDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setFollowRedirect sync request
    @param setFollowRedirectRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setFollowRedirectResponse` the request response data model
    */
    -(NSDictionary*) setFollowRedirectSyncWithRequest:(CdnSetFollowRedirectRequest*) setFollowRedirectRequest;

    -(void)setFollowRedirectAsyncWithRequest:(CdnSetFollowRedirectRequest*) setFollowRedirectRequest
    completionHandler:(void(^)(int statusCode,CdnSetFollowRedirectResponse* _Nullable setFollowRedirectResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setAccesskeyConfig sync request
    @param setAccesskeyConfigRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setAccesskeyConfigResponse` the request response data model
    */
    -(NSDictionary*) setAccesskeyConfigSyncWithRequest:(CdnSetAccesskeyConfigRequest*) setAccesskeyConfigRequest;

    -(void)setAccesskeyConfigAsyncWithRequest:(CdnSetAccesskeyConfigRequest*) setAccesskeyConfigRequest
    completionHandler:(void(^)(int statusCode,CdnSetAccesskeyConfigResponse* _Nullable setAccesskeyConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryBandWithArea sync request
    @param queryBandWithAreaRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryBandWithAreaResponse` the request response data model
    */
    -(NSDictionary*) queryBandWithAreaSyncWithRequest:(CdnQueryBandWithAreaRequest*) queryBandWithAreaRequest;

    -(void)queryBandWithAreaAsyncWithRequest:(CdnQueryBandWithAreaRequest*) queryBandWithAreaRequest
    completionHandler:(void(^)(int statusCode,CdnQueryBandWithAreaResponse* _Nullable queryBandWithAreaResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setRange sync request
    @param setRangeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setRangeResponse` the request response data model
    */
    -(NSDictionary*) setRangeSyncWithRequest:(CdnSetRangeRequest*) setRangeRequest;

    -(void)setRangeAsyncWithRequest:(CdnSetRangeRequest*) setRangeRequest
    completionHandler:(void(^)(int statusCode,CdnSetRangeResponse* _Nullable setRangeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setLiveDomainIpBlackList sync request
    @param setLiveDomainIpBlackListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setLiveDomainIpBlackListResponse` the request response data model
    */
    -(NSDictionary*) setLiveDomainIpBlackListSyncWithRequest:(CdnSetLiveDomainIpBlackListRequest*) setLiveDomainIpBlackListRequest;

    -(void)setLiveDomainIpBlackListAsyncWithRequest:(CdnSetLiveDomainIpBlackListRequest*) setLiveDomainIpBlackListRequest
    completionHandler:(void(^)(int statusCode,CdnSetLiveDomainIpBlackListResponse* _Nullable setLiveDomainIpBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setCCProtectSwitch sync request
    @param setCCProtectSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setCCProtectSwitchResponse` the request response data model
    */
    -(NSDictionary*) setCCProtectSwitchSyncWithRequest:(CdnSetCCProtectSwitchRequest*) setCCProtectSwitchRequest;

    -(void)setCCProtectSwitchAsyncWithRequest:(CdnSetCCProtectSwitchRequest*) setCCProtectSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnSetCCProtectSwitchResponse* _Nullable setCCProtectSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryMonitor sync request
    @param queryMonitorRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryMonitorResponse` the request response data model
    */
    -(NSDictionary*) queryMonitorSyncWithRequest:(CdnQueryMonitorRequest*) queryMonitorRequest;

    -(void)queryMonitorAsyncWithRequest:(CdnQueryMonitorRequest*) queryMonitorRequest
    completionHandler:(void(^)(int statusCode,CdnQueryMonitorResponse* _Nullable queryMonitorResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLiveDomainApps sync request
    @param queryLiveDomainAppsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLiveDomainAppsResponse` the request response data model
    */
    -(NSDictionary*) queryLiveDomainAppsSyncWithRequest:(CdnQueryLiveDomainAppsRequest*) queryLiveDomainAppsRequest;

    -(void)queryLiveDomainAppsAsyncWithRequest:(CdnQueryLiveDomainAppsRequest*) queryLiveDomainAppsRequest
    completionHandler:(void(^)(int statusCode,CdnQueryLiveDomainAppsResponse* _Nullable queryLiveDomainAppsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disableWafWhiteRules sync request
    @param disableWafWhiteRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableWafWhiteRulesResponse` the request response data model
    */
    -(NSDictionary*) disableWafWhiteRulesSyncWithRequest:(CdnDisableWafWhiteRulesRequest*) disableWafWhiteRulesRequest;

    -(void)disableWafWhiteRulesAsyncWithRequest:(CdnDisableWafWhiteRulesRequest*) disableWafWhiteRulesRequest
    completionHandler:(void(^)(int statusCode,CdnDisableWafWhiteRulesResponse* _Nullable disableWafWhiteRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createWafBlackRule sync request
    @param createWafBlackRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createWafBlackRuleResponse` the request response data model
    */
    -(NSDictionary*) createWafBlackRuleSyncWithRequest:(CdnCreateWafBlackRuleRequest*) createWafBlackRuleRequest;

    -(void)createWafBlackRuleAsyncWithRequest:(CdnCreateWafBlackRuleRequest*) createWafBlackRuleRequest
    completionHandler:(void(^)(int statusCode,CdnCreateWafBlackRuleResponse* _Nullable createWafBlackRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createDomainGroup sync request
    @param createDomainGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createDomainGroupResponse` the request response data model
    */
    -(NSDictionary*) createDomainGroupSyncWithRequest:(CdnCreateDomainGroupRequest*) createDomainGroupRequest;

    -(void)createDomainGroupAsyncWithRequest:(CdnCreateDomainGroupRequest*) createDomainGroupRequest
    completionHandler:(void(^)(int statusCode,CdnCreateDomainGroupResponse* _Nullable createDomainGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryWebProtectSwitch sync request
    @param queryWebProtectSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryWebProtectSwitchResponse` the request response data model
    */
    -(NSDictionary*) queryWebProtectSwitchSyncWithRequest:(CdnQueryWebProtectSwitchRequest*) queryWebProtectSwitchRequest;

    -(void)queryWebProtectSwitchAsyncWithRequest:(CdnQueryWebProtectSwitchRequest*) queryWebProtectSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnQueryWebProtectSwitchResponse* _Nullable queryWebProtectSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    wafQueryPvForAreaAndIp sync request
    @param wafQueryPvForAreaAndIpRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `wafQueryPvForAreaAndIpResponse` the request response data model
    */
    -(NSDictionary*) wafQueryPvForAreaAndIpSyncWithRequest:(CdnWafQueryPvForAreaAndIpRequest*) wafQueryPvForAreaAndIpRequest;

    -(void)wafQueryPvForAreaAndIpAsyncWithRequest:(CdnWafQueryPvForAreaAndIpRequest*) wafQueryPvForAreaAndIpRequest
    completionHandler:(void(^)(int statusCode,CdnWafQueryPvForAreaAndIpResponse* _Nullable wafQueryPvForAreaAndIpResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    operateIpBlackList sync request
    @param operateIpBlackListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `operateIpBlackListResponse` the request response data model
    */
    -(NSDictionary*) operateIpBlackListSyncWithRequest:(CdnOperateIpBlackListRequest*) operateIpBlackListRequest;

    -(void)operateIpBlackListAsyncWithRequest:(CdnOperateIpBlackListRequest*) operateIpBlackListRequest
    completionHandler:(void(^)(int statusCode,CdnOperateIpBlackListResponse* _Nullable operateIpBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryMixStatisticsData sync request
    @param queryMixStatisticsDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryMixStatisticsDataResponse` the request response data model
    */
    -(NSDictionary*) queryMixStatisticsDataSyncWithRequest:(CdnQueryMixStatisticsDataRequest*) queryMixStatisticsDataRequest;

    -(void)queryMixStatisticsDataAsyncWithRequest:(CdnQueryMixStatisticsDataRequest*) queryMixStatisticsDataRequest
    completionHandler:(void(^)(int statusCode,CdnQueryMixStatisticsDataResponse* _Nullable queryMixStatisticsDataResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryRefreshTask sync request
    @param queryRefreshTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryRefreshTaskResponse` the request response data model
    */
    -(NSDictionary*) queryRefreshTaskSyncWithRequest:(CdnQueryRefreshTaskRequest*) queryRefreshTaskRequest;

    -(void)queryRefreshTaskAsyncWithRequest:(CdnQueryRefreshTaskRequest*) queryRefreshTaskRequest
    completionHandler:(void(^)(int statusCode,CdnQueryRefreshTaskResponse* _Nullable queryRefreshTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getDomainDetail sync request
    @param getDomainDetailRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getDomainDetailResponse` the request response data model
    */
    -(NSDictionary*) getDomainDetailSyncWithRequest:(CdnGetDomainDetailRequest*) getDomainDetailRequest;

    -(void)getDomainDetailAsyncWithRequest:(CdnGetDomainDetailRequest*) getDomainDetailRequest
    completionHandler:(void(^)(int statusCode,CdnGetDomainDetailResponse* _Nullable getDomainDetailResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setNetProtectionRulesSwitch sync request
    @param setNetProtectionRulesSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setNetProtectionRulesSwitchResponse` the request response data model
    */
    -(NSDictionary*) setNetProtectionRulesSwitchSyncWithRequest:(CdnSetNetProtectionRulesSwitchRequest*) setNetProtectionRulesSwitchRequest;

    -(void)setNetProtectionRulesSwitchAsyncWithRequest:(CdnSetNetProtectionRulesSwitchRequest*) setNetProtectionRulesSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnSetNetProtectionRulesSwitchResponse* _Nullable setNetProtectionRulesSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    searchAttackLog sync request
    @param searchAttackLogRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `searchAttackLogResponse` the request response data model
    */
    -(NSDictionary*) searchAttackLogSyncWithRequest:(CdnSearchAttackLogRequest*) searchAttackLogRequest;

    -(void)searchAttackLogAsyncWithRequest:(CdnSearchAttackLogRequest*) searchAttackLogRequest
    completionHandler:(void(^)(int statusCode,CdnSearchAttackLogResponse* _Nullable searchAttackLogResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryStatisticsDataGroupByArea sync request
    @param queryStatisticsDataGroupByAreaRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryStatisticsDataGroupByAreaResponse` the request response data model
    */
    -(NSDictionary*) queryStatisticsDataGroupByAreaSyncWithRequest:(CdnQueryStatisticsDataGroupByAreaRequest*) queryStatisticsDataGroupByAreaRequest;

    -(void)queryStatisticsDataGroupByAreaAsyncWithRequest:(CdnQueryStatisticsDataGroupByAreaRequest*) queryStatisticsDataGroupByAreaRequest
    completionHandler:(void(^)(int statusCode,CdnQueryStatisticsDataGroupByAreaResponse* _Nullable queryStatisticsDataGroupByAreaResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setLiveDomainAccessKey sync request
    @param setLiveDomainAccessKeyRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setLiveDomainAccessKeyResponse` the request response data model
    */
    -(NSDictionary*) setLiveDomainAccessKeySyncWithRequest:(CdnSetLiveDomainAccessKeyRequest*) setLiveDomainAccessKeyRequest;

    -(void)setLiveDomainAccessKeyAsyncWithRequest:(CdnSetLiveDomainAccessKeyRequest*) setLiveDomainAccessKeyRequest
    completionHandler:(void(^)(int statusCode,CdnSetLiveDomainAccessKeyResponse* _Nullable setLiveDomainAccessKeyResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    querywafBlackRules sync request
    @param querywafBlackRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `querywafBlackRulesResponse` the request response data model
    */
    -(NSDictionary*) querywafBlackRulesSyncWithRequest:(CdnQuerywafBlackRulesRequest*) querywafBlackRulesRequest;

    -(void)querywafBlackRulesAsyncWithRequest:(CdnQuerywafBlackRulesRequest*) querywafBlackRulesRequest
    completionHandler:(void(^)(int statusCode,CdnQuerywafBlackRulesResponse* _Nullable querywafBlackRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteForbiddenStream sync request
    @param deleteForbiddenStreamRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteForbiddenStreamResponse` the request response data model
    */
    -(NSDictionary*) deleteForbiddenStreamSyncWithRequest:(CdnDeleteForbiddenStreamRequest*) deleteForbiddenStreamRequest;

    -(void)deleteForbiddenStreamAsyncWithRequest:(CdnDeleteForbiddenStreamRequest*) deleteForbiddenStreamRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteForbiddenStreamResponse* _Nullable deleteForbiddenStreamResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setWafWhiteRuleSwitch sync request
    @param setWafWhiteRuleSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setWafWhiteRuleSwitchResponse` the request response data model
    */
    -(NSDictionary*) setWafWhiteRuleSwitchSyncWithRequest:(CdnSetWafWhiteRuleSwitchRequest*) setWafWhiteRuleSwitchRequest;

    -(void)setWafWhiteRuleSwitchAsyncWithRequest:(CdnSetWafWhiteRuleSwitchRequest*) setWafWhiteRuleSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnSetWafWhiteRuleSwitchResponse* _Nullable setWafWhiteRuleSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setPushIpWhiteList sync request
    @param setPushIpWhiteListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setPushIpWhiteListResponse` the request response data model
    */
    -(NSDictionary*) setPushIpWhiteListSyncWithRequest:(CdnSetPushIpWhiteListRequest*) setPushIpWhiteListRequest;

    -(void)setPushIpWhiteListAsyncWithRequest:(CdnSetPushIpWhiteListRequest*) setPushIpWhiteListRequest
    completionHandler:(void(^)(int statusCode,CdnSetPushIpWhiteListResponse* _Nullable setPushIpWhiteListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryRefreshTaskByIds sync request
    @param queryRefreshTaskByIdsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryRefreshTaskByIdsResponse` the request response data model
    */
    -(NSDictionary*) queryRefreshTaskByIdsSyncWithRequest:(CdnQueryRefreshTaskByIdsRequest*) queryRefreshTaskByIdsRequest;

    -(void)queryRefreshTaskByIdsAsyncWithRequest:(CdnQueryRefreshTaskByIdsRequest*) queryRefreshTaskByIdsRequest
    completionHandler:(void(^)(int statusCode,CdnQueryRefreshTaskByIdsResponse* _Nullable queryRefreshTaskByIdsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryStatisticsDataGroupSum sync request
    @param queryStatisticsDataGroupSumRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryStatisticsDataGroupSumResponse` the request response data model
    */
    -(NSDictionary*) queryStatisticsDataGroupSumSyncWithRequest:(CdnQueryStatisticsDataGroupSumRequest*) queryStatisticsDataGroupSumRequest;

    -(void)queryStatisticsDataGroupSumAsyncWithRequest:(CdnQueryStatisticsDataGroupSumRequest*) queryStatisticsDataGroupSumRequest
    completionHandler:(void(^)(int statusCode,CdnQueryStatisticsDataGroupSumResponse* _Nullable queryStatisticsDataGroupSumResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setHttpHeader sync request
    @param setHttpHeaderRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setHttpHeaderResponse` the request response data model
    */
    -(NSDictionary*) setHttpHeaderSyncWithRequest:(CdnSetHttpHeaderRequest*) setHttpHeaderRequest;

    -(void)setHttpHeaderAsyncWithRequest:(CdnSetHttpHeaderRequest*) setHttpHeaderRequest
    completionHandler:(void(^)(int statusCode,CdnSetHttpHeaderResponse* _Nullable setHttpHeaderResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryBand sync request
    @param queryBandRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryBandResponse` the request response data model
    */
    -(NSDictionary*) queryBandSyncWithRequest:(CdnQueryBandRequest*) queryBandRequest;

    -(void)queryBandAsyncWithRequest:(CdnQueryBandRequest*) queryBandRequest
    completionHandler:(void(^)(int statusCode,CdnQueryBandResponse* _Nullable queryBandResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    checkWhetherIpBelongToJCloud sync request
    @param checkWhetherIpBelongToJCloudRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `checkWhetherIpBelongToJCloudResponse` the request response data model
    */
    -(NSDictionary*) checkWhetherIpBelongToJCloudSyncWithRequest:(CdnCheckWhetherIpBelongToJCloudRequest*) checkWhetherIpBelongToJCloudRequest;

    -(void)checkWhetherIpBelongToJCloudAsyncWithRequest:(CdnCheckWhetherIpBelongToJCloudRequest*) checkWhetherIpBelongToJCloudRequest
    completionHandler:(void(^)(int statusCode,CdnCheckWhetherIpBelongToJCloudResponse* _Nullable checkWhetherIpBelongToJCloudResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLiveStatisticsData sync request
    @param queryLiveStatisticsDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLiveStatisticsDataResponse` the request response data model
    */
    -(NSDictionary*) queryLiveStatisticsDataSyncWithRequest:(CdnQueryLiveStatisticsDataRequest*) queryLiveStatisticsDataRequest;

    -(void)queryLiveStatisticsDataAsyncWithRequest:(CdnQueryLiveStatisticsDataRequest*) queryLiveStatisticsDataRequest
    completionHandler:(void(^)(int statusCode,CdnQueryLiveStatisticsDataResponse* _Nullable queryLiveStatisticsDataResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setOriginAuthentication sync request
    @param setOriginAuthenticationRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setOriginAuthenticationResponse` the request response data model
    */
    -(NSDictionary*) setOriginAuthenticationSyncWithRequest:(CdnSetOriginAuthenticationRequest*) setOriginAuthenticationRequest;

    -(void)setOriginAuthenticationAsyncWithRequest:(CdnSetOriginAuthenticationRequest*) setOriginAuthenticationRequest
    completionHandler:(void(^)(int statusCode,CdnSetOriginAuthenticationResponse* _Nullable setOriginAuthenticationResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainsLog sync request
    @param queryDomainsLogRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainsLogResponse` the request response data model
    */
    -(NSDictionary*) queryDomainsLogSyncWithRequest:(CdnQueryDomainsLogRequest*) queryDomainsLogRequest;

    -(void)queryDomainsLogAsyncWithRequest:(CdnQueryDomainsLogRequest*) queryDomainsLogRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainsLogResponse* _Nullable queryDomainsLogResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableCCProtectRule sync request
    @param enableCCProtectRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableCCProtectRuleResponse` the request response data model
    */
    -(NSDictionary*) enableCCProtectRuleSyncWithRequest:(CdnEnableCCProtectRuleRequest*) enableCCProtectRuleRequest;

    -(void)enableCCProtectRuleAsyncWithRequest:(CdnEnableCCProtectRuleRequest*) enableCCProtectRuleRequest
    completionHandler:(void(^)(int statusCode,CdnEnableCCProtectRuleResponse* _Nullable enableCCProtectRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLiveDomainDetail sync request
    @param queryLiveDomainDetailRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLiveDomainDetailResponse` the request response data model
    */
    -(NSDictionary*) queryLiveDomainDetailSyncWithRequest:(CdnQueryLiveDomainDetailRequest*) queryLiveDomainDetailRequest;

    -(void)queryLiveDomainDetailAsyncWithRequest:(CdnQueryLiveDomainDetailRequest*) queryLiveDomainDetailRequest
    completionHandler:(void(^)(int statusCode,CdnQueryLiveDomainDetailResponse* _Nullable queryLiveDomainDetailResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setRefer sync request
    @param setReferRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setReferResponse` the request response data model
    */
    -(NSDictionary*) setReferSyncWithRequest:(CdnSetReferRequest*) setReferRequest;

    -(void)setReferAsyncWithRequest:(CdnSetReferRequest*) setReferRequest
    completionHandler:(void(^)(int statusCode,CdnSetReferResponse* _Nullable setReferResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryIpBlackSettingStatus sync request
    @param queryIpBlackSettingStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryIpBlackSettingStatusResponse` the request response data model
    */
    -(NSDictionary*) queryIpBlackSettingStatusSyncWithRequest:(CdnQueryIpBlackSettingStatusRequest*) queryIpBlackSettingStatusRequest;

    -(void)queryIpBlackSettingStatusAsyncWithRequest:(CdnQueryIpBlackSettingStatusRequest*) queryIpBlackSettingStatusRequest
    completionHandler:(void(^)(int statusCode,CdnQueryIpBlackSettingStatusResponse* _Nullable queryIpBlackSettingStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryStatisticsTopIp sync request
    @param queryStatisticsTopIpRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryStatisticsTopIpResponse` the request response data model
    */
    -(NSDictionary*) queryStatisticsTopIpSyncWithRequest:(CdnQueryStatisticsTopIpRequest*) queryStatisticsTopIpRequest;

    -(void)queryStatisticsTopIpAsyncWithRequest:(CdnQueryStatisticsTopIpRequest*) queryStatisticsTopIpRequest
    completionHandler:(void(^)(int statusCode,CdnQueryStatisticsTopIpResponse* _Nullable queryStatisticsTopIpResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createLiveDomainPrefecthTask sync request
    @param createLiveDomainPrefecthTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createLiveDomainPrefecthTaskResponse` the request response data model
    */
    -(NSDictionary*) createLiveDomainPrefecthTaskSyncWithRequest:(CdnCreateLiveDomainPrefecthTaskRequest*) createLiveDomainPrefecthTaskRequest;

    -(void)createLiveDomainPrefecthTaskAsyncWithRequest:(CdnCreateLiveDomainPrefecthTaskRequest*) createLiveDomainPrefecthTaskRequest
    completionHandler:(void(^)(int statusCode,CdnCreateLiveDomainPrefecthTaskResponse* _Nullable createLiveDomainPrefecthTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    wafQueryAttackDetails sync request
    @param wafQueryAttackDetailsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `wafQueryAttackDetailsResponse` the request response data model
    */
    -(NSDictionary*) wafQueryAttackDetailsSyncWithRequest:(CdnWafQueryAttackDetailsRequest*) wafQueryAttackDetailsRequest;

    -(void)wafQueryAttackDetailsAsyncWithRequest:(CdnWafQueryAttackDetailsRequest*) wafQueryAttackDetailsRequest
    completionHandler:(void(^)(int statusCode,CdnWafQueryAttackDetailsResponse* _Nullable wafQueryAttackDetailsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    stopMonitor sync request
    @param stopMonitorRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `stopMonitorResponse` the request response data model
    */
    -(NSDictionary*) stopMonitorSyncWithRequest:(CdnStopMonitorRequest*) stopMonitorRequest;

    -(void)stopMonitorAsyncWithRequest:(CdnStopMonitorRequest*) stopMonitorRequest
    completionHandler:(void(^)(int statusCode,CdnStopMonitorResponse* _Nullable stopMonitorResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryHttpHeader sync request
    @param queryHttpHeaderRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryHttpHeaderResponse` the request response data model
    */
    -(NSDictionary*) queryHttpHeaderSyncWithRequest:(CdnQueryHttpHeaderRequest*) queryHttpHeaderRequest;

    -(void)queryHttpHeaderAsyncWithRequest:(CdnQueryHttpHeaderRequest*) queryHttpHeaderRequest
    completionHandler:(void(^)(int statusCode,CdnQueryHttpHeaderResponse* _Nullable queryHttpHeaderResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryWafRegions sync request
    @param queryWafRegionsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryWafRegionsResponse` the request response data model
    */
    -(NSDictionary*) queryWafRegionsSyncWithRequest:(CdnQueryWafRegionsRequest*) queryWafRegionsRequest;

    -(void)queryWafRegionsAsyncWithRequest:(CdnQueryWafRegionsRequest*) queryWafRegionsRequest
    completionHandler:(void(^)(int statusCode,CdnQueryWafRegionsResponse* _Nullable queryWafRegionsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLiveDomainDetailV2 sync request
    @param queryLiveDomainDetailV2Request request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLiveDomainDetailV2Response` the request response data model
    */
    -(NSDictionary*) queryLiveDomainDetailV2SyncWithRequest:(CdnQueryLiveDomainDetailV2Request*) queryLiveDomainDetailV2Request;

    -(void)queryLiveDomainDetailV2AsyncWithRequest:(CdnQueryLiveDomainDetailV2Request*) queryLiveDomainDetailV2Request
    completionHandler:(void(^)(int statusCode,CdnQueryLiveDomainDetailV2Response* _Nullable queryLiveDomainDetailV2Response, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createRefreshTaskForCallbackV2 sync request
    @param createRefreshTaskForCallbackV2Request request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRefreshTaskForCallbackV2Response` the request response data model
    */
    -(NSDictionary*) createRefreshTaskForCallbackV2SyncWithRequest:(CdnCreateRefreshTaskForCallbackV2Request*) createRefreshTaskForCallbackV2Request;

    -(void)createRefreshTaskForCallbackV2AsyncWithRequest:(CdnCreateRefreshTaskForCallbackV2Request*) createRefreshTaskForCallbackV2Request
    completionHandler:(void(^)(int statusCode,CdnCreateRefreshTaskForCallbackV2Response* _Nullable createRefreshTaskForCallbackV2Response, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryWafWhiteRuleSwitch sync request
    @param queryWafWhiteRuleSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryWafWhiteRuleSwitchResponse` the request response data model
    */
    -(NSDictionary*) queryWafWhiteRuleSwitchSyncWithRequest:(CdnQueryWafWhiteRuleSwitchRequest*) queryWafWhiteRuleSwitchRequest;

    -(void)queryWafWhiteRuleSwitchAsyncWithRequest:(CdnQueryWafWhiteRuleSwitchRequest*) queryWafWhiteRuleSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnQueryWafWhiteRuleSwitchResponse* _Nullable queryWafWhiteRuleSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createCCProtectRule sync request
    @param createCCProtectRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createCCProtectRuleResponse` the request response data model
    */
    -(NSDictionary*) createCCProtectRuleSyncWithRequest:(CdnCreateCCProtectRuleRequest*) createCCProtectRuleRequest;

    -(void)createCCProtectRuleAsyncWithRequest:(CdnCreateCCProtectRuleRequest*) createCCProtectRuleRequest
    completionHandler:(void(^)(int statusCode,CdnCreateCCProtectRuleResponse* _Nullable createCCProtectRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createWafWhiteRule sync request
    @param createWafWhiteRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createWafWhiteRuleResponse` the request response data model
    */
    -(NSDictionary*) createWafWhiteRuleSyncWithRequest:(CdnCreateWafWhiteRuleRequest*) createWafWhiteRuleRequest;

    -(void)createWafWhiteRuleAsyncWithRequest:(CdnCreateWafWhiteRuleRequest*) createWafWhiteRuleRequest
    completionHandler:(void(^)(int statusCode,CdnCreateWafWhiteRuleResponse* _Nullable createWafWhiteRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLivePrefetchTask sync request
    @param queryLivePrefetchTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLivePrefetchTaskResponse` the request response data model
    */
    -(NSDictionary*) queryLivePrefetchTaskSyncWithRequest:(CdnQueryLivePrefetchTaskRequest*) queryLivePrefetchTaskRequest;

    -(void)queryLivePrefetchTaskAsyncWithRequest:(CdnQueryLivePrefetchTaskRequest*) queryLivePrefetchTaskRequest
    completionHandler:(void(^)(int statusCode,CdnQueryLivePrefetchTaskResponse* _Nullable queryLivePrefetchTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    querywafWhiteRules sync request
    @param querywafWhiteRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `querywafWhiteRulesResponse` the request response data model
    */
    -(NSDictionary*) querywafWhiteRulesSyncWithRequest:(CdnQuerywafWhiteRulesRequest*) querywafWhiteRulesRequest;

    -(void)querywafWhiteRulesAsyncWithRequest:(CdnQuerywafWhiteRulesRequest*) querywafWhiteRulesRequest
    completionHandler:(void(^)(int statusCode,CdnQuerywafWhiteRulesResponse* _Nullable querywafWhiteRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setHttpType sync request
    @param setHttpTypeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setHttpTypeResponse` the request response data model
    */
    -(NSDictionary*) setHttpTypeSyncWithRequest:(CdnSetHttpTypeRequest*) setHttpTypeRequest;

    -(void)setHttpTypeAsyncWithRequest:(CdnSetHttpTypeRequest*) setHttpTypeRequest
    completionHandler:(void(^)(int statusCode,CdnSetHttpTypeResponse* _Nullable setHttpTypeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainLog sync request
    @param queryDomainLogRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainLogResponse` the request response data model
    */
    -(NSDictionary*) queryDomainLogSyncWithRequest:(CdnQueryDomainLogRequest*) queryDomainLogRequest;

    -(void)queryDomainLogAsyncWithRequest:(CdnQueryDomainLogRequest*) queryDomainLogRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainLogResponse* _Nullable queryDomainLogResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryMixTrafficGroupSum sync request
    @param queryMixTrafficGroupSumRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryMixTrafficGroupSumResponse` the request response data model
    */
    -(NSDictionary*) queryMixTrafficGroupSumSyncWithRequest:(CdnQueryMixTrafficGroupSumRequest*) queryMixTrafficGroupSumRequest;

    -(void)queryMixTrafficGroupSumAsyncWithRequest:(CdnQueryMixTrafficGroupSumRequest*) queryMixTrafficGroupSumRequest
    completionHandler:(void(^)(int statusCode,CdnQueryMixTrafficGroupSumResponse* _Nullable queryMixTrafficGroupSumResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryOssBuckets sync request
    @param queryOssBucketsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryOssBucketsResponse` the request response data model
    */
    -(NSDictionary*) queryOssBucketsSyncWithRequest:(CdnQueryOssBucketsRequest*) queryOssBucketsRequest;

    -(void)queryOssBucketsAsyncWithRequest:(CdnQueryOssBucketsRequest*) queryOssBucketsRequest
    completionHandler:(void(^)(int statusCode,CdnQueryOssBucketsResponse* _Nullable queryOssBucketsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryAttackTypeCount sync request
    @param queryAttackTypeCountRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryAttackTypeCountResponse` the request response data model
    */
    -(NSDictionary*) queryAttackTypeCountSyncWithRequest:(CdnQueryAttackTypeCountRequest*) queryAttackTypeCountRequest;

    -(void)queryAttackTypeCountAsyncWithRequest:(CdnQueryAttackTypeCountRequest*) queryAttackTypeCountRequest
    completionHandler:(void(^)(int statusCode,CdnQueryAttackTypeCountResponse* _Nullable queryAttackTypeCountResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setLiveDomainBackSourceHost sync request
    @param setLiveDomainBackSourceHostRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setLiveDomainBackSourceHostResponse` the request response data model
    */
    -(NSDictionary*) setLiveDomainBackSourceHostSyncWithRequest:(CdnSetLiveDomainBackSourceHostRequest*) setLiveDomainBackSourceHostRequest;

    -(void)setLiveDomainBackSourceHostAsyncWithRequest:(CdnSetLiveDomainBackSourceHostRequest*) setLiveDomainBackSourceHostRequest
    completionHandler:(void(^)(int statusCode,CdnSetLiveDomainBackSourceHostResponse* _Nullable setLiveDomainBackSourceHostResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryIpBlackList sync request
    @param queryIpBlackListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryIpBlackListResponse` the request response data model
    */
    -(NSDictionary*) queryIpBlackListSyncWithRequest:(CdnQueryIpBlackListRequest*) queryIpBlackListRequest;

    -(void)queryIpBlackListAsyncWithRequest:(CdnQueryIpBlackListRequest*) queryIpBlackListRequest
    completionHandler:(void(^)(int statusCode,CdnQueryIpBlackListResponse* _Nullable queryIpBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setProtocolConvert sync request
    @param setProtocolConvertRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setProtocolConvertResponse` the request response data model
    */
    -(NSDictionary*) setProtocolConvertSyncWithRequest:(CdnSetProtocolConvertRequest*) setProtocolConvertRequest;

    -(void)setProtocolConvertAsyncWithRequest:(CdnSetProtocolConvertRequest*) setProtocolConvertRequest
    completionHandler:(void(^)(int statusCode,CdnSetProtocolConvertResponse* _Nullable setProtocolConvertResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryCCProtectRules sync request
    @param queryCCProtectRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryCCProtectRulesResponse` the request response data model
    */
    -(NSDictionary*) queryCCProtectRulesSyncWithRequest:(CdnQueryCCProtectRulesRequest*) queryCCProtectRulesRequest;

    -(void)queryCCProtectRulesAsyncWithRequest:(CdnQueryCCProtectRulesRequest*) queryCCProtectRulesRequest
    completionHandler:(void(^)(int statusCode,CdnQueryCCProtectRulesResponse* _Nullable queryCCProtectRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setLiveDomainRefer sync request
    @param setLiveDomainReferRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setLiveDomainReferResponse` the request response data model
    */
    -(NSDictionary*) setLiveDomainReferSyncWithRequest:(CdnSetLiveDomainReferRequest*) setLiveDomainReferRequest;

    -(void)setLiveDomainReferAsyncWithRequest:(CdnSetLiveDomainReferRequest*) setLiveDomainReferRequest
    completionHandler:(void(^)(int statusCode,CdnSetLiveDomainReferResponse* _Nullable setLiveDomainReferResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getDomainList sync request
    @param getDomainListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getDomainListResponse` the request response data model
    */
    -(NSDictionary*) getDomainListSyncWithRequest:(CdnGetDomainListRequest*) getDomainListRequest;

    -(void)getDomainListAsyncWithRequest:(CdnGetDomainListRequest*) getDomainListRequest
    completionHandler:(void(^)(int statusCode,CdnGetDomainListResponse* _Nullable getDomainListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setIgnoreQueryString sync request
    @param setIgnoreQueryStringRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setIgnoreQueryStringResponse` the request response data model
    */
    -(NSDictionary*) setIgnoreQueryStringSyncWithRequest:(CdnSetIgnoreQueryStringRequest*) setIgnoreQueryStringRequest;

    -(void)setIgnoreQueryStringAsyncWithRequest:(CdnSetIgnoreQueryStringRequest*) setIgnoreQueryStringRequest
    completionHandler:(void(^)(int statusCode,CdnSetIgnoreQueryStringResponse* _Nullable setIgnoreQueryStringResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    batchDeleteDomainGroup sync request
    @param batchDeleteDomainGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `batchDeleteDomainGroupResponse` the request response data model
    */
    -(NSDictionary*) batchDeleteDomainGroupSyncWithRequest:(CdnBatchDeleteDomainGroupRequest*) batchDeleteDomainGroupRequest;

    -(void)batchDeleteDomainGroupAsyncWithRequest:(CdnBatchDeleteDomainGroupRequest*) batchDeleteDomainGroupRequest
    completionHandler:(void(^)(int statusCode,CdnBatchDeleteDomainGroupResponse* _Nullable batchDeleteDomainGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setUserAgentConfig sync request
    @param setUserAgentConfigRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setUserAgentConfigResponse` the request response data model
    */
    -(NSDictionary*) setUserAgentConfigSyncWithRequest:(CdnSetUserAgentConfigRequest*) setUserAgentConfigRequest;

    -(void)setUserAgentConfigAsyncWithRequest:(CdnSetUserAgentConfigRequest*) setUserAgentConfigRequest
    completionHandler:(void(^)(int statusCode,CdnSetUserAgentConfigResponse* _Nullable setUserAgentConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setNetProtectionRules sync request
    @param setNetProtectionRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setNetProtectionRulesResponse` the request response data model
    */
    -(NSDictionary*) setNetProtectionRulesSyncWithRequest:(CdnSetNetProtectionRulesRequest*) setNetProtectionRulesRequest;

    -(void)setNetProtectionRulesAsyncWithRequest:(CdnSetNetProtectionRulesRequest*) setNetProtectionRulesRequest
    completionHandler:(void(^)(int statusCode,CdnSetNetProtectionRulesResponse* _Nullable setNetProtectionRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setLiveDomainBackSource sync request
    @param setLiveDomainBackSourceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setLiveDomainBackSourceResponse` the request response data model
    */
    -(NSDictionary*) setLiveDomainBackSourceSyncWithRequest:(CdnSetLiveDomainBackSourceRequest*) setLiveDomainBackSourceRequest;

    -(void)setLiveDomainBackSourceAsyncWithRequest:(CdnSetLiveDomainBackSourceRequest*) setLiveDomainBackSourceRequest
    completionHandler:(void(^)(int statusCode,CdnSetLiveDomainBackSourceResponse* _Nullable setLiveDomainBackSourceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setFollowSourceProtocol sync request
    @param setFollowSourceProtocolRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setFollowSourceProtocolResponse` the request response data model
    */
    -(NSDictionary*) setFollowSourceProtocolSyncWithRequest:(CdnSetFollowSourceProtocolRequest*) setFollowSourceProtocolRequest;

    -(void)setFollowSourceProtocolAsyncWithRequest:(CdnSetFollowSourceProtocolRequest*) setFollowSourceProtocolRequest
    completionHandler:(void(^)(int statusCode,CdnSetFollowSourceProtocolResponse* _Nullable setFollowSourceProtocolResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setPublishNormalTimeout sync request
    @param setPublishNormalTimeoutRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setPublishNormalTimeoutResponse` the request response data model
    */
    -(NSDictionary*) setPublishNormalTimeoutSyncWithRequest:(CdnSetPublishNormalTimeoutRequest*) setPublishNormalTimeoutRequest;

    -(void)setPublishNormalTimeoutAsyncWithRequest:(CdnSetPublishNormalTimeoutRequest*) setPublishNormalTimeoutRequest
    completionHandler:(void(^)(int statusCode,CdnSetPublishNormalTimeoutResponse* _Nullable setPublishNormalTimeoutResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getSslCertList sync request
    @param getSslCertListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getSslCertListResponse` the request response data model
    */
    -(NSDictionary*) getSslCertListSyncWithRequest:(CdnGetSslCertListRequest*) getSslCertListRequest;

    -(void)getSslCertListAsyncWithRequest:(CdnGetSslCertListRequest*) getSslCertListRequest
    completionHandler:(void(^)(int statusCode,CdnGetSslCertListResponse* _Nullable getSslCertListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createDomain sync request
    @param createDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createDomainResponse` the request response data model
    */
    -(NSDictionary*) createDomainSyncWithRequest:(CdnCreateDomainRequest*) createDomainRequest;

    -(void)createDomainAsyncWithRequest:(CdnCreateDomainRequest*) createDomainRequest
    completionHandler:(void(^)(int statusCode,CdnCreateDomainResponse* _Nullable createDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainConfig sync request
    @param queryDomainConfigRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainConfigResponse` the request response data model
    */
    -(NSDictionary*) queryDomainConfigSyncWithRequest:(CdnQueryDomainConfigRequest*) queryDomainConfigRequest;

    -(void)queryDomainConfigAsyncWithRequest:(CdnQueryDomainConfigRequest*) queryDomainConfigRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainConfigResponse* _Nullable queryDomainConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    bindPublishDomain sync request
    @param bindPublishDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `bindPublishDomainResponse` the request response data model
    */
    -(NSDictionary*) bindPublishDomainSyncWithRequest:(CdnBindPublishDomainRequest*) bindPublishDomainRequest;

    -(void)bindPublishDomainAsyncWithRequest:(CdnBindPublishDomainRequest*) bindPublishDomainRequest
    completionHandler:(void(^)(int statusCode,CdnBindPublishDomainResponse* _Nullable bindPublishDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setVideoDraft sync request
    @param setVideoDraftRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setVideoDraftResponse` the request response data model
    */
    -(NSDictionary*) setVideoDraftSyncWithRequest:(CdnSetVideoDraftRequest*) setVideoDraftRequest;

    -(void)setVideoDraftAsyncWithRequest:(CdnSetVideoDraftRequest*) setVideoDraftRequest
    completionHandler:(void(^)(int statusCode,CdnSetVideoDraftResponse* _Nullable setVideoDraftResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryCCProtectSwitch sync request
    @param queryCCProtectSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryCCProtectSwitchResponse` the request response data model
    */
    -(NSDictionary*) queryCCProtectSwitchSyncWithRequest:(CdnQueryCCProtectSwitchRequest*) queryCCProtectSwitchRequest;

    -(void)queryCCProtectSwitchAsyncWithRequest:(CdnQueryCCProtectSwitchRequest*) queryCCProtectSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnQueryCCProtectSwitchResponse* _Nullable queryCCProtectSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createLiveDomain sync request
    @param createLiveDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createLiveDomainResponse` the request response data model
    */
    -(NSDictionary*) createLiveDomainSyncWithRequest:(CdnCreateLiveDomainRequest*) createLiveDomainRequest;

    -(void)createLiveDomainAsyncWithRequest:(CdnCreateLiveDomainRequest*) createLiveDomainRequest
    completionHandler:(void(^)(int statusCode,CdnCreateLiveDomainResponse* _Nullable createLiveDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateWebProtectSettings sync request
    @param updateWebProtectSettingsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateWebProtectSettingsResponse` the request response data model
    */
    -(NSDictionary*) updateWebProtectSettingsSyncWithRequest:(CdnUpdateWebProtectSettingsRequest*) updateWebProtectSettingsRequest;

    -(void)updateWebProtectSettingsAsyncWithRequest:(CdnUpdateWebProtectSettingsRequest*) updateWebProtectSettingsRequest
    completionHandler:(void(^)(int statusCode,CdnUpdateWebProtectSettingsResponse* _Nullable updateWebProtectSettingsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    operateShareCache sync request
    @param operateShareCacheRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `operateShareCacheResponse` the request response data model
    */
    -(NSDictionary*) operateShareCacheSyncWithRequest:(CdnOperateShareCacheRequest*) operateShareCacheRequest;

    -(void)operateShareCacheAsyncWithRequest:(CdnOperateShareCacheRequest*) operateShareCacheRequest
    completionHandler:(void(^)(int statusCode,CdnOperateShareCacheResponse* _Nullable operateShareCacheResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableWafWhiteRules sync request
    @param enableWafWhiteRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWafWhiteRulesResponse` the request response data model
    */
    -(NSDictionary*) enableWafWhiteRulesSyncWithRequest:(CdnEnableWafWhiteRulesRequest*) enableWafWhiteRulesRequest;

    -(void)enableWafWhiteRulesAsyncWithRequest:(CdnEnableWafWhiteRulesRequest*) enableWafWhiteRulesRequest
    completionHandler:(void(^)(int statusCode,CdnEnableWafWhiteRulesResponse* _Nullable enableWafWhiteRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryMixStatisticsWithAreaData sync request
    @param queryMixStatisticsWithAreaDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryMixStatisticsWithAreaDataResponse` the request response data model
    */
    -(NSDictionary*) queryMixStatisticsWithAreaDataSyncWithRequest:(CdnQueryMixStatisticsWithAreaDataRequest*) queryMixStatisticsWithAreaDataRequest;

    -(void)queryMixStatisticsWithAreaDataAsyncWithRequest:(CdnQueryMixStatisticsWithAreaDataRequest*) queryMixStatisticsWithAreaDataRequest
    completionHandler:(void(^)(int statusCode,CdnQueryMixStatisticsWithAreaDataResponse* _Nullable queryMixStatisticsWithAreaDataResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setWebProtectSwitch sync request
    @param setWebProtectSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setWebProtectSwitchResponse` the request response data model
    */
    -(NSDictionary*) setWebProtectSwitchSyncWithRequest:(CdnSetWebProtectSwitchRequest*) setWebProtectSwitchRequest;

    -(void)setWebProtectSwitchAsyncWithRequest:(CdnSetWebProtectSwitchRequest*) setWebProtectSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnSetWebProtectSwitchResponse* _Nullable setWebProtectSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    operateLiveDomainIpBlackList sync request
    @param operateLiveDomainIpBlackListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `operateLiveDomainIpBlackListResponse` the request response data model
    */
    -(NSDictionary*) operateLiveDomainIpBlackListSyncWithRequest:(CdnOperateLiveDomainIpBlackListRequest*) operateLiveDomainIpBlackListRequest;

    -(void)operateLiveDomainIpBlackListAsyncWithRequest:(CdnOperateLiveDomainIpBlackListRequest*) operateLiveDomainIpBlackListRequest
    completionHandler:(void(^)(int statusCode,CdnOperateLiveDomainIpBlackListResponse* _Nullable operateLiveDomainIpBlackListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryStatisticsData sync request
    @param queryStatisticsDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryStatisticsDataResponse` the request response data model
    */
    -(NSDictionary*) queryStatisticsDataSyncWithRequest:(CdnQueryStatisticsDataRequest*) queryStatisticsDataRequest;

    -(void)queryStatisticsDataAsyncWithRequest:(CdnQueryStatisticsDataRequest*) queryStatisticsDataRequest
    completionHandler:(void(^)(int statusCode,CdnQueryStatisticsDataResponse* _Nullable queryStatisticsDataResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryAreaIspList sync request
    @param queryAreaIspListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryAreaIspListResponse` the request response data model
    */
    -(NSDictionary*) queryAreaIspListSyncWithRequest:(CdnQueryAreaIspListRequest*) queryAreaIspListRequest;

    -(void)queryAreaIspListAsyncWithRequest:(CdnQueryAreaIspListRequest*) queryAreaIspListRequest
    completionHandler:(void(^)(int statusCode,CdnQueryAreaIspListResponse* _Nullable queryAreaIspListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteCCProtectRule sync request
    @param deleteCCProtectRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteCCProtectRuleResponse` the request response data model
    */
    -(NSDictionary*) deleteCCProtectRuleSyncWithRequest:(CdnDeleteCCProtectRuleRequest*) deleteCCProtectRuleRequest;

    -(void)deleteCCProtectRuleAsyncWithRequest:(CdnDeleteCCProtectRuleRequest*) deleteCCProtectRuleRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteCCProtectRuleResponse* _Nullable deleteCCProtectRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setWafBlackRuleSwitch sync request
    @param setWafBlackRuleSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setWafBlackRuleSwitchResponse` the request response data model
    */
    -(NSDictionary*) setWafBlackRuleSwitchSyncWithRequest:(CdnSetWafBlackRuleSwitchRequest*) setWafBlackRuleSwitchRequest;

    -(void)setWafBlackRuleSwitchAsyncWithRequest:(CdnSetWafBlackRuleSwitchRequest*) setWafBlackRuleSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnSetWafBlackRuleSwitchResponse* _Nullable setWafBlackRuleSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDefaultHttpHeaderKey sync request
    @param queryDefaultHttpHeaderKeyRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDefaultHttpHeaderKeyResponse` the request response data model
    */
    -(NSDictionary*) queryDefaultHttpHeaderKeySyncWithRequest:(CdnQueryDefaultHttpHeaderKeyRequest*) queryDefaultHttpHeaderKeyRequest;

    -(void)queryDefaultHttpHeaderKeyAsyncWithRequest:(CdnQueryDefaultHttpHeaderKeyRequest*) queryDefaultHttpHeaderKeyRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDefaultHttpHeaderKeyResponse* _Nullable queryDefaultHttpHeaderKeyResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setMonitor sync request
    @param setMonitorRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setMonitorResponse` the request response data model
    */
    -(NSDictionary*) setMonitorSyncWithRequest:(CdnSetMonitorRequest*) setMonitorRequest;

    -(void)setMonitorAsyncWithRequest:(CdnSetMonitorRequest*) setMonitorRequest
    completionHandler:(void(^)(int statusCode,CdnSetMonitorResponse* _Nullable setMonitorResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteDomain sync request
    @param deleteDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteDomainResponse` the request response data model
    */
    -(NSDictionary*) deleteDomainSyncWithRequest:(CdnDeleteDomainRequest*) deleteDomainRequest;

    -(void)deleteDomainAsyncWithRequest:(CdnDeleteDomainRequest*) deleteDomainRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteDomainResponse* _Nullable deleteDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getDomainListByFilter sync request
    @param getDomainListByFilterRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getDomainListByFilterResponse` the request response data model
    */
    -(NSDictionary*) getDomainListByFilterSyncWithRequest:(CdnGetDomainListByFilterRequest*) getDomainListByFilterRequest;

    -(void)getDomainListByFilterAsyncWithRequest:(CdnGetDomainListByFilterRequest*) getDomainListByFilterRequest
    completionHandler:(void(^)(int statusCode,CdnGetDomainListByFilterResponse* _Nullable getDomainListByFilterResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryUserAgent sync request
    @param queryUserAgentRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryUserAgentResponse` the request response data model
    */
    -(NSDictionary*) queryUserAgentSyncWithRequest:(CdnQueryUserAgentRequest*) queryUserAgentRequest;

    -(void)queryUserAgentAsyncWithRequest:(CdnQueryUserAgentRequest*) queryUserAgentRequest
    completionHandler:(void(^)(int statusCode,CdnQueryUserAgentResponse* _Nullable queryUserAgentResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    wafQueryPv sync request
    @param wafQueryPvRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `wafQueryPvResponse` the request response data model
    */
    -(NSDictionary*) wafQueryPvSyncWithRequest:(CdnWafQueryPvRequest*) wafQueryPvRequest;

    -(void)wafQueryPvAsyncWithRequest:(CdnWafQueryPvRequest*) wafQueryPvRequest
    completionHandler:(void(^)(int statusCode,CdnWafQueryPvResponse* _Nullable wafQueryPvResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryPushDomainORAppOrStream sync request
    @param queryPushDomainORAppOrStreamRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryPushDomainORAppOrStreamResponse` the request response data model
    */
    -(NSDictionary*) queryPushDomainORAppOrStreamSyncWithRequest:(CdnQueryPushDomainORAppOrStreamRequest*) queryPushDomainORAppOrStreamRequest;

    -(void)queryPushDomainORAppOrStreamAsyncWithRequest:(CdnQueryPushDomainORAppOrStreamRequest*) queryPushDomainORAppOrStreamRequest
    completionHandler:(void(^)(int statusCode,CdnQueryPushDomainORAppOrStreamResponse* _Nullable queryPushDomainORAppOrStreamResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryFollowRedirect sync request
    @param queryFollowRedirectRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryFollowRedirectResponse` the request response data model
    */
    -(NSDictionary*) queryFollowRedirectSyncWithRequest:(CdnQueryFollowRedirectRequest*) queryFollowRedirectRequest;

    -(void)queryFollowRedirectAsyncWithRequest:(CdnQueryFollowRedirectRequest*) queryFollowRedirectRequest
    completionHandler:(void(^)(int statusCode,CdnQueryFollowRedirectResponse* _Nullable queryFollowRedirectResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteCacheRule sync request
    @param deleteCacheRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteCacheRuleResponse` the request response data model
    */
    -(NSDictionary*) deleteCacheRuleSyncWithRequest:(CdnDeleteCacheRuleRequest*) deleteCacheRuleRequest;

    -(void)deleteCacheRuleAsyncWithRequest:(CdnDeleteCacheRuleRequest*) deleteCacheRuleRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteCacheRuleResponse* _Nullable deleteCacheRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryNetProtectionRulesSwitch sync request
    @param queryNetProtectionRulesSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryNetProtectionRulesSwitchResponse` the request response data model
    */
    -(NSDictionary*) queryNetProtectionRulesSwitchSyncWithRequest:(CdnQueryNetProtectionRulesSwitchRequest*) queryNetProtectionRulesSwitchRequest;

    -(void)queryNetProtectionRulesSwitchAsyncWithRequest:(CdnQueryNetProtectionRulesSwitchRequest*) queryNetProtectionRulesSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnQueryNetProtectionRulesSwitchResponse* _Nullable queryNetProtectionRulesSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainGroupList sync request
    @param queryDomainGroupListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainGroupListResponse` the request response data model
    */
    -(NSDictionary*) queryDomainGroupListSyncWithRequest:(CdnQueryDomainGroupListRequest*) queryDomainGroupListRequest;

    -(void)queryDomainGroupListAsyncWithRequest:(CdnQueryDomainGroupListRequest*) queryDomainGroupListRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainGroupListResponse* _Nullable queryDomainGroupListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDomainsNotInGroup sync request
    @param queryDomainsNotInGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDomainsNotInGroupResponse` the request response data model
    */
    -(NSDictionary*) queryDomainsNotInGroupSyncWithRequest:(CdnQueryDomainsNotInGroupRequest*) queryDomainsNotInGroupRequest;

    -(void)queryDomainsNotInGroupAsyncWithRequest:(CdnQueryDomainsNotInGroupRequest*) queryDomainsNotInGroupRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDomainsNotInGroupResponse* _Nullable queryDomainsNotInGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryFollowSourceProtocol sync request
    @param queryFollowSourceProtocolRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryFollowSourceProtocolResponse` the request response data model
    */
    -(NSDictionary*) queryFollowSourceProtocolSyncWithRequest:(CdnQueryFollowSourceProtocolRequest*) queryFollowSourceProtocolRequest;

    -(void)queryFollowSourceProtocolAsyncWithRequest:(CdnQueryFollowSourceProtocolRequest*) queryFollowSourceProtocolRequest
    completionHandler:(void(^)(int statusCode,CdnQueryFollowSourceProtocolResponse* _Nullable queryFollowSourceProtocolResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateDomainGroup sync request
    @param updateDomainGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateDomainGroupResponse` the request response data model
    */
    -(NSDictionary*) updateDomainGroupSyncWithRequest:(CdnUpdateDomainGroupRequest*) updateDomainGroupRequest;

    -(void)updateDomainGroupAsyncWithRequest:(CdnUpdateDomainGroupRequest*) updateDomainGroupRequest
    completionHandler:(void(^)(int statusCode,CdnUpdateDomainGroupResponse* _Nullable updateDomainGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getSslCertDetail sync request
    @param getSslCertDetailRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getSslCertDetailResponse` the request response data model
    */
    -(NSDictionary*) getSslCertDetailSyncWithRequest:(CdnGetSslCertDetailRequest*) getSslCertDetailRequest;

    -(void)getSslCertDetailAsyncWithRequest:(CdnGetSslCertDetailRequest*) getSslCertDetailRequest
    completionHandler:(void(^)(int statusCode,CdnGetSslCertDetailResponse* _Nullable getSslCertDetailResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describebindedDomains sync request
    @param describebindedDomainsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describebindedDomainsResponse` the request response data model
    */
    -(NSDictionary*) describebindedDomainsSyncWithRequest:(CdnDescribebindedDomainsRequest*) describebindedDomainsRequest;

    -(void)describebindedDomainsAsyncWithRequest:(CdnDescribebindedDomainsRequest*) describebindedDomainsRequest
    completionHandler:(void(^)(int statusCode,CdnDescribebindedDomainsResponse* _Nullable describebindedDomainsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    stopDomain sync request
    @param stopDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `stopDomainResponse` the request response data model
    */
    -(NSDictionary*) stopDomainSyncWithRequest:(CdnStopDomainRequest*) stopDomainRequest;

    -(void)stopDomainAsyncWithRequest:(CdnStopDomainRequest*) stopDomainRequest
    completionHandler:(void(^)(int statusCode,CdnStopDomainResponse* _Nullable stopDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryWafSwitch sync request
    @param queryWafSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryWafSwitchResponse` the request response data model
    */
    -(NSDictionary*) queryWafSwitchSyncWithRequest:(CdnQueryWafSwitchRequest*) queryWafSwitchRequest;

    -(void)queryWafSwitchAsyncWithRequest:(CdnQueryWafSwitchRequest*) queryWafSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnQueryWafSwitchResponse* _Nullable queryWafSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describePublishDomains sync request
    @param describePublishDomainsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describePublishDomainsResponse` the request response data model
    */
    -(NSDictionary*) describePublishDomainsSyncWithRequest:(CdnDescribePublishDomainsRequest*) describePublishDomainsRequest;

    -(void)describePublishDomainsAsyncWithRequest:(CdnDescribePublishDomainsRequest*) describePublishDomainsRequest
    completionHandler:(void(^)(int statusCode,CdnDescribePublishDomainsResponse* _Nullable describePublishDomainsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createRefreshTask sync request
    @param createRefreshTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRefreshTaskResponse` the request response data model
    */
    -(NSDictionary*) createRefreshTaskSyncWithRequest:(CdnCreateRefreshTaskRequest*) createRefreshTaskRequest;

    -(void)createRefreshTaskAsyncWithRequest:(CdnCreateRefreshTaskRequest*) createRefreshTaskRequest
    completionHandler:(void(^)(int statusCode,CdnCreateRefreshTaskResponse* _Nullable createRefreshTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryNetProtectionRules sync request
    @param queryNetProtectionRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryNetProtectionRulesResponse` the request response data model
    */
    -(NSDictionary*) queryNetProtectionRulesSyncWithRequest:(CdnQueryNetProtectionRulesRequest*) queryNetProtectionRulesRequest;

    -(void)queryNetProtectionRulesAsyncWithRequest:(CdnQueryNetProtectionRulesRequest*) queryNetProtectionRulesRequest
    completionHandler:(void(^)(int statusCode,CdnQueryNetProtectionRulesResponse* _Nullable queryNetProtectionRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    previewCertificate sync request
    @param previewCertificateRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `previewCertificateResponse` the request response data model
    */
    -(NSDictionary*) previewCertificateSyncWithRequest:(CdnPreviewCertificateRequest*) previewCertificateRequest;

    -(void)previewCertificateAsyncWithRequest:(CdnPreviewCertificateRequest*) previewCertificateRequest
    completionHandler:(void(^)(int statusCode,CdnPreviewCertificateResponse* _Nullable previewCertificateResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryDdosGraph sync request
    @param queryDdosGraphRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryDdosGraphResponse` the request response data model
    */
    -(NSDictionary*) queryDdosGraphSyncWithRequest:(CdnQueryDdosGraphRequest*) queryDdosGraphRequest;

    -(void)queryDdosGraphAsyncWithRequest:(CdnQueryDdosGraphRequest*) queryDdosGraphRequest
    completionHandler:(void(^)(int statusCode,CdnQueryDdosGraphResponse* _Nullable queryDdosGraphResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteWafBlackRules sync request
    @param deleteWafBlackRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteWafBlackRulesResponse` the request response data model
    */
    -(NSDictionary*) deleteWafBlackRulesSyncWithRequest:(CdnDeleteWafBlackRulesRequest*) deleteWafBlackRulesRequest;

    -(void)deleteWafBlackRulesAsyncWithRequest:(CdnDeleteWafBlackRulesRequest*) deleteWafBlackRulesRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteWafBlackRulesResponse* _Nullable deleteWafBlackRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateWafBlackRule sync request
    @param updateWafBlackRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateWafBlackRuleResponse` the request response data model
    */
    -(NSDictionary*) updateWafBlackRuleSyncWithRequest:(CdnUpdateWafBlackRuleRequest*) updateWafBlackRuleRequest;

    -(void)updateWafBlackRuleAsyncWithRequest:(CdnUpdateWafBlackRuleRequest*) updateWafBlackRuleRequest
    completionHandler:(void(^)(int statusCode,CdnUpdateWafBlackRuleResponse* _Nullable updateWafBlackRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableWafBlackRules sync request
    @param enableWafBlackRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableWafBlackRulesResponse` the request response data model
    */
    -(NSDictionary*) enableWafBlackRulesSyncWithRequest:(CdnEnableWafBlackRulesRequest*) enableWafBlackRulesRequest;

    -(void)enableWafBlackRulesAsyncWithRequest:(CdnEnableWafBlackRulesRequest*) enableWafBlackRulesRequest
    completionHandler:(void(^)(int statusCode,CdnEnableWafBlackRulesResponse* _Nullable enableWafBlackRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryAccesskeyConfig sync request
    @param queryAccesskeyConfigRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryAccesskeyConfigResponse` the request response data model
    */
    -(NSDictionary*) queryAccesskeyConfigSyncWithRequest:(CdnQueryAccesskeyConfigRequest*) queryAccesskeyConfigRequest;

    -(void)queryAccesskeyConfigAsyncWithRequest:(CdnQueryAccesskeyConfigRequest*) queryAccesskeyConfigRequest
    completionHandler:(void(^)(int statusCode,CdnQueryAccesskeyConfigResponse* _Nullable queryAccesskeyConfigResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disableCCProtectRule sync request
    @param disableCCProtectRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableCCProtectRuleResponse` the request response data model
    */
    -(NSDictionary*) disableCCProtectRuleSyncWithRequest:(CdnDisableCCProtectRuleRequest*) disableCCProtectRuleRequest;

    -(void)disableCCProtectRuleAsyncWithRequest:(CdnDisableCCProtectRuleRequest*) disableCCProtectRuleRequest
    completionHandler:(void(^)(int statusCode,CdnDisableCCProtectRuleResponse* _Nullable disableCCProtectRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createRefreshTaskForCallback sync request
    @param createRefreshTaskForCallbackRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRefreshTaskForCallbackResponse` the request response data model
    */
    -(NSDictionary*) createRefreshTaskForCallbackSyncWithRequest:(CdnCreateRefreshTaskForCallbackRequest*) createRefreshTaskForCallbackRequest;

    -(void)createRefreshTaskForCallbackAsyncWithRequest:(CdnCreateRefreshTaskForCallbackRequest*) createRefreshTaskForCallbackRequest
    completionHandler:(void(^)(int statusCode,CdnCreateRefreshTaskForCallbackResponse* _Nullable createRefreshTaskForCallbackResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyLiveDomainForwardCustomVhost sync request
    @param modifyLiveDomainForwardCustomVhostRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyLiveDomainForwardCustomVhostResponse` the request response data model
    */
    -(NSDictionary*) modifyLiveDomainForwardCustomVhostSyncWithRequest:(CdnModifyLiveDomainForwardCustomVhostRequest*) modifyLiveDomainForwardCustomVhostRequest;

    -(void)modifyLiveDomainForwardCustomVhostAsyncWithRequest:(CdnModifyLiveDomainForwardCustomVhostRequest*) modifyLiveDomainForwardCustomVhostRequest
    completionHandler:(void(^)(int statusCode,CdnModifyLiveDomainForwardCustomVhostResponse* _Nullable modifyLiveDomainForwardCustomVhostResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    batchCreate sync request
    @param batchCreateRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `batchCreateResponse` the request response data model
    */
    -(NSDictionary*) batchCreateSyncWithRequest:(CdnBatchCreateRequest*) batchCreateRequest;

    -(void)batchCreateAsyncWithRequest:(CdnBatchCreateRequest*) batchCreateRequest
    completionHandler:(void(^)(int statusCode,CdnBatchCreateResponse* _Nullable batchCreateResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setForwardAuthentication sync request
    @param setForwardAuthenticationRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setForwardAuthenticationResponse` the request response data model
    */
    -(NSDictionary*) setForwardAuthenticationSyncWithRequest:(CdnSetForwardAuthenticationRequest*) setForwardAuthenticationRequest;

    -(void)setForwardAuthenticationAsyncWithRequest:(CdnSetForwardAuthenticationRequest*) setForwardAuthenticationRequest
    completionHandler:(void(^)(int statusCode,CdnSetForwardAuthenticationResponse* _Nullable setForwardAuthenticationResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLiveTrafficGroupSum sync request
    @param queryLiveTrafficGroupSumRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLiveTrafficGroupSumResponse` the request response data model
    */
    -(NSDictionary*) queryLiveTrafficGroupSumSyncWithRequest:(CdnQueryLiveTrafficGroupSumRequest*) queryLiveTrafficGroupSumRequest;

    -(void)queryLiveTrafficGroupSumAsyncWithRequest:(CdnQueryLiveTrafficGroupSumRequest*) queryLiveTrafficGroupSumRequest
    completionHandler:(void(^)(int statusCode,CdnQueryLiveTrafficGroupSumResponse* _Nullable queryLiveTrafficGroupSumResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteWafWhiteRules sync request
    @param deleteWafWhiteRulesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteWafWhiteRulesResponse` the request response data model
    */
    -(NSDictionary*) deleteWafWhiteRulesSyncWithRequest:(CdnDeleteWafWhiteRulesRequest*) deleteWafWhiteRulesRequest;

    -(void)deleteWafWhiteRulesAsyncWithRequest:(CdnDeleteWafWhiteRulesRequest*) deleteWafWhiteRulesRequest
    completionHandler:(void(^)(int statusCode,CdnDeleteWafWhiteRulesResponse* _Nullable deleteWafWhiteRulesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateCCProtectRule sync request
    @param updateCCProtectRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateCCProtectRuleResponse` the request response data model
    */
    -(NSDictionary*) updateCCProtectRuleSyncWithRequest:(CdnUpdateCCProtectRuleRequest*) updateCCProtectRuleRequest;

    -(void)updateCCProtectRuleAsyncWithRequest:(CdnUpdateCCProtectRuleRequest*) updateCCProtectRuleRequest
    completionHandler:(void(^)(int statusCode,CdnUpdateCCProtectRuleResponse* _Nullable updateCCProtectRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryOnlineBillingType sync request
    @param queryOnlineBillingTypeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryOnlineBillingTypeResponse` the request response data model
    */
    -(NSDictionary*) queryOnlineBillingTypeSyncWithRequest:(CdnQueryOnlineBillingTypeRequest*) queryOnlineBillingTypeRequest;

    -(void)queryOnlineBillingTypeAsyncWithRequest:(CdnQueryOnlineBillingTypeRequest*) queryOnlineBillingTypeRequest
    completionHandler:(void(^)(int statusCode,CdnQueryOnlineBillingTypeResponse* _Nullable queryOnlineBillingTypeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryRefreshTaskById sync request
    @param queryRefreshTaskByIdRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryRefreshTaskByIdResponse` the request response data model
    */
    -(NSDictionary*) queryRefreshTaskByIdSyncWithRequest:(CdnQueryRefreshTaskByIdRequest*) queryRefreshTaskByIdRequest;

    -(void)queryRefreshTaskByIdAsyncWithRequest:(CdnQueryRefreshTaskByIdRequest*) queryRefreshTaskByIdRequest
    completionHandler:(void(^)(int statusCode,CdnQueryRefreshTaskByIdResponse* _Nullable queryRefreshTaskByIdResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateCacheRule sync request
    @param updateCacheRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateCacheRuleResponse` the request response data model
    */
    -(NSDictionary*) updateCacheRuleSyncWithRequest:(CdnUpdateCacheRuleRequest*) updateCacheRuleRequest;

    -(void)updateCacheRuleAsyncWithRequest:(CdnUpdateCacheRuleRequest*) updateCacheRuleRequest
    completionHandler:(void(^)(int statusCode,CdnUpdateCacheRuleResponse* _Nullable updateCacheRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setWafSwitch sync request
    @param setWafSwitchRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setWafSwitchResponse` the request response data model
    */
    -(NSDictionary*) setWafSwitchSyncWithRequest:(CdnSetWafSwitchRequest*) setWafSwitchRequest;

    -(void)setWafSwitchAsyncWithRequest:(CdnSetWafSwitchRequest*) setWafSwitchRequest
    completionHandler:(void(^)(int statusCode,CdnSetWafSwitchResponse* _Nullable setWafSwitchResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setStreamNotifyInfo sync request
    @param setStreamNotifyInfoRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setStreamNotifyInfoResponse` the request response data model
    */
    -(NSDictionary*) setStreamNotifyInfoSyncWithRequest:(CdnSetStreamNotifyInfoRequest*) setStreamNotifyInfoRequest;

    -(void)setStreamNotifyInfoAsyncWithRequest:(CdnSetStreamNotifyInfoRequest*) setStreamNotifyInfoRequest
    completionHandler:(void(^)(int statusCode,CdnSetStreamNotifyInfoResponse* _Nullable setStreamNotifyInfoResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    uploadCert sync request
    @param uploadCertRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `uploadCertResponse` the request response data model
    */
    -(NSDictionary*) uploadCertSyncWithRequest:(CdnUploadCertRequest*) uploadCertRequest;

    -(void)uploadCertAsyncWithRequest:(CdnUploadCertRequest*) uploadCertRequest
    completionHandler:(void(^)(int statusCode,CdnUploadCertResponse* _Nullable uploadCertResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    batchCreateLiveDomain sync request
    @param batchCreateLiveDomainRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `batchCreateLiveDomainResponse` the request response data model
    */
    -(NSDictionary*) batchCreateLiveDomainSyncWithRequest:(CdnBatchCreateLiveDomainRequest*) batchCreateLiveDomainRequest;

    -(void)batchCreateLiveDomainAsyncWithRequest:(CdnBatchCreateLiveDomainRequest*) batchCreateLiveDomainRequest
    completionHandler:(void(^)(int statusCode,CdnBatchCreateLiveDomainResponse* _Nullable batchCreateLiveDomainResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createCacheRule sync request
    @param createCacheRuleRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createCacheRuleResponse` the request response data model
    */
    -(NSDictionary*) createCacheRuleSyncWithRequest:(CdnCreateCacheRuleRequest*) createCacheRuleRequest;

    -(void)createCacheRuleAsyncWithRequest:(CdnCreateCacheRuleRequest*) createCacheRuleRequest
    completionHandler:(void(^)(int statusCode,CdnCreateCacheRuleResponse* _Nullable createCacheRuleResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setSource sync request
    @param setSourceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setSourceResponse` the request response data model
    */
    -(NSDictionary*) setSourceSyncWithRequest:(CdnSetSourceRequest*) setSourceRequest;

    -(void)setSourceAsyncWithRequest:(CdnSetSourceRequest*) setSourceRequest
    completionHandler:(void(^)(int statusCode,CdnSetSourceResponse* _Nullable setSourceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    cdn common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) cdnCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)cdnCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* CdnClient_h */
