/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Live-Video
直播管理API

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKLive/LiveApiModel.h>


@implementation LiveSetLiveStreamNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeLiveStreamPublishListResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        liveStreamPublishInfos:(NSArray<LiveStreamPublishInfo*>*)liveStreamPublishInfos { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.liveStreamPublishInfos = liveStreamPublishInfos;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self liveStreamPublishInfos])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self liveStreamPublishInfos] count]; i++) {
            LiveStreamPublishInfo* item = [[self liveStreamPublishInfos] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"liveStreamPublishInfos"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* liveStreamPublishInfosArray = [dictionary objectForKey:@"liveStreamPublishInfos"];
    if(liveStreamPublishInfosArray&&![liveStreamPublishInfosArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [liveStreamPublishInfosArray count];i++)
        {
            LiveStreamPublishInfo* item = [[LiveStreamPublishInfo alloc]initWithDic:[liveStreamPublishInfosArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.liveStreamPublishInfos = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamPublishListResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamPublishListResult* result = [[LiveDescribeLiveStreamPublishListResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamPublishListResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveForbidLiveStreamRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName
forbidTime:(NSNumber*)forbidTime { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    self.forbidTime = forbidTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName
forbidTime:(NSNumber*)forbidTime { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    self.forbidTime = forbidTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self forbidTime])
    {
        [result setValue:[self forbidTime] forKey:@"forbidTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.forbidTime = [dictionary objectForKey:@"forbidTime"];
    return self;
} 

@end
@implementation LiveInterruptLiveStreamResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeLiveStreamInfoRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamNotifyConfigResult
-(id) initWithPublishDomain:(NSString*) publishDomain
        notifyUrl:(NSString*)notifyUrl { 
    self.publishDomain = publishDomain;               
    self.notifyUrl = notifyUrl;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamNotifyConfigResult* result = [[LiveDescribeLiveStreamNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamNotifyConfigResult* result = [[LiveDeleteLiveStreamNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveForbidLiveStreamResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveInterruptLiveStreamRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamPublishListRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveSetLiveStreamNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
@implementation LiveResumeLiveStreamRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamInfoResult
-(id) initWithPublishDomain:(NSString*) publishDomain
        appName:(NSString*)appName
        streamName:(NSString*)streamName
        status:(NSString*)status { 
    self.publishDomain = publishDomain;               
    self.appName = appName;               
    self.streamName = streamName;               
    self.status = status;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.status = [dictionary objectForKey:@"status"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamInfoResult* result = [[LiveDescribeLiveStreamInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
  
@implementation LiveSetLiveStreamNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveStreamNotifyConfigResult* result = [[LiveSetLiveStreamNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveStreamNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamOnlineListResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        onlineStreamInfos:(NSArray<OnlineStreamInfo*>*)onlineStreamInfos { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.onlineStreamInfos = onlineStreamInfos;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self onlineStreamInfos])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self onlineStreamInfos] count]; i++) {
            OnlineStreamInfo* item = [[self onlineStreamInfos] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"onlineStreamInfos"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* onlineStreamInfosArray = [dictionary objectForKey:@"onlineStreamInfos"];
    if(onlineStreamInfosArray&&![onlineStreamInfosArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [onlineStreamInfosArray count];i++)
        {
            OnlineStreamInfo* item = [[OnlineStreamInfo alloc]initWithDic:[onlineStreamInfosArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.onlineStreamInfos = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveInterruptLiveStreamResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveInterruptLiveStreamResult* result = [[LiveInterruptLiveStreamResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveInterruptLiveStreamResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveForbidLiveStreamResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveForbidLiveStreamResult* result = [[LiveForbidLiveStreamResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveForbidLiveStreamResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveResumeLiveStreamResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveResumeLiveStreamResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveResumeLiveStreamResult* result = [[LiveResumeLiveStreamResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveResumeLiveStreamResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamOnlineListRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
appName:(NSString*)appName
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.appName = appName;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
appName:(NSString*)appName
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.appName = appName;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamOnlineListResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamOnlineListResult* result = [[LiveDescribeLiveStreamOnlineListResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamOnlineListResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamPublishBandwidthDataResult
-(id) initWithDataList:(NSArray<BandwidthStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            BandwidthStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            BandwidthStatisticResult* item = [[BandwidthStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamPublishBandwidthDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamPublishBandwidthDataResult* result = [[LiveDescribeLiveStreamPublishBandwidthDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamPublishBandwidthDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveSnapshotDataRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveFileStorageDataRequest
-(id) initWithRegion:(NSString *)regionId
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamBandwidthDataResult
-(id) initWithDataList:(NSArray<BandwidthStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            BandwidthStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            BandwidthStatisticResult* item = [[BandwidthStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamBandwidthDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamBandwidthDataResult* result = [[LiveDescribeLiveStreamBandwidthDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamBandwidthDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveTranscodingDurationDataResult
-(id) initWithDataList:(NSArray<TranscodeDurationStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            TranscodeDurationStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            TranscodeDurationStatisticResult* item = [[TranscodeDurationStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeLiveFileStorageDataResult
-(id) initWithDataList:(NSArray<FileStorageStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            FileStorageStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            FileStorageStatisticResult* item = [[FileStorageStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveFileStorageDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveFileStorageDataResult* result = [[LiveDescribeLiveFileStorageDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveFileStorageDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDescribeLiveTranscodingDurationDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveTranscodingDurationDataResult* result = [[LiveDescribeLiveTranscodingDurationDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveTranscodingDurationDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLivePornDataRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamPublishTrafficDataResult
-(id) initWithDataList:(NSArray<TrafficStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            TrafficStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            TrafficStatisticResult* item = [[TrafficStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamPublishTrafficDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamPublishTrafficDataResult* result = [[LiveDescribeLiveStreamPublishTrafficDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamPublishTrafficDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamTrafficDataRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveSnapshotDataResult
-(id) initWithSnapshotData:(NSArray<SnapshotCountStatisticResult*>*) snapshotData { 
    self.snapshotData = snapshotData;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self snapshotData])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self snapshotData] count]; i++) {
            SnapshotCountStatisticResult* item = [[self snapshotData] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"snapshotData"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* snapshotDataArray = [dictionary objectForKey:@"snapshotData"];
    if(snapshotDataArray&&![snapshotDataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [snapshotDataArray count];i++)
        {
            SnapshotCountStatisticResult* item = [[SnapshotCountStatisticResult alloc]initWithDic:[snapshotDataArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.snapshotData = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveSnapshotDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveSnapshotDataResult* result = [[LiveDescribeLiveSnapshotDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveSnapshotDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLivePornDataResult
-(id) initWithPornData:(NSArray<PornCountStatisticResult*>*) pornData { 
    self.pornData = pornData;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pornData])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self pornData] count]; i++) {
            PornCountStatisticResult* item = [[self pornData] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"pornData"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* pornDataArray = [dictionary objectForKey:@"pornData"];
    if(pornDataArray&&![pornDataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [pornDataArray count];i++)
        {
            PornCountStatisticResult* item = [[PornCountStatisticResult alloc]initWithDic:[pornDataArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.pornData = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeLiveTranscodingDurationDataRequest
-(id) initWithRegion:(NSString *)regionId
grade:(NSString*)grade
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.grade = grade;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
grade:(NSString*)grade
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.grade = grade;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self grade])
    {
        [result setValue:[self grade] forKey:@"grade"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.grade = [dictionary objectForKey:@"grade"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamPublishBandwidthDataRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
  
@implementation LiveDescribeLivePornDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLivePornDataResult* result = [[LiveDescribeLivePornDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLivePornDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamPublishTrafficDataRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamTrafficDataResult
-(id) initWithDataList:(NSArray<TrafficStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            TrafficStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            TrafficStatisticResult* item = [[TrafficStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamTrafficDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamTrafficDataResult* result = [[LiveDescribeLiveStreamTrafficDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamTrafficDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamBandwidthDataRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStatisticGroupByAreaIspResult
-(id) initWithDataList:(NSArray<LiveStatisticGroupByAreaIspResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStatisticGroupByAreaIspResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStatisticGroupByAreaIspResult* item = [[LiveStatisticGroupByAreaIspResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeLiveStatisticGroupByStreamRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStatisticGroupByAreaRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStatisticGroupByAreaIspRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStatisticGroupByStreamResult
-(id) initWithDataList:(NSArray<LiveStatisticGroupByStreamResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStatisticGroupByStreamResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStatisticGroupByStreamResult* item = [[LiveStatisticGroupByStreamResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeLiveStatisticGroupByAreaResult
-(id) initWithDataList:(NSArray<LiveStatisticGroupByAreaResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStatisticGroupByAreaResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStatisticGroupByAreaResult* item = [[LiveStatisticGroupByAreaResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStatisticGroupByAreaResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStatisticGroupByAreaResult* result = [[LiveDescribeLiveStatisticGroupByAreaResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStatisticGroupByAreaResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDescribeLiveStatisticGroupByAreaIspResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStatisticGroupByAreaIspResult* result = [[LiveDescribeLiveStatisticGroupByAreaIspResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStatisticGroupByAreaIspResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDescribeLiveStatisticGroupByStreamResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStatisticGroupByStreamResult* result = [[LiveDescribeLiveStatisticGroupByStreamResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStatisticGroupByStreamResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveCloseLiveTimeshiftRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveCloseLiveTimeshiftResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveCloseLiveTimeshiftResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveCloseLiveTimeshiftResult* result = [[LiveCloseLiveTimeshiftResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveCloseLiveTimeshiftResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveTimeshiftConfigsResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        timeshiftConfigs:(NSArray<TimeshiftConfig*>*)timeshiftConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.timeshiftConfigs = timeshiftConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self timeshiftConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self timeshiftConfigs] count]; i++) {
            TimeshiftConfig* item = [[self timeshiftConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"timeshiftConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* timeshiftConfigsArray = [dictionary objectForKey:@"timeshiftConfigs"];
    if(timeshiftConfigsArray&&![timeshiftConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [timeshiftConfigsArray count];i++)
        {
            TimeshiftConfig* item = [[TimeshiftConfig alloc]initWithDic:[timeshiftConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.timeshiftConfigs = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveTimeshiftConfigsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveTimeshiftConfigsResult* result = [[LiveDescribeLiveTimeshiftConfigsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveTimeshiftConfigsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveOpenLiveTimeshiftResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveOpenLiveTimeshiftRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveTimeshiftConfigsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
  
@implementation LiveOpenLiveTimeshiftResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveOpenLiveTimeshiftResult* result = [[LiveOpenLiveTimeshiftResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveOpenLiveTimeshiftResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteCustomLiveStreamRecordTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveAddLiveRecordTaskResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveRecordTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveRecordTaskResult* result = [[LiveAddLiveRecordTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveRecordTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveStreamRecordNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDeleteLiveStreamDomainRecordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamDomainRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamDomainRecordResult* result = [[LiveDeleteLiveStreamDomainRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamDomainRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveRecordTaskRequest
-(id) initWithRegion:(NSString *)regionId
recordTimes:(NSArray<RecordTime*>*)recordTimes
saveBucket:(NSString*)saveBucket
saveEndpoint:(NSString*)saveEndpoint
recordFileType:(NSString*)recordFileType
saveObject:(NSString*)saveObject
taskExternalId:(NSString*)taskExternalId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.recordTimes = recordTimes;
    self.saveBucket = saveBucket;
    self.saveEndpoint = saveEndpoint;
    self.recordFileType = recordFileType;
    self.saveObject = saveObject;
    self.taskExternalId = taskExternalId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
recordTimes:(NSArray<RecordTime*>*)recordTimes
saveBucket:(NSString*)saveBucket
saveEndpoint:(NSString*)saveEndpoint
recordFileType:(NSString*)recordFileType
saveObject:(NSString*)saveObject
taskExternalId:(NSString*)taskExternalId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.version = version;
    self.recordTimes = recordTimes;
    self.saveBucket = saveBucket;
    self.saveEndpoint = saveEndpoint;
    self.recordFileType = recordFileType;
    self.saveObject = saveObject;
    self.taskExternalId = taskExternalId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self recordTimes])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self recordTimes] count]; i++) {
            RecordTime* item = [[self recordTimes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"recordTimes"];
    }
    if([self saveBucket])
    {
        [result setValue:[self saveBucket] forKey:@"saveBucket"];
    }
    if([self saveEndpoint])
    {
        [result setValue:[self saveEndpoint] forKey:@"saveEndpoint"];
    }
    if([self recordFileType])
    {
        [result setValue:[self recordFileType] forKey:@"recordFileType"];
    }
    if([self saveObject])
    {
        [result setValue:[self saveObject] forKey:@"saveObject"];
    }
    if([self taskExternalId])
    {
        [result setValue:[self taskExternalId] forKey:@"taskExternalId"];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* recordTimesArray = [dictionary objectForKey:@"recordTimes"];
    if(recordTimesArray&&![recordTimesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [recordTimesArray count];i++)
        {
            RecordTime* item = [[RecordTime alloc]initWithDic:[recordTimesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.recordTimes = propertyArray;
    }
    self.saveBucket = [dictionary objectForKey:@"saveBucket"];
    self.saveEndpoint = [dictionary objectForKey:@"saveEndpoint"];
    self.recordFileType = [dictionary objectForKey:@"recordFileType"];
    self.saveObject = [dictionary objectForKey:@"saveObject"];
    self.taskExternalId = [dictionary objectForKey:@"taskExternalId"];
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamRecordNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDescribeRecordBindingRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamAppRecordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamAppRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamAppRecordResult* result = [[LiveDeleteLiveStreamAppRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamAppRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamRecordNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamRecordNotifyConfigResult
-(id) initWithPublishDomain:(NSString*) publishDomain
        notifyUrl:(NSString*)notifyUrl { 
    self.publishDomain = publishDomain;               
    self.notifyUrl = notifyUrl;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamRecordNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeRecordBindingResult
-(id) initWithBindingList:(NSArray<TemplateBinding*>*) bindingList { 
    self.bindingList = bindingList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bindingList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self bindingList] count]; i++) {
            TemplateBinding* item = [[self bindingList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"bindingList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* bindingListArray = [dictionary objectForKey:@"bindingList"];
    if(bindingListArray&&![bindingListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bindingListArray count];i++)
        {
            TemplateBinding* item = [[TemplateBinding alloc]initWithDic:[bindingListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.bindingList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDeleteCustomLiveStreamRecordTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamRecordConfigResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        recordConfigs:(NSArray<LiveRecordConfig*>*)recordConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.recordConfigs = recordConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self recordConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self recordConfigs] count]; i++) {
            LiveRecordConfig* item = [[self recordConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"recordConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* recordConfigsArray = [dictionary objectForKey:@"recordConfigs"];
    if(recordConfigsArray&&![recordConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [recordConfigsArray count];i++)
        {
            LiveRecordConfig* item = [[LiveRecordConfig alloc]initWithDic:[recordConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.recordConfigs = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamRecordConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamRecordConfigResult* result = [[LiveDescribeCustomLiveStreamRecordConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamRecordConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveStreamAppRecordRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamAppRecordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveStreamAppRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamAppRecordResult* result = [[LiveAddLiveStreamAppRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamAppRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveSetLiveStreamRecordNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveStreamRecordNotifyConfigResult* result = [[LiveSetLiveStreamRecordNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveStreamRecordNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDescribeRecordBindingResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeRecordBindingResult* result = [[LiveDescribeRecordBindingResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeRecordBindingResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamRecordTemplateRequest
-(id) initWithRegion:(NSString *)regionId
recordPeriod:(NSNumber*)recordPeriod
saveBucket:(NSString*)saveBucket
saveEndpoint:(NSString*)saveEndpoint
recordFileType:(NSString*)recordFileType
template:(NSString*)template { 
    self.regionId = regionId;
    self.recordPeriod = recordPeriod;
    self.saveBucket = saveBucket;
    self.saveEndpoint = saveEndpoint;
    self.recordFileType = recordFileType;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
recordPeriod:(NSNumber*)recordPeriod
saveBucket:(NSString*)saveBucket
saveEndpoint:(NSString*)saveEndpoint
recordFileType:(NSString*)recordFileType
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.recordPeriod = recordPeriod;
    self.saveBucket = saveBucket;
    self.saveEndpoint = saveEndpoint;
    self.recordFileType = recordFileType;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self recordPeriod])
    {
        [result setValue:[self recordPeriod] forKey:@"recordPeriod"];
    }
    if([self saveBucket])
    {
        [result setValue:[self saveBucket] forKey:@"saveBucket"];
    }
    if([self saveEndpoint])
    {
        [result setValue:[self saveEndpoint] forKey:@"saveEndpoint"];
    }
    if([self recordFileType])
    {
        [result setValue:[self recordFileType] forKey:@"recordFileType"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.recordPeriod = [dictionary objectForKey:@"recordPeriod"];
    self.saveBucket = [dictionary objectForKey:@"saveBucket"];
    self.saveEndpoint = [dictionary objectForKey:@"saveEndpoint"];
    self.recordFileType = [dictionary objectForKey:@"recordFileType"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamRecordTemplatesResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        recordTemplates:(NSArray<RecordTemplate*>*)recordTemplates { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.recordTemplates = recordTemplates;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self recordTemplates])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self recordTemplates] count]; i++) {
            RecordTemplate* item = [[self recordTemplates] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"recordTemplates"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* recordTemplatesArray = [dictionary objectForKey:@"recordTemplates"];
    if(recordTemplatesArray&&![recordTemplatesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [recordTemplatesArray count];i++)
        {
            RecordTemplate* item = [[RecordTemplate alloc]initWithDic:[recordTemplatesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.recordTemplates = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamRecordConfigRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamRecordNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamRecordNotifyConfigResult* result = [[LiveDeleteLiveStreamRecordNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamRecordNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamDomainRecordRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainRecordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveStreamDomainRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamDomainRecordResult* result = [[LiveAddLiveStreamDomainRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamDomainRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDescribeLiveStreamRecordNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamRecordNotifyConfigResult* result = [[LiveDescribeLiveStreamRecordNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamRecordNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamAppRecordRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamRecordTemplatesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamRecordTemplatesResult* result = [[LiveDescribeCustomLiveStreamRecordTemplatesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamRecordTemplatesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamRecordTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddCustomLiveStreamRecordTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddCustomLiveStreamRecordTemplateResult* result = [[LiveAddCustomLiveStreamRecordTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddCustomLiveStreamRecordTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDeleteCustomLiveStreamRecordTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteCustomLiveStreamRecordTemplateResult* result = [[LiveDeleteCustomLiveStreamRecordTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteCustomLiveStreamRecordTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveStreamRecordNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainRecordRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamRecordTemplatesRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainSnapshotResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDeleteLiveStreamDomainSnapshotResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamDomainSnapshotResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamDomainSnapshotResult* result = [[LiveDeleteLiveStreamDomainSnapshotResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamDomainSnapshotResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamSnapshotTemplateRequest
-(id) initWithRegion:(NSString *)regionId
format:(NSString*)format
width:(NSNumber*)width
height:(NSNumber*)height
fillType:(NSNumber*)fillType
snapshotInterval:(NSNumber*)snapshotInterval
saveMode:(NSNumber*)saveMode
saveBucket:(NSString*)saveBucket
saveEndpoint:(NSString*)saveEndpoint
template:(NSString*)template { 
    self.regionId = regionId;
    self.format = format;
    self.width = width;
    self.height = height;
    self.fillType = fillType;
    self.snapshotInterval = snapshotInterval;
    self.saveMode = saveMode;
    self.saveBucket = saveBucket;
    self.saveEndpoint = saveEndpoint;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
format:(NSString*)format
width:(NSNumber*)width
height:(NSNumber*)height
fillType:(NSNumber*)fillType
snapshotInterval:(NSNumber*)snapshotInterval
saveMode:(NSNumber*)saveMode
saveBucket:(NSString*)saveBucket
saveEndpoint:(NSString*)saveEndpoint
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.format = format;
    self.width = width;
    self.height = height;
    self.fillType = fillType;
    self.snapshotInterval = snapshotInterval;
    self.saveMode = saveMode;
    self.saveBucket = saveBucket;
    self.saveEndpoint = saveEndpoint;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self format])
    {
        [result setValue:[self format] forKey:@"format"];
    }
    if([self width])
    {
        [result setValue:[self width] forKey:@"width"];
    }
    if([self height])
    {
        [result setValue:[self height] forKey:@"height"];
    }
    if([self fillType])
    {
        [result setValue:[self fillType] forKey:@"fillType"];
    }
    if([self snapshotInterval])
    {
        [result setValue:[self snapshotInterval] forKey:@"snapshotInterval"];
    }
    if([self saveMode])
    {
        [result setValue:[self saveMode] forKey:@"saveMode"];
    }
    if([self saveBucket])
    {
        [result setValue:[self saveBucket] forKey:@"saveBucket"];
    }
    if([self saveEndpoint])
    {
        [result setValue:[self saveEndpoint] forKey:@"saveEndpoint"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.format = [dictionary objectForKey:@"format"];
    self.width = [dictionary objectForKey:@"width"];
    self.height = [dictionary objectForKey:@"height"];
    self.fillType = [dictionary objectForKey:@"fillType"];
    self.snapshotInterval = [dictionary objectForKey:@"snapshotInterval"];
    self.saveMode = [dictionary objectForKey:@"saveMode"];
    self.saveBucket = [dictionary objectForKey:@"saveBucket"];
    self.saveEndpoint = [dictionary objectForKey:@"saveEndpoint"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteCustomLiveStreamSnapshotTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteCustomLiveStreamSnapshotTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteCustomLiveStreamSnapshotTemplateResult* result = [[LiveDeleteCustomLiveStreamSnapshotTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteCustomLiveStreamSnapshotTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeCustomLiveStreamSnapshotTemplatesResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        snapshotTemplates:(NSArray<SnapshotTemplate*>*)snapshotTemplates { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.snapshotTemplates = snapshotTemplates;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self snapshotTemplates])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self snapshotTemplates] count]; i++) {
            SnapshotTemplate* item = [[self snapshotTemplates] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"snapshotTemplates"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* snapshotTemplatesArray = [dictionary objectForKey:@"snapshotTemplates"];
    if(snapshotTemplatesArray&&![snapshotTemplatesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [snapshotTemplatesArray count];i++)
        {
            SnapshotTemplate* item = [[SnapshotTemplate alloc]initWithDic:[snapshotTemplatesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.snapshotTemplates = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamSnapshotTemplatesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamSnapshotTemplatesResult* result = [[LiveDescribeCustomLiveStreamSnapshotTemplatesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamSnapshotTemplatesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamSnapshotNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveAddCustomLiveStreamSnapshotTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddCustomLiveStreamSnapshotTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddCustomLiveStreamSnapshotTemplateResult* result = [[LiveAddCustomLiveStreamSnapshotTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddCustomLiveStreamSnapshotTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDeleteLiveStreamSnapshotNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamSnapshotNotifyConfigResult* result = [[LiveDeleteLiveStreamSnapshotNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamSnapshotNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveAddLiveStreamDomainSnapshotResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamDomainSnapshotResult* result = [[LiveAddLiveStreamDomainSnapshotResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamDomainSnapshotResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamAppSnapshotRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamSnapshotTemplatesRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamSnapshotConfigRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddLiveStreamAppSnapshotResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDeleteCustomLiveStreamSnapshotTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamSnapshotNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveAddLiveStreamAppSnapshotRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamAppSnapshotResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeSnapshotBindingResult
-(id) initWithBindingList:(NSArray<TemplateBinding*>*) bindingList { 
    self.bindingList = bindingList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bindingList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self bindingList] count]; i++) {
            TemplateBinding* item = [[self bindingList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"bindingList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* bindingListArray = [dictionary objectForKey:@"bindingList"];
    if(bindingListArray&&![bindingListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bindingListArray count];i++)
        {
            TemplateBinding* item = [[TemplateBinding alloc]initWithDic:[bindingListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.bindingList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeSnapshotBindingResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeSnapshotBindingResult* result = [[LiveDescribeSnapshotBindingResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeSnapshotBindingResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveStreamDomainSnapshotRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
  
@implementation LiveAddLiveStreamAppSnapshotResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamAppSnapshotResult* result = [[LiveAddLiveStreamAppSnapshotResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamAppSnapshotResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDeleteLiveStreamAppSnapshotResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamAppSnapshotResult* result = [[LiveDeleteLiveStreamAppSnapshotResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamAppSnapshotResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamSnapshotNotifyConfigResult
-(id) initWithPublishDomain:(NSString*) publishDomain
        notifyUrl:(NSString*)notifyUrl { 
    self.publishDomain = publishDomain;               
    self.notifyUrl = notifyUrl;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
@implementation LiveSetLiveStreamSnapshotNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveSetLiveStreamSnapshotNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveStreamSnapshotNotifyConfigResult* result = [[LiveSetLiveStreamSnapshotNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveStreamSnapshotNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveStreamSnapshotNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamSnapshotConfigResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        snapshotConfigs:(NSArray<SnapshotConfig*>*)snapshotConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.snapshotConfigs = snapshotConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self snapshotConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self snapshotConfigs] count]; i++) {
            SnapshotConfig* item = [[self snapshotConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"snapshotConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* snapshotConfigsArray = [dictionary objectForKey:@"snapshotConfigs"];
    if(snapshotConfigsArray&&![snapshotConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [snapshotConfigsArray count];i++)
        {
            SnapshotConfig* item = [[SnapshotConfig alloc]initWithDic:[snapshotConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.snapshotConfigs = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDeleteLiveStreamDomainSnapshotRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamSnapshotConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamSnapshotConfigResult* result = [[LiveDescribeCustomLiveStreamSnapshotConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamSnapshotConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamSnapshotNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDescribeSnapshotBindingRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamSnapshotNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamSnapshotNotifyConfigResult* result = [[LiveDescribeLiveStreamSnapshotNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamSnapshotNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamQualityDetectionTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddCustomLiveStreamQualityDetectionTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddCustomLiveStreamQualityDetectionTemplateResult* result = [[LiveAddCustomLiveStreamQualityDetectionTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddCustomLiveStreamQualityDetectionTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamAppQualityDetectionResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainQualityDetectionRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamAppQualityDetectionResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeLiveStreamQualityDetectionNotifyConfigResult
-(id) initWithPublishDomain:(NSString*) publishDomain
        notifyUrl:(NSString*)notifyUrl { 
    self.publishDomain = publishDomain;               
    self.notifyUrl = notifyUrl;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamQualityDetectionNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamQualityDetectionNotifyConfigResult* result = [[LiveDescribeLiveStreamQualityDetectionNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamQualityDetectionNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveStreamQualityDetectionNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
notifyUrl:(NSString*)notifyUrl { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.notifyUrl = notifyUrl;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self notifyUrl])
    {
        [result setValue:[self notifyUrl] forKey:@"notifyUrl"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.notifyUrl = [dictionary objectForKey:@"notifyUrl"];
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainQualityDetectionResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveAddLiveStreamAppQualityDetectionRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamQualityDetectionNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
  
@implementation LiveAddLiveStreamAppQualityDetectionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamAppQualityDetectionResult* result = [[LiveAddLiveStreamAppQualityDetectionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamAppQualityDetectionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteCustomLiveStreamQualityDetectionTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteCustomLiveStreamQualityDetectionTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteCustomLiveStreamQualityDetectionTemplateResult* result = [[LiveDeleteCustomLiveStreamQualityDetectionTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteCustomLiveStreamQualityDetectionTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamDomainQualityDetectionRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeQualityDetectionBindingResult
-(id) initWithBindingList:(NSArray<TemplateBinding*>*) bindingList { 
    self.bindingList = bindingList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bindingList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self bindingList] count]; i++) {
            TemplateBinding* item = [[self bindingList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"bindingList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* bindingListArray = [dictionary objectForKey:@"bindingList"];
    if(bindingListArray&&![bindingListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bindingListArray count];i++)
        {
            TemplateBinding* item = [[TemplateBinding alloc]initWithDic:[bindingListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.bindingList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeQualityDetectionBindingResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeQualityDetectionBindingResult* result = [[LiveDescribeQualityDetectionBindingResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeQualityDetectionBindingResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveStreamQualityDetectionNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveSetLiveStreamQualityDetectionNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveStreamQualityDetectionNotifyConfigResult* result = [[LiveSetLiveStreamQualityDetectionNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveStreamQualityDetectionNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamDomainQualityDetectionResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamDomainQualityDetectionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamDomainQualityDetectionResult* result = [[LiveDeleteLiveStreamDomainQualityDetectionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamDomainQualityDetectionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveAddLiveStreamDomainQualityDetectionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamDomainQualityDetectionResult* result = [[LiveAddLiveStreamDomainQualityDetectionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamDomainQualityDetectionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteCustomLiveStreamQualityDetectionTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamQualityDetectionTemplatesRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamAppQualityDetectionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamAppQualityDetectionResult* result = [[LiveDeleteLiveStreamAppQualityDetectionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamAppQualityDetectionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamQualityDetectionTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template
modules:(NSArray<NSString*>*)modules { 
    self.regionId = regionId;
    self.template = template;
    self.modules = modules;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template
modules:(NSArray<NSString*>*)modules { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    self.modules = modules;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    if([self modules])
    {
        [result setValue:[self modules] forKey:@"modules"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    self.modules = [dictionary objectForKey:@"modules"];
    return self;
} 

@end
@implementation LiveDescribeQualityDetectionBindingRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamQualityDetectionNotifyConfigResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamQualityDetectionNotifyConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamQualityDetectionNotifyConfigResult* result = [[LiveDeleteLiveStreamQualityDetectionNotifyConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamQualityDetectionNotifyConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamAppQualityDetectionRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamQualityDetectionTemplatesResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        qualityDetectionTemplates:(NSArray<QualityDetectionTemplate*>*)qualityDetectionTemplates { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.qualityDetectionTemplates = qualityDetectionTemplates;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self qualityDetectionTemplates])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self qualityDetectionTemplates] count]; i++) {
            QualityDetectionTemplate* item = [[self qualityDetectionTemplates] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"qualityDetectionTemplates"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* qualityDetectionTemplatesArray = [dictionary objectForKey:@"qualityDetectionTemplates"];
    if(qualityDetectionTemplatesArray&&![qualityDetectionTemplatesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [qualityDetectionTemplatesArray count];i++)
        {
            QualityDetectionTemplate* item = [[QualityDetectionTemplate alloc]initWithDic:[qualityDetectionTemplatesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.qualityDetectionTemplates = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDeleteLiveStreamQualityDetectionNotifyConfigRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamQualityDetectionTemplatesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamQualityDetectionTemplatesResult* result = [[LiveDescribeCustomLiveStreamQualityDetectionTemplatesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamQualityDetectionTemplatesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveTranscodeStreamBandwidthResult
-(id) initWithDataList:(NSArray<BandwidthStatisticResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            BandwidthStatisticResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            BandwidthStatisticResult* item = [[BandwidthStatisticResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveTranscodeStreamBandwidthResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveTranscodeStreamBandwidthResult* result = [[LiveDescribeLiveTranscodeStreamBandwidthResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveTranscodeStreamBandwidthResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLivePublishStreamNumRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
protocolType:(NSString*)protocolType
ispName:(NSString*)ispName
locationName:(NSString*)locationName
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.protocolType = protocolType;
    self.ispName = ispName;
    self.locationName = locationName;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
protocolType:(NSString*)protocolType
ispName:(NSString*)ispName
locationName:(NSString*)locationName
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.protocolType = protocolType;
    self.ispName = ispName;
    self.locationName = locationName;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeDomainOnlineStreamResult
-(id) initWithStreamList:(NSArray<PublishOnlineStreamResultData*>*) streamList
        total:(NSNumber*)total { 
    self.streamList = streamList;               
    self.total = total;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self streamList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self streamList] count]; i++) {
            PublishOnlineStreamResultData* item = [[self streamList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"streamList"];
    }
    if([self total])
    {
        [result setValue:[self total] forKey:@"total"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* streamListArray = [dictionary objectForKey:@"streamList"];
    if(streamListArray&&![streamListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [streamListArray count];i++)
        {
            PublishOnlineStreamResultData* item = [[PublishOnlineStreamResultData alloc]initWithDic:[streamListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.streamList = propertyArray;
    }
    self.total = [dictionary objectForKey:@"total"];
    return self;
} 

@end
  
@implementation LiveDescribeDomainOnlineStreamResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeDomainOnlineStreamResult* result = [[LiveDescribeDomainOnlineStreamResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeDomainOnlineStreamResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamPlayerRankingDataResult
-(id) initWithDataList:(NSArray<LiveStreamPlayerRankingResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStreamPlayerRankingResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStreamPlayerRankingResult* item = [[LiveStreamPlayerRankingResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeLiveTranscodeStreamNumResult
-(id) initWithDatetime:(NSString*) datetime
        streamCount:(NSNumber*)streamCount { 
    self.datetime = datetime;               
    self.streamCount = streamCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self datetime])
    {
        [result setValue:[self datetime] forKey:@"datetime"];
    }
    if([self streamCount])
    {
        [result setValue:[self streamCount] forKey:@"streamCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.datetime = [dictionary objectForKey:@"datetime"];
    self.streamCount = [dictionary objectForKey:@"streamCount"];
    return self;
} 

@end
@implementation LiveDescribeLiveTranscodeStreamListResult
-(id) initWithDataList:(NSArray<LiveTranscodeStreamResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveTranscodeStreamResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveTranscodeStreamResult* item = [[LiveTranscodeStreamResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeLivePublishStreamNumResult
-(id) initWithDataList:(NSArray<LiveStreamUserNumResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStreamUserNumResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStreamUserNumResult* item = [[LiveStreamUserNumResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLivePublishStreamNumResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLivePublishStreamNumResult* result = [[LiveDescribeLivePublishStreamNumResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLivePublishStreamNumResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeDomainsLogRequest
-(id) initWithRegion:(NSString *)regionId
domains:(NSString*)domains
interval:(NSString*)interval
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domains = domains;
    self.interval = interval;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domains:(NSString*)domains
interval:(NSString*)interval
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domains = domains;
    self.interval = interval;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domains])
    {
        [result setValue:[self domains] forKey:@"domains"];
    }
    if([self interval])
    {
        [result setValue:[self interval] forKey:@"interval"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domains = [dictionary objectForKey:@"domains"];
    self.interval = [dictionary objectForKey:@"interval"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamPlayerRankingDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamPlayerRankingDataResult* result = [[LiveDescribeLiveStreamPlayerRankingDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamPlayerRankingDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeUrlRankingRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
size:(NSNumber*)size
rankfield:(NSString*)rankfield
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.size = size;
    self.rankfield = rankfield;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
size:(NSNumber*)size
rankfield:(NSString*)rankfield
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.size = size;
    self.rankfield = rankfield;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self size])
    {
        [result setValue:[self size] forKey:@"size"];
    }
    if([self rankfield])
    {
        [result setValue:[self rankfield] forKey:@"rankfield"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.size = [dictionary objectForKey:@"size"];
    self.rankfield = [dictionary objectForKey:@"rankfield"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamHistoryUserNumResult
-(id) initWithDataList:(NSArray<LiveStreamUserNumResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStreamUserNumResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStreamUserNumResult* item = [[LiveStreamUserNumResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveStreamHistoryUserNumResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamHistoryUserNumResult* result = [[LiveDescribeLiveStreamHistoryUserNumResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamHistoryUserNumResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveTranscodeStreamBandwidthRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribePublishStreamInfoDataResult
-(id) initWithDataList:(NSArray<PublishStreamInfoResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            PublishStreamInfoResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            PublishStreamInfoResult* item = [[PublishStreamInfoResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribePublishStreamInfoDataResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribePublishStreamInfoDataResult* result = [[LiveDescribePublishStreamInfoDataResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribePublishStreamInfoDataResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveTranscodeStreamPlayerUserNumResult
-(id) initWithDataList:(NSArray<LiveStreamUserNumResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            LiveStreamUserNumResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            LiveStreamUserNumResult* item = [[LiveStreamUserNumResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveTranscodeStreamPlayerUserNumResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveTranscodeStreamPlayerUserNumResult* result = [[LiveDescribeLiveTranscodeStreamPlayerUserNumResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveTranscodeStreamPlayerUserNumResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeDomainsLogResult
-(id) initWithDataList:(NSArray<DomainsLogResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            DomainsLogResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            DomainsLogResult* item = [[DomainsLogResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeDomainsLogResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeDomainsLogResult* result = [[LiveDescribeDomainsLogResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeDomainsLogResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribePublishStreamInfoDataRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveTranscodeStreamNumResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveTranscodeStreamNumResult* result = [[LiveDescribeLiveTranscodeStreamNumResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveTranscodeStreamNumResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeDomainOnlineStreamRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveTranscodeStreamListResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveTranscodeStreamListResult* result = [[LiveDescribeLiveTranscodeStreamListResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveTranscodeStreamListResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveTranscodeStreamListRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    return self;
} 

@end
@implementation LiveDescribeLiveTranscodeStreamPlayerUserNumRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeUrlRankingResult
-(id) initWithDataList:(NSArray<RankingUrlResult*>*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            RankingUrlResult* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            RankingUrlResult* item = [[RankingUrlResult alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeUrlRankingResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeUrlRankingResult* result = [[LiveDescribeUrlRankingResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeUrlRankingResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamPlayerRankingDataRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
protocolType:(NSString*)protocolType
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.protocolType = protocolType;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
protocolType:(NSString*)protocolType
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.protocolType = protocolType;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDescribeLiveTranscodeStreamNumRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName { 
    self.regionId = regionId;
    self.domainName = domainName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    return self;
} 

@end
@implementation LiveDescribeLiveStreamHistoryUserNumRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
appName:(NSString*)appName
streamName:(NSString*)streamName
ispName:(NSString*)ispName
locationName:(NSString*)locationName
protocolType:(NSString*)protocolType
period:(NSString*)period
startTime:(NSString*)startTime
endTime:(NSString*)endTime { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.appName = appName;
    self.streamName = streamName;
    self.ispName = ispName;
    self.locationName = locationName;
    self.protocolType = protocolType;
    self.period = period;
    self.startTime = startTime;
    self.endTime = endTime;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self streamName])
    {
        [result setValue:[self streamName] forKey:@"streamName"];
    }
    if([self ispName])
    {
        [result setValue:[self ispName] forKey:@"ispName"];
    }
    if([self locationName])
    {
        [result setValue:[self locationName] forKey:@"locationName"];
    }
    if([self protocolType])
    {
        [result setValue:[self protocolType] forKey:@"protocolType"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.streamName = [dictionary objectForKey:@"streamName"];
    self.ispName = [dictionary objectForKey:@"ispName"];
    self.locationName = [dictionary objectForKey:@"locationName"];
    self.protocolType = [dictionary objectForKey:@"protocolType"];
    self.period = [dictionary objectForKey:@"period"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamAppTranscodeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamAppTranscodeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamAppTranscodeResult* result = [[LiveDeleteLiveStreamAppTranscodeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamAppTranscodeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeCustomLiveStreamTranscodeTemplatesResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        transcodeTemplates:(NSArray<TranscodeInfo*>*)transcodeTemplates { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.transcodeTemplates = transcodeTemplates;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self transcodeTemplates])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self transcodeTemplates] count]; i++) {
            TranscodeInfo* item = [[self transcodeTemplates] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"transcodeTemplates"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* transcodeTemplatesArray = [dictionary objectForKey:@"transcodeTemplates"];
    if(transcodeTemplatesArray&&![transcodeTemplatesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [transcodeTemplatesArray count];i++)
        {
            TranscodeInfo* item = [[TranscodeInfo alloc]initWithDic:[transcodeTemplatesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.transcodeTemplates = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamTranscodeTemplatesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamTranscodeTemplatesResult* result = [[LiveDescribeCustomLiveStreamTranscodeTemplatesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamTranscodeTemplatesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamDomainTranscodeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamDomainTranscodeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamDomainTranscodeResult* result = [[LiveDeleteLiveStreamDomainTranscodeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamDomainTranscodeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeSystemLiveStreamTranscodeTemplatesRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddCustomLiveStreamTranscodeTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddCustomLiveStreamTranscodeTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddCustomLiveStreamTranscodeTemplateResult* result = [[LiveAddCustomLiveStreamTranscodeTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddCustomLiveStreamTranscodeTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteCustomLiveStreamTranscodeTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteCustomLiveStreamTranscodeTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteCustomLiveStreamTranscodeTemplateResult* result = [[LiveDeleteCustomLiveStreamTranscodeTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteCustomLiveStreamTranscodeTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveStreamAppTranscodeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDeleteLiveStreamAppTranscodeRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamAppTranscodeRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainTranscodeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveStreamDomainTranscodeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamDomainTranscodeResult* result = [[LiveAddLiveStreamDomainTranscodeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamDomainTranscodeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamTranscodeConfigResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        transcodeConfigs:(NSArray<TemplateConfig*>*)transcodeConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.transcodeConfigs = transcodeConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self transcodeConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self transcodeConfigs] count]; i++) {
            TemplateConfig* item = [[self transcodeConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"transcodeConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* transcodeConfigsArray = [dictionary objectForKey:@"transcodeConfigs"];
    if(transcodeConfigsArray&&![transcodeConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [transcodeConfigsArray count];i++)
        {
            TemplateConfig* item = [[TemplateConfig alloc]initWithDic:[transcodeConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.transcodeConfigs = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamTranscodeTemplatesRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDeleteLiveStreamDomainTranscodeRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteCustomLiveStreamTranscodeTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeTranscodeBindingRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainTranscodeRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeSystemLiveStreamTranscodeTemplatesResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        transcodeTemplates:(NSArray<TranscodeInfo*>*)transcodeTemplates { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.transcodeTemplates = transcodeTemplates;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self transcodeTemplates])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self transcodeTemplates] count]; i++) {
            TranscodeInfo* item = [[self transcodeTemplates] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"transcodeTemplates"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* transcodeTemplatesArray = [dictionary objectForKey:@"transcodeTemplates"];
    if(transcodeTemplatesArray&&![transcodeTemplatesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [transcodeTemplatesArray count];i++)
        {
            TranscodeInfo* item = [[TranscodeInfo alloc]initWithDic:[transcodeTemplatesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.transcodeTemplates = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeSystemLiveStreamTranscodeTemplatesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeSystemLiveStreamTranscodeTemplatesResult* result = [[LiveDescribeSystemLiveStreamTranscodeTemplatesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeSystemLiveStreamTranscodeTemplatesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveAddLiveStreamAppTranscodeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamAppTranscodeResult* result = [[LiveAddLiveStreamAppTranscodeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamAppTranscodeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveDescribeLiveStreamTranscodeConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveStreamTranscodeConfigResult* result = [[LiveDescribeLiveStreamTranscodeConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveStreamTranscodeConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeTranscodeBindingResult
-(id) initWithBindingList:(NSArray<TemplateBinding*>*) bindingList { 
    self.bindingList = bindingList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bindingList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self bindingList] count]; i++) {
            TemplateBinding* item = [[self bindingList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"bindingList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* bindingListArray = [dictionary objectForKey:@"bindingList"];
    if(bindingListArray&&![bindingListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bindingListArray count];i++)
        {
            TemplateBinding* item = [[TemplateBinding alloc]initWithDic:[bindingListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.bindingList = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeTranscodeBindingResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeTranscodeBindingResult* result = [[LiveDescribeTranscodeBindingResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeTranscodeBindingResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamTranscodeTemplateRequest
-(id) initWithRegion:(NSString *)regionId
templateName:(NSString*)templateName
videoCodec:(NSString*)videoCodec
videoCodeRate:(NSNumber*)videoCodeRate
videoFrameRate:(NSString*)videoFrameRate
width:(NSNumber*)width
height:(NSNumber*)height
template:(NSString*)template
audioCodec:(NSString*)audioCodec
audioFormat:(NSString*)audioFormat
audioSampleRate:(NSNumber*)audioSampleRate
audioChannel:(NSNumber*)audioChannel
audioCodeRate:(NSNumber*)audioCodeRate
jdchd:(NSString*)jdchd
audioComfort:(NSString*)audioComfort { 
    self.regionId = regionId;
    self.templateName = templateName;
    self.videoCodec = videoCodec;
    self.videoCodeRate = videoCodeRate;
    self.videoFrameRate = videoFrameRate;
    self.width = width;
    self.height = height;
    self.template = template;
    self.audioCodec = audioCodec;
    self.audioFormat = audioFormat;
    self.audioSampleRate = audioSampleRate;
    self.audioChannel = audioChannel;
    self.audioCodeRate = audioCodeRate;
    self.jdchd = jdchd;
    self.audioComfort = audioComfort;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
templateName:(NSString*)templateName
videoCodec:(NSString*)videoCodec
videoCodeRate:(NSNumber*)videoCodeRate
videoFrameRate:(NSString*)videoFrameRate
width:(NSNumber*)width
height:(NSNumber*)height
template:(NSString*)template
audioCodec:(NSString*)audioCodec
audioFormat:(NSString*)audioFormat
audioSampleRate:(NSNumber*)audioSampleRate
audioChannel:(NSNumber*)audioChannel
audioCodeRate:(NSNumber*)audioCodeRate
jdchd:(NSString*)jdchd
audioComfort:(NSString*)audioComfort { 
    self.regionId = regionId;
    self.version = version;
    self.templateName = templateName;
    self.videoCodec = videoCodec;
    self.videoCodeRate = videoCodeRate;
    self.videoFrameRate = videoFrameRate;
    self.width = width;
    self.height = height;
    self.template = template;
    self.audioCodec = audioCodec;
    self.audioFormat = audioFormat;
    self.audioSampleRate = audioSampleRate;
    self.audioChannel = audioChannel;
    self.audioCodeRate = audioCodeRate;
    self.jdchd = jdchd;
    self.audioComfort = audioComfort;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self templateName])
    {
        [result setValue:[self templateName] forKey:@"templateName"];
    }
    if([self videoCodec])
    {
        [result setValue:[self videoCodec] forKey:@"videoCodec"];
    }
    if([self videoCodeRate])
    {
        [result setValue:[self videoCodeRate] forKey:@"videoCodeRate"];
    }
    if([self videoFrameRate])
    {
        [result setValue:[self videoFrameRate] forKey:@"videoFrameRate"];
    }
    if([self width])
    {
        [result setValue:[self width] forKey:@"width"];
    }
    if([self height])
    {
        [result setValue:[self height] forKey:@"height"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    if([self audioCodec])
    {
        [result setValue:[self audioCodec] forKey:@"audioCodec"];
    }
    if([self audioFormat])
    {
        [result setValue:[self audioFormat] forKey:@"audioFormat"];
    }
    if([self audioSampleRate])
    {
        [result setValue:[self audioSampleRate] forKey:@"audioSampleRate"];
    }
    if([self audioChannel])
    {
        [result setValue:[self audioChannel] forKey:@"audioChannel"];
    }
    if([self audioCodeRate])
    {
        [result setValue:[self audioCodeRate] forKey:@"audioCodeRate"];
    }
    if([self jdchd])
    {
        [result setValue:[self jdchd] forKey:@"jdchd"];
    }
    if([self audioComfort])
    {
        [result setValue:[self audioComfort] forKey:@"audioComfort"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.templateName = [dictionary objectForKey:@"templateName"];
    self.videoCodec = [dictionary objectForKey:@"videoCodec"];
    self.videoCodeRate = [dictionary objectForKey:@"videoCodeRate"];
    self.videoFrameRate = [dictionary objectForKey:@"videoFrameRate"];
    self.width = [dictionary objectForKey:@"width"];
    self.height = [dictionary objectForKey:@"height"];
    self.template = [dictionary objectForKey:@"template"];
    self.audioCodec = [dictionary objectForKey:@"audioCodec"];
    self.audioFormat = [dictionary objectForKey:@"audioFormat"];
    self.audioSampleRate = [dictionary objectForKey:@"audioSampleRate"];
    self.audioChannel = [dictionary objectForKey:@"audioChannel"];
    self.audioCodeRate = [dictionary objectForKey:@"audioCodeRate"];
    self.jdchd = [dictionary objectForKey:@"jdchd"];
    self.audioComfort = [dictionary objectForKey:@"audioComfort"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamTranscodeTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamTranscodeTemplateResult
-(id) initWithVideoCodec:(NSString*) videoCodec
        videoCodeRate:(NSNumber*)videoCodeRate
        videoFrameRate:(NSString*)videoFrameRate
        width:(NSNumber*)width
        height:(NSNumber*)height
        template:(NSString*)template
        audioCodec:(NSString*)audioCodec
        audioFormat:(NSString*)audioFormat
        audioSampleRate:(NSNumber*)audioSampleRate
        audioChannel:(NSNumber*)audioChannel
        audioCodeRate:(NSNumber*)audioCodeRate
        jdchd:(NSString*)jdchd
        audioComfort:(NSString*)audioComfort { 
    self.videoCodec = videoCodec;               
    self.videoCodeRate = videoCodeRate;               
    self.videoFrameRate = videoFrameRate;               
    self.width = width;               
    self.height = height;               
    self.template = template;               
    self.audioCodec = audioCodec;               
    self.audioFormat = audioFormat;               
    self.audioSampleRate = audioSampleRate;               
    self.audioChannel = audioChannel;               
    self.audioCodeRate = audioCodeRate;               
    self.jdchd = jdchd;               
    self.audioComfort = audioComfort;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self videoCodec])
    {
        [result setValue:[self videoCodec] forKey:@"videoCodec"];
    }
    if([self videoCodeRate])
    {
        [result setValue:[self videoCodeRate] forKey:@"videoCodeRate"];
    }
    if([self videoFrameRate])
    {
        [result setValue:[self videoFrameRate] forKey:@"videoFrameRate"];
    }
    if([self width])
    {
        [result setValue:[self width] forKey:@"width"];
    }
    if([self height])
    {
        [result setValue:[self height] forKey:@"height"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    if([self audioCodec])
    {
        [result setValue:[self audioCodec] forKey:@"audioCodec"];
    }
    if([self audioFormat])
    {
        [result setValue:[self audioFormat] forKey:@"audioFormat"];
    }
    if([self audioSampleRate])
    {
        [result setValue:[self audioSampleRate] forKey:@"audioSampleRate"];
    }
    if([self audioChannel])
    {
        [result setValue:[self audioChannel] forKey:@"audioChannel"];
    }
    if([self audioCodeRate])
    {
        [result setValue:[self audioCodeRate] forKey:@"audioCodeRate"];
    }
    if([self jdchd])
    {
        [result setValue:[self jdchd] forKey:@"jdchd"];
    }
    if([self audioComfort])
    {
        [result setValue:[self audioComfort] forKey:@"audioComfort"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.videoCodec = [dictionary objectForKey:@"videoCodec"];
    self.videoCodeRate = [dictionary objectForKey:@"videoCodeRate"];
    self.videoFrameRate = [dictionary objectForKey:@"videoFrameRate"];
    self.width = [dictionary objectForKey:@"width"];
    self.height = [dictionary objectForKey:@"height"];
    self.template = [dictionary objectForKey:@"template"];
    self.audioCodec = [dictionary objectForKey:@"audioCodec"];
    self.audioFormat = [dictionary objectForKey:@"audioFormat"];
    self.audioSampleRate = [dictionary objectForKey:@"audioSampleRate"];
    self.audioChannel = [dictionary objectForKey:@"audioChannel"];
    self.audioCodeRate = [dictionary objectForKey:@"audioCodeRate"];
    self.jdchd = [dictionary objectForKey:@"jdchd"];
    self.audioComfort = [dictionary objectForKey:@"audioComfort"];
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamTranscodeTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamTranscodeTemplateResult* result = [[LiveDescribeCustomLiveStreamTranscodeTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamTranscodeTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveStreamTranscodeConfigRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveOpenLiveP2pResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveOpenLiveP2pResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveOpenLiveP2pResult* result = [[LiveOpenLiveP2pResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveOpenLiveP2pResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveOpenLiveP2pRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveP2pConfigsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveCloseLiveP2pRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveCloseLiveP2pResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveCloseLiveP2pResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveCloseLiveP2pResult* result = [[LiveCloseLiveP2pResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveCloseLiveP2pResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveP2pConfigsResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        p2pConfigs:(NSArray<P2pConfigs*>*)p2pConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.p2pConfigs = p2pConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self p2pConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self p2pConfigs] count]; i++) {
            P2pConfigs* item = [[self p2pConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"p2pConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* p2pConfigsArray = [dictionary objectForKey:@"p2pConfigs"];
    if(p2pConfigsArray&&![p2pConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [p2pConfigsArray count];i++)
        {
            P2pConfigs* item = [[P2pConfigs alloc]initWithDic:[p2pConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.p2pConfigs = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveP2pConfigsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveP2pConfigsResult* result = [[LiveDescribeLiveP2pConfigsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveP2pConfigsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveAppResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveAppResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveAppResult* result = [[LiveAddLiveAppResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveAppResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveStopLiveAppResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeLiveAppResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        apps:(NSArray<App*>*)apps { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.apps = apps;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self apps])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self apps] count]; i++) {
            App* item = [[self apps] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"apps"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* appsArray = [dictionary objectForKey:@"apps"];
    if(appsArray&&![appsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [appsArray count];i++)
        {
            App* item = [[App alloc]initWithDic:[appsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.apps = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddLiveAppRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    return self;
} 

@end
  
@implementation LiveStopLiveAppResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveStopLiveAppResult* result = [[LiveStopLiveAppResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveStopLiveAppResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveAppRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveAppResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveAppResult* result = [[LiveDescribeLiveAppResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveAppResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveStopLiveAppRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamWatermarkConfigRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDeleteCustomLiveStreamWatermarkTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteCustomLiveStreamWatermarkTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteCustomLiveStreamWatermarkTemplateResult* result = [[LiveDeleteCustomLiveStreamWatermarkTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteCustomLiveStreamWatermarkTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamDomainWatermarkResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamDomainWatermarkResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamDomainWatermarkResult* result = [[LiveDeleteLiveStreamDomainWatermarkResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamDomainWatermarkResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeWatermarkBindingResult
-(id) initWithBindingList:(NSArray<TemplateBinding*>*) bindingList { 
    self.bindingList = bindingList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bindingList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self bindingList] count]; i++) {
            TemplateBinding* item = [[self bindingList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"bindingList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* bindingListArray = [dictionary objectForKey:@"bindingList"];
    if(bindingListArray&&![bindingListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bindingListArray count];i++)
        {
            TemplateBinding* item = [[TemplateBinding alloc]initWithDic:[bindingListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.bindingList = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddLiveStreamDomainWatermarkResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveStreamDomainWatermarkResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamDomainWatermarkResult* result = [[LiveAddLiveStreamDomainWatermarkResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamDomainWatermarkResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddCustomLiveStreamWatermarkTemplateRequest
-(id) initWithRegion:(NSString *)regionId
position:(NSNumber*)position
offsetUnit:(NSString*)offsetUnit
offsetX:(NSNumber*)offsetX
offsetY:(NSNumber*)offsetY
sizeUnit:(NSString*)sizeUnit
width:(NSNumber*)width
height:(NSNumber*)height
template:(NSString*)template
uploadId:(NSString*)uploadId
url:(NSString*)url { 
    self.regionId = regionId;
    self.position = position;
    self.offsetUnit = offsetUnit;
    self.offsetX = offsetX;
    self.offsetY = offsetY;
    self.sizeUnit = sizeUnit;
    self.width = width;
    self.height = height;
    self.template = template;
    self.uploadId = uploadId;
    self.url = url;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
position:(NSNumber*)position
offsetUnit:(NSString*)offsetUnit
offsetX:(NSNumber*)offsetX
offsetY:(NSNumber*)offsetY
sizeUnit:(NSString*)sizeUnit
width:(NSNumber*)width
height:(NSNumber*)height
template:(NSString*)template
uploadId:(NSString*)uploadId
url:(NSString*)url { 
    self.regionId = regionId;
    self.version = version;
    self.position = position;
    self.offsetUnit = offsetUnit;
    self.offsetX = offsetX;
    self.offsetY = offsetY;
    self.sizeUnit = sizeUnit;
    self.width = width;
    self.height = height;
    self.template = template;
    self.uploadId = uploadId;
    self.url = url;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self position])
    {
        [result setValue:[self position] forKey:@"position"];
    }
    if([self offsetUnit])
    {
        [result setValue:[self offsetUnit] forKey:@"offsetUnit"];
    }
    if([self offsetX])
    {
        [result setValue:[self offsetX] forKey:@"offsetX"];
    }
    if([self offsetY])
    {
        [result setValue:[self offsetY] forKey:@"offsetY"];
    }
    if([self sizeUnit])
    {
        [result setValue:[self sizeUnit] forKey:@"sizeUnit"];
    }
    if([self width])
    {
        [result setValue:[self width] forKey:@"width"];
    }
    if([self height])
    {
        [result setValue:[self height] forKey:@"height"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    if([self uploadId])
    {
        [result setValue:[self uploadId] forKey:@"uploadId"];
    }
    if([self url])
    {
        [result setValue:[self url] forKey:@"url"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.position = [dictionary objectForKey:@"position"];
    self.offsetUnit = [dictionary objectForKey:@"offsetUnit"];
    self.offsetX = [dictionary objectForKey:@"offsetX"];
    self.offsetY = [dictionary objectForKey:@"offsetY"];
    self.sizeUnit = [dictionary objectForKey:@"sizeUnit"];
    self.width = [dictionary objectForKey:@"width"];
    self.height = [dictionary objectForKey:@"height"];
    self.template = [dictionary objectForKey:@"template"];
    self.uploadId = [dictionary objectForKey:@"uploadId"];
    self.url = [dictionary objectForKey:@"url"];
    return self;
} 

@end
@implementation LiveDescribeWatermarkBindingRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamAppWatermarkRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddCustomLiveStreamWatermarkTemplateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamWatermarkTemplatesResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        watermarkTemplates:(NSArray<WatermarkTemplate*>*)watermarkTemplates { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.watermarkTemplates = watermarkTemplates;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self watermarkTemplates])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self watermarkTemplates] count]; i++) {
            WatermarkTemplate* item = [[self watermarkTemplates] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"watermarkTemplates"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* watermarkTemplatesArray = [dictionary objectForKey:@"watermarkTemplates"];
    if(watermarkTemplatesArray&&![watermarkTemplatesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [watermarkTemplatesArray count];i++)
        {
            WatermarkTemplate* item = [[WatermarkTemplate alloc]initWithDic:[watermarkTemplatesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.watermarkTemplates = propertyArray;
    }
    return self;
} 

@end
@implementation LiveDescribeCustomLiveStreamWatermarkConfigResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        watermarkConfigs:(NSArray<LiveStreamRecordConfig*>*)watermarkConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.watermarkConfigs = watermarkConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self watermarkConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self watermarkConfigs] count]; i++) {
            LiveStreamRecordConfig* item = [[self watermarkConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"watermarkConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* watermarkConfigsArray = [dictionary objectForKey:@"watermarkConfigs"];
    if(watermarkConfigsArray&&![watermarkConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [watermarkConfigsArray count];i++)
        {
            LiveStreamRecordConfig* item = [[LiveStreamRecordConfig alloc]initWithDic:[watermarkConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.watermarkConfigs = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamWatermarkConfigResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamWatermarkConfigResult* result = [[LiveDescribeCustomLiveStreamWatermarkConfigResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamWatermarkConfigResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteCustomLiveStreamWatermarkTemplateRequest
-(id) initWithRegion:(NSString *)regionId
template:(NSString*)template { 
    self.regionId = regionId;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveDeleteLiveStreamDomainWatermarkRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
  
@implementation LiveDescribeWatermarkBindingResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeWatermarkBindingResult* result = [[LiveDescribeWatermarkBindingResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeWatermarkBindingResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeCustomLiveStreamWatermarkTemplatesRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
filters:(NSArray<LiveFilter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            LiveFilter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            LiveFilter* item = [[LiveFilter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddLiveStreamAppWatermarkResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveStreamAppWatermarkResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveStreamAppWatermarkResult* result = [[LiveAddLiveStreamAppWatermarkResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveStreamAppWatermarkResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveStreamDomainWatermarkRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
@implementation LiveAddLiveStreamAppWatermarkRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
appName:(NSString*)appName
template:(NSString*)template { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.appName = appName;
    self.template = template;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self template])
    {
        [result setValue:[self template] forKey:@"template"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.template = [dictionary objectForKey:@"template"];
    return self;
} 

@end
  
@implementation LiveDescribeCustomLiveStreamWatermarkTemplatesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeCustomLiveStreamWatermarkTemplatesResult* result = [[LiveDescribeCustomLiveStreamWatermarkTemplatesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeCustomLiveStreamWatermarkTemplatesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveAddCustomLiveStreamWatermarkTemplateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddCustomLiveStreamWatermarkTemplateResult* result = [[LiveAddCustomLiveStreamWatermarkTemplateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddCustomLiveStreamWatermarkTemplateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDeleteLiveStreamAppWatermarkResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveStreamAppWatermarkResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveStreamAppWatermarkResult* result = [[LiveDeleteLiveStreamAppWatermarkResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveStreamAppWatermarkResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveRestartAuthKeyResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeLivePlayAuthKeyResult
-(id) initWithPlayDomain:(NSString*) playDomain
        authStatus:(NSString*)authStatus
        authKey:(NSString*)authKey { 
    self.playDomain = playDomain;               
    self.authStatus = authStatus;               
    self.authKey = authKey;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    if([self authStatus])
    {
        [result setValue:[self authStatus] forKey:@"authStatus"];
    }
    if([self authKey])
    {
        [result setValue:[self authKey] forKey:@"authKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    self.authStatus = [dictionary objectForKey:@"authStatus"];
    self.authKey = [dictionary objectForKey:@"authKey"];
    return self;
} 

@end
@implementation LiveSetLivePlayAuthKeyResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveSetLivePlayAuthKeyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLivePlayAuthKeyResult* result = [[LiveSetLivePlayAuthKeyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLivePlayAuthKeyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveRestartAuthKeyResult
-(id) initWithPlayDomain:(NSString*) playDomain
        authStatus:(NSString*)authStatus
        authKey:(NSString*)authKey { 
    self.playDomain = playDomain;               
    self.authStatus = authStatus;               
    self.authKey = authKey;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    if([self authStatus])
    {
        [result setValue:[self authStatus] forKey:@"authStatus"];
    }
    if([self authKey])
    {
        [result setValue:[self authKey] forKey:@"authKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    self.authStatus = [dictionary objectForKey:@"authStatus"];
    self.authKey = [dictionary objectForKey:@"authKey"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveRestartAuthKeyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveRestartAuthKeyResult* result = [[LiveDescribeLiveRestartAuthKeyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveRestartAuthKeyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLivePlayAuthKeyRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
  
@implementation LiveSetLiveRestartAuthKeyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveRestartAuthKeyResult* result = [[LiveSetLiveRestartAuthKeyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveRestartAuthKeyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveRestartAuthKeyRequest
-(id) initWithRegion:(NSString *)regionId
restartDomain:(NSString*)restartDomain
authStatus:(NSString*)authStatus
authKey:(NSString*)authKey { 
    self.regionId = regionId;
    self.restartDomain = restartDomain;
    self.authStatus = authStatus;
    self.authKey = authKey;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restartDomain:(NSString*)restartDomain
authStatus:(NSString*)authStatus
authKey:(NSString*)authKey { 
    self.regionId = regionId;
    self.version = version;
    self.restartDomain = restartDomain;
    self.authStatus = authStatus;
    self.authKey = authKey;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    if([self authStatus])
    {
        [result setValue:[self authStatus] forKey:@"authStatus"];
    }
    if([self authKey])
    {
        [result setValue:[self authKey] forKey:@"authKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    self.authStatus = [dictionary objectForKey:@"authStatus"];
    self.authKey = [dictionary objectForKey:@"authKey"];
    return self;
} 

@end
  
@implementation LiveDescribeLivePlayAuthKeyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLivePlayAuthKeyResult* result = [[LiveDescribeLivePlayAuthKeyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLivePlayAuthKeyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLivePlayAuthKeyRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain
authStatus:(NSString*)authStatus
authKey:(NSString*)authKey { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    self.authStatus = authStatus;
    self.authKey = authKey;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain
authStatus:(NSString*)authStatus
authKey:(NSString*)authKey { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    self.authStatus = authStatus;
    self.authKey = authKey;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    if([self authStatus])
    {
        [result setValue:[self authStatus] forKey:@"authStatus"];
    }
    if([self authKey])
    {
        [result setValue:[self authKey] forKey:@"authKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    self.authStatus = [dictionary objectForKey:@"authStatus"];
    self.authKey = [dictionary objectForKey:@"authKey"];
    return self;
} 

@end
@implementation LiveDescribeLiveRestartAuthKeyRequest
-(id) initWithRegion:(NSString *)regionId
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.restartDomain = restartDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.version = version;
    self.restartDomain = restartDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveRestartDomainCertificateResult
-(id) initWithRestartDomain:(NSString*) restartDomain
        certStatus:(NSString*)certStatus
        cert:(NSString*)cert
        title:(NSString*)title { 
    self.restartDomain = restartDomain;               
    self.certStatus = certStatus;               
    self.cert = cert;               
    self.title = title;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    if([self certStatus])
    {
        [result setValue:[self certStatus] forKey:@"certStatus"];
    }
    if([self cert])
    {
        [result setValue:[self cert] forKey:@"cert"];
    }
    if([self title])
    {
        [result setValue:[self title] forKey:@"title"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    self.certStatus = [dictionary objectForKey:@"certStatus"];
    self.cert = [dictionary objectForKey:@"cert"];
    self.title = [dictionary objectForKey:@"title"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveRestartDomainCertificateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveRestartDomainCertificateResult* result = [[LiveDescribeLiveRestartDomainCertificateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveRestartDomainCertificateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveRestartDomainCertificateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveSetLiveRestartDomainCertificateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveRestartDomainCertificateResult* result = [[LiveSetLiveRestartDomainCertificateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveRestartDomainCertificateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveDomainCertificateResult
-(id) initWithPlayDomain:(NSString*) playDomain
        certStatus:(NSString*)certStatus
        cert:(NSString*)cert
        title:(NSString*)title { 
    self.playDomain = playDomain;               
    self.certStatus = certStatus;               
    self.cert = cert;               
    self.title = title;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    if([self certStatus])
    {
        [result setValue:[self certStatus] forKey:@"certStatus"];
    }
    if([self cert])
    {
        [result setValue:[self cert] forKey:@"cert"];
    }
    if([self title])
    {
        [result setValue:[self title] forKey:@"title"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    self.certStatus = [dictionary objectForKey:@"certStatus"];
    self.cert = [dictionary objectForKey:@"cert"];
    self.title = [dictionary objectForKey:@"title"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveDomainCertificateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveDomainCertificateResult* result = [[LiveDescribeLiveDomainCertificateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveDomainCertificateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveSetLiveDomainCertificateResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation LiveDescribeLiveDomainCertificateRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveSetLiveRestartDomainCertificateRequest
-(id) initWithRegion:(NSString *)regionId
restartDomain:(NSString*)restartDomain
certStatus:(NSString*)certStatus
cert:(NSString*)cert
key:(NSString*)key
title:(NSString*)title { 
    self.regionId = regionId;
    self.restartDomain = restartDomain;
    self.certStatus = certStatus;
    self.cert = cert;
    self.key = key;
    self.title = title;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restartDomain:(NSString*)restartDomain
certStatus:(NSString*)certStatus
cert:(NSString*)cert
key:(NSString*)key
title:(NSString*)title { 
    self.regionId = regionId;
    self.version = version;
    self.restartDomain = restartDomain;
    self.certStatus = certStatus;
    self.cert = cert;
    self.key = key;
    self.title = title;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    if([self certStatus])
    {
        [result setValue:[self certStatus] forKey:@"certStatus"];
    }
    if([self cert])
    {
        [result setValue:[self cert] forKey:@"cert"];
    }
    if([self key])
    {
        [result setValue:[self key] forKey:@"key"];
    }
    if([self title])
    {
        [result setValue:[self title] forKey:@"title"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    self.certStatus = [dictionary objectForKey:@"certStatus"];
    self.cert = [dictionary objectForKey:@"cert"];
    self.key = [dictionary objectForKey:@"key"];
    self.title = [dictionary objectForKey:@"title"];
    return self;
} 

@end
  
@implementation LiveSetLiveDomainCertificateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveSetLiveDomainCertificateResult* result = [[LiveSetLiveDomainCertificateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveSetLiveDomainCertificateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveRestartDomainCertificateRequest
-(id) initWithRegion:(NSString *)regionId
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.restartDomain = restartDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.version = version;
    self.restartDomain = restartDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    return self;
} 

@end
@implementation LiveSetLiveDomainCertificateRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain
certStatus:(NSString*)certStatus
cert:(NSString*)cert
key:(NSString*)key
title:(NSString*)title { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    self.certStatus = certStatus;
    self.cert = cert;
    self.key = key;
    self.title = title;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain
certStatus:(NSString*)certStatus
cert:(NSString*)cert
key:(NSString*)key
title:(NSString*)title { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    self.certStatus = certStatus;
    self.cert = cert;
    self.key = key;
    self.title = title;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    if([self certStatus])
    {
        [result setValue:[self certStatus] forKey:@"certStatus"];
    }
    if([self cert])
    {
        [result setValue:[self cert] forKey:@"cert"];
    }
    if([self key])
    {
        [result setValue:[self key] forKey:@"key"];
    }
    if([self title])
    {
        [result setValue:[self title] forKey:@"title"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    self.certStatus = [dictionary objectForKey:@"certStatus"];
    self.cert = [dictionary objectForKey:@"cert"];
    self.key = [dictionary objectForKey:@"key"];
    self.title = [dictionary objectForKey:@"title"];
    return self;
} 

@end
@implementation LiveDescribeLiveRestartConfigsRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.restartDomain = restartDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.restartDomain = restartDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveRestartConfigsResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        restartConfigs:(NSArray<RestartConfig*>*)restartConfigs { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.restartConfigs = restartConfigs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self restartConfigs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self restartConfigs] count]; i++) {
            RestartConfig* item = [[self restartConfigs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"restartConfigs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* restartConfigsArray = [dictionary objectForKey:@"restartConfigs"];
    if(restartConfigsArray&&![restartConfigsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [restartConfigsArray count];i++)
        {
            RestartConfig* item = [[RestartConfig alloc]initWithDic:[restartConfigsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.restartConfigs = propertyArray;
    }
    return self;
} 

@end
  
@implementation LiveDescribeLiveRestartConfigsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveRestartConfigsResult* result = [[LiveDescribeLiveRestartConfigsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveRestartConfigsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveOpenLiveRestartResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveOpenLiveRestartResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveOpenLiveRestartResult* result = [[LiveOpenLiveRestartResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveOpenLiveRestartResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveCloseLiveRestartRequest
-(id) initWithRegion:(NSString *)regionId
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.restartDomain = restartDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.version = version;
    self.restartDomain = restartDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    return self;
} 

@end
@implementation LiveCloseLiveRestartResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveCloseLiveRestartResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveCloseLiveRestartResult* result = [[LiveCloseLiveRestartResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveCloseLiveRestartResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveOpenLiveRestartRequest
-(id) initWithRegion:(NSString *)regionId
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.restartDomain = restartDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.version = version;
    self.restartDomain = restartDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    return self;
} 

@end
@implementation LiveStartLiveDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveStartLiveDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveStartLiveDomainResult* result = [[LiveStartLiveDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveStartLiveDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveRestartDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveAddLiveRestartDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveRestartDomainResult* result = [[LiveAddLiveRestartDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveRestartDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveDomainDetailRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDeleteLiveDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDeleteLiveDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDeleteLiveDomainResult* result = [[LiveDeleteLiveDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDeleteLiveDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveDomainRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    self.playDomain = playDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain
playDomain:(NSString*)playDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    self.playDomain = playDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    return self;
} 

@end
@implementation LiveStartLiveDomainRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveDomainsRequest
-(id) initWithRegion:(NSString *)regionId
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNum:(NSNumber*)pageNum
pageSize:(NSNumber*)pageSize
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.pageNum = pageNum;
    self.pageSize = pageSize;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNum])
    {
        [result setValue:[self pageNum] forKey:@"pageNum"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNum = [dictionary objectForKey:@"pageNum"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveStopLiveDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveStopLiveDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveStopLiveDomainResult* result = [[LiveStopLiveDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveStopLiveDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveDescribeLiveDomainsResult
-(id) initWithPageNumber:(NSNumber*) pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount
        domainDetails:(NSArray<DomainDetails*>*)domainDetails { 
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    self.domainDetails = domainDetails;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self domainDetails])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self domainDetails] count]; i++) {
            DomainDetails* item = [[self domainDetails] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"domainDetails"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* domainDetailsArray = [dictionary objectForKey:@"domainDetails"];
    if(domainDetailsArray&&![domainDetailsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [domainDetailsArray count];i++)
        {
            DomainDetails* item = [[DomainDetails alloc]initWithDic:[domainDetailsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.domainDetails = propertyArray;
    }
    return self;
} 

@end
@implementation LiveStopLiveDomainRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDeleteLiveDomainRequest
-(id) initWithRegion:(NSString *)regionId
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.publishDomain = publishDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
publishDomain:(NSString*)publishDomain { 
    self.regionId = regionId;
    self.version = version;
    self.publishDomain = publishDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self publishDomain])
    {
        [result setValue:[self publishDomain] forKey:@"publishDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publishDomain = [dictionary objectForKey:@"publishDomain"];
    return self;
} 

@end
@implementation LiveDescribeLiveDomainDetailResult
-(id) initWithSourceId:(NSNumber*) sourceId
        publishDomains:(NSArray<PublishDomain*>*)publishDomains
        playDomains:(NSArray<PlayDomain*>*)playDomains { 
    self.sourceId = sourceId;               
    self.publishDomains = publishDomains;               
    self.playDomains = playDomains;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self sourceId])
    {
        [result setValue:[self sourceId] forKey:@"sourceId"];
    }
    if([self publishDomains])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self publishDomains] count]; i++) {
            PublishDomain* item = [[self publishDomains] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"publishDomains"];
    }
    if([self playDomains])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self playDomains] count]; i++) {
            PlayDomain* item = [[self playDomains] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"playDomains"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.sourceId = [dictionary objectForKey:@"sourceId"];
    NSArray* publishDomainsArray = [dictionary objectForKey:@"publishDomains"];
    if(publishDomainsArray&&![publishDomainsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [publishDomainsArray count];i++)
        {
            PublishDomain* item = [[PublishDomain alloc]initWithDic:[publishDomainsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.publishDomains = propertyArray;
    }
    NSArray* playDomainsArray = [dictionary objectForKey:@"playDomains"];
    if(playDomainsArray&&![playDomainsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [playDomainsArray count];i++)
        {
            PlayDomain* item = [[PlayDomain alloc]initWithDic:[playDomainsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.playDomains = propertyArray;
    }
    return self;
} 

@end
@implementation LiveAddLiveDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LiveDescribeLiveDomainDetailResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveDomainDetailResult* result = [[LiveDescribeLiveDomainDetailResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveDomainDetailResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LiveAddLiveRestartDomainRequest
-(id) initWithRegion:(NSString *)regionId
playDomain:(NSString*)playDomain
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.playDomain = playDomain;
    self.restartDomain = restartDomain;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
playDomain:(NSString*)playDomain
restartDomain:(NSString*)restartDomain { 
    self.regionId = regionId;
    self.version = version;
    self.playDomain = playDomain;
    self.restartDomain = restartDomain;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self playDomain])
    {
        [result setValue:[self playDomain] forKey:@"playDomain"];
    }
    if([self restartDomain])
    {
        [result setValue:[self restartDomain] forKey:@"restartDomain"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.playDomain = [dictionary objectForKey:@"playDomain"];
    self.restartDomain = [dictionary objectForKey:@"restartDomain"];
    return self;
} 

@end
  
@implementation LiveDescribeLiveDomainsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveDescribeLiveDomainsResult* result = [[LiveDescribeLiveDomainsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveDescribeLiveDomainsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LiveAddLiveDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LiveAddLiveDomainResult* result = [[LiveAddLiveDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LiveAddLiveDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
