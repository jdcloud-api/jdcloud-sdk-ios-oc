/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

操作列表
云解析OpenAPI操作列表接口

OpenAPI spec version: v2
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKDomainservice/DomainserviceApiModel.h>


@implementation DomainserviceDescribeDomainsResult
-(id) initWithDataList:(NSArray<DomainInfo*>*) dataList
        currentCount:(NSNumber*)currentCount
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage { 
    self.dataList = dataList;               
    self.currentCount = currentCount;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            DomainInfo* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            DomainInfo* item = [[DomainInfo alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    return self;
} 

@end
@implementation DomainserviceDescribeDomainQueryCountResult
-(id) initWithTime:(NSArray<NSNumber*>*) time
        traffic:(NSArray<NSNumber*>*)traffic { 
    self.time = time;               
    self.traffic = traffic;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self time])
    {
        [result setValue:[self time] forKey:@"time"];
    }
    if([self traffic])
    {
        [result setValue:[self traffic] forKey:@"traffic"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.time = [dictionary objectForKey:@"time"];
    self.traffic = [dictionary objectForKey:@"traffic"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeDomainQueryCountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeDomainQueryCountResult* result = [[DomainserviceDescribeDomainQueryCountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeDomainQueryCountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeDomainQueryTrafficResult
-(id) initWithTime:(NSArray<NSNumber*>*) time
        unit:(NSString*)unit
        traffic:(NSArray<NSNumber*>*)traffic { 
    self.time = time;               
    self.unit = unit;               
    self.traffic = traffic;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self time])
    {
        [result setValue:[self time] forKey:@"time"];
    }
    if([self unit])
    {
        [result setValue:[self unit] forKey:@"unit"];
    }
    if([self traffic])
    {
        [result setValue:[self traffic] forKey:@"traffic"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.time = [dictionary objectForKey:@"time"];
    self.unit = [dictionary objectForKey:@"unit"];
    self.traffic = [dictionary objectForKey:@"traffic"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeDomainQueryTrafficResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeDomainQueryTrafficResult* result = [[DomainserviceDescribeDomainQueryTrafficResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeDomainQueryTrafficResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceCreateDomainResult
-(id) initWithData:(DomainAdded*) data
        order:(NSString*)order { 
    self.data = data;               
    self.order = order;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[[self data] dictionary]forKey:@"data"];
    }
    if([self order])
    {
        [result setValue:[self order] forKey:@"order"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [[DomainAdded alloc]initWithDic:[dictionary objectForKey:@"data"]];
    self.order = [dictionary objectForKey:@"order"];
    return self;
} 

@end
  
@implementation DomainserviceCreateDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceCreateDomainResult* result = [[DomainserviceCreateDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceCreateDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDeleteDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceDescribeDomainQueryCountRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
start:(NSString*)start
end:(NSString*)end
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.start = start;
    self.end = end;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
start:(NSString*)start
end:(NSString*)end
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.start = start;
    self.end = end;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self start])
    {
        [result setValue:[self start] forKey:@"start"];
    }
    if([self end])
    {
        [result setValue:[self end] forKey:@"end"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.start = [dictionary objectForKey:@"start"];
    self.end = [dictionary objectForKey:@"end"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceModifyDomainResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation DomainserviceModifyDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceModifyDomainResult* result = [[DomainserviceModifyDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceModifyDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceCreateDomainRequest
-(id) initWithRegion:(NSString *)regionId
packId:(NSNumber*)packId
domainName:(NSString*)domainName
domainId:(NSNumber*)domainId
buyType:(NSNumber*)buyType
timeSpan:(NSNumber*)timeSpan
timeUnit:(NSNumber*)timeUnit
billingType:(NSNumber*)billingType { 
    self.regionId = regionId;
    self.packId = packId;
    self.domainName = domainName;
    self.domainId = domainId;
    self.buyType = buyType;
    self.timeSpan = timeSpan;
    self.timeUnit = timeUnit;
    self.billingType = billingType;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
packId:(NSNumber*)packId
domainName:(NSString*)domainName
domainId:(NSNumber*)domainId
buyType:(NSNumber*)buyType
timeSpan:(NSNumber*)timeSpan
timeUnit:(NSNumber*)timeUnit
billingType:(NSNumber*)billingType { 
    self.regionId = regionId;
    self.version = version;
    self.packId = packId;
    self.domainName = domainName;
    self.domainId = domainId;
    self.buyType = buyType;
    self.timeSpan = timeSpan;
    self.timeUnit = timeUnit;
    self.billingType = billingType;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self packId])
    {
        [result setValue:[self packId] forKey:@"packId"];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    if([self buyType])
    {
        [result setValue:[self buyType] forKey:@"buyType"];
    }
    if([self timeSpan])
    {
        [result setValue:[self timeSpan] forKey:@"timeSpan"];
    }
    if([self timeUnit])
    {
        [result setValue:[self timeUnit] forKey:@"timeUnit"];
    }
    if([self billingType])
    {
        [result setValue:[self billingType] forKey:@"billingType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.packId = [dictionary objectForKey:@"packId"];
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    self.buyType = [dictionary objectForKey:@"buyType"];
    self.timeSpan = [dictionary objectForKey:@"timeSpan"];
    self.timeUnit = [dictionary objectForKey:@"timeUnit"];
    self.billingType = [dictionary objectForKey:@"billingType"];
    return self;
} 

@end
@implementation DomainserviceDeleteDomainRequest
-(id) initWithRegion:(NSString *)regionId
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
  
@implementation DomainserviceDeleteDomainResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDeleteDomainResult* result = [[DomainserviceDeleteDomainResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDeleteDomainResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeDomainQueryTrafficRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
start:(NSString*)start
end:(NSString*)end
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.start = start;
    self.end = end;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
start:(NSString*)start
end:(NSString*)end
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.start = start;
    self.end = end;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self start])
    {
        [result setValue:[self start] forKey:@"start"];
    }
    if([self end])
    {
        [result setValue:[self end] forKey:@"end"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.start = [dictionary objectForKey:@"start"];
    self.end = [dictionary objectForKey:@"end"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeDomainsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeDomainsResult* result = [[DomainserviceDescribeDomainsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeDomainsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceModifyDomainRequest
-(id) initWithRegion:(NSString *)regionId
domainName:(NSString*)domainName
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.domainName = domainName;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainName:(NSString*)domainName
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.domainName = domainName;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDescribeDomainsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
domainName:(NSString*)domainName
domainId:(NSNumber*)domainId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.domainName = domainName;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
domainName:(NSString*)domainName
domainId:(NSNumber*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.domainName = domainName;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self domainName])
    {
        [result setValue:[self domainName] forKey:@"domainName"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.domainName = [dictionary objectForKey:@"domainName"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceCreateMonitorRequest
-(id) initWithRegion:(NSString *)regionId
subDomainName:(NSString*)subDomainName
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.subDomainName = subDomainName;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
subDomainName:(NSString*)subDomainName
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.subDomainName = subDomainName;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self subDomainName])
    {
        [result setValue:[self subDomainName] forKey:@"subDomainName"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subDomainName = [dictionary objectForKey:@"subDomainName"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceCreateMonitorResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceDescribeMonitorTargetResult
-(id) initWithData:(NSArray<NSString*>*) data { 
    self.data = data;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[self data] forKey:@"data"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [dictionary objectForKey:@"data"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeMonitorTargetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeMonitorTargetResult* result = [[DomainserviceDescribeMonitorTargetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeMonitorTargetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDeleteMonitorResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceModifyMonitorRequest
-(id) initWithRegion:(NSString *)regionId
updateMonitor:(UpdateMonitor*)updateMonitor
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.updateMonitor = updateMonitor;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
updateMonitor:(UpdateMonitor*)updateMonitor
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.updateMonitor = updateMonitor;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self updateMonitor])
    {
        [result setValue:[[self updateMonitor] dictionary]forKey:@"updateMonitor"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.updateMonitor = [[UpdateMonitor alloc]initWithDic:[dictionary objectForKey:@"updateMonitor"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceModifyMonitorStatusResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceCreateMonitorTargetRequest
-(id) initWithRegion:(NSString *)regionId
subDomainName:(NSString*)subDomainName
targets:(NSArray<NSString*>*)targets
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.subDomainName = subDomainName;
    self.targets = targets;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
subDomainName:(NSString*)subDomainName
targets:(NSArray<NSString*>*)targets
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.subDomainName = subDomainName;
    self.targets = targets;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self subDomainName])
    {
        [result setValue:[self subDomainName] forKey:@"subDomainName"];
    }
    if([self targets])
    {
        [result setValue:[self targets] forKey:@"targets"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subDomainName = [dictionary objectForKey:@"subDomainName"];
    self.targets = [dictionary objectForKey:@"targets"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDescribeMonitorResult
-(id) initWithCurrentCount:(NSNumber*) currentCount
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage
        dataList:(NSArray<Monitor*>*)dataList { 
    self.currentCount = currentCount;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            Monitor* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            Monitor* item = [[Monitor alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation DomainserviceCreateMonitorResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceCreateMonitorResult* result = [[DomainserviceCreateMonitorResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceCreateMonitorResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDeleteMonitorRequest
-(id) initWithRegion:(NSString *)regionId
domainId:(NSString*)domainId
monitorId:(NSString*)monitorId { 
    self.regionId = regionId;
    self.domainId = domainId;
    self.monitorId = monitorId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainId:(NSString*)domainId
monitorId:(NSString*)monitorId { 
    self.regionId = regionId;
    self.version = version;
    self.domainId = domainId;
    self.monitorId = monitorId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    if([self monitorId])
    {
        [result setValue:[self monitorId] forKey:@"monitorId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainId = [dictionary objectForKey:@"domainId"];
    self.monitorId = [dictionary objectForKey:@"monitorId"];
    return self;
} 

@end
@implementation DomainserviceDescribeMonitorAlarmRequest
-(id) initWithRegion:(NSString *)regionId
pageIndex:(NSNumber*)pageIndex
pageSize:(NSNumber*)pageSize
searchValue:(NSString*)searchValue
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.pageIndex = pageIndex;
    self.pageSize = pageSize;
    self.searchValue = searchValue;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageIndex:(NSNumber*)pageIndex
pageSize:(NSNumber*)pageSize
searchValue:(NSString*)searchValue
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.pageIndex = pageIndex;
    self.pageSize = pageSize;
    self.searchValue = searchValue;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageIndex])
    {
        [result setValue:[self pageIndex] forKey:@"pageIndex"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self searchValue])
    {
        [result setValue:[self searchValue] forKey:@"searchValue"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageIndex = [dictionary objectForKey:@"pageIndex"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.searchValue = [dictionary objectForKey:@"searchValue"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDescribeMonitorAlarmResult
-(id) initWithCurrentCount:(NSNumber*) currentCount
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage
        dataList:(NSArray<MonitorAlarmInfo*>*)dataList { 
    self.currentCount = currentCount;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            MonitorAlarmInfo* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            MonitorAlarmInfo* item = [[MonitorAlarmInfo alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    return self;
} 

@end
  
@implementation DomainserviceDescribeMonitorAlarmResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeMonitorAlarmResult* result = [[DomainserviceDescribeMonitorAlarmResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeMonitorAlarmResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation DomainserviceDeleteMonitorResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDeleteMonitorResult* result = [[DomainserviceDeleteMonitorResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDeleteMonitorResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeMonitorTargetRequest
-(id) initWithRegion:(NSString *)regionId
subDomainName:(NSString*)subDomainName
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.subDomainName = subDomainName;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
subDomainName:(NSString*)subDomainName
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.subDomainName = subDomainName;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self subDomainName])
    {
        [result setValue:[self subDomainName] forKey:@"subDomainName"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subDomainName = [dictionary objectForKey:@"subDomainName"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceModifyMonitorStatusRequest
-(id) initWithRegion:(NSString *)regionId
action:(NSString*)action
switchTarget:(NSString*)switchTarget
domainId:(NSString*)domainId
monitorId:(NSString*)monitorId { 
    self.regionId = regionId;
    self.action = action;
    self.switchTarget = switchTarget;
    self.domainId = domainId;
    self.monitorId = monitorId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
action:(NSString*)action
switchTarget:(NSString*)switchTarget
domainId:(NSString*)domainId
monitorId:(NSString*)monitorId { 
    self.regionId = regionId;
    self.version = version;
    self.action = action;
    self.switchTarget = switchTarget;
    self.domainId = domainId;
    self.monitorId = monitorId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self action])
    {
        [result setValue:[self action] forKey:@"action"];
    }
    if([self switchTarget])
    {
        [result setValue:[self switchTarget] forKey:@"switchTarget"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    if([self monitorId])
    {
        [result setValue:[self monitorId] forKey:@"monitorId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.action = [dictionary objectForKey:@"action"];
    self.switchTarget = [dictionary objectForKey:@"switchTarget"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    self.monitorId = [dictionary objectForKey:@"monitorId"];
    return self;
} 

@end
@implementation DomainserviceModifyMonitorResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceCreateMonitorTargetResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation DomainserviceCreateMonitorTargetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceCreateMonitorTargetResult* result = [[DomainserviceCreateMonitorTargetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceCreateMonitorTargetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeMonitorRequest
-(id) initWithRegion:(NSString *)regionId
pageIndex:(NSNumber*)pageIndex
pageSize:(NSNumber*)pageSize
searchValue:(NSString*)searchValue
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.pageIndex = pageIndex;
    self.pageSize = pageSize;
    self.searchValue = searchValue;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageIndex:(NSNumber*)pageIndex
pageSize:(NSNumber*)pageSize
searchValue:(NSString*)searchValue
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.pageIndex = pageIndex;
    self.pageSize = pageSize;
    self.searchValue = searchValue;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageIndex])
    {
        [result setValue:[self pageIndex] forKey:@"pageIndex"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self searchValue])
    {
        [result setValue:[self searchValue] forKey:@"searchValue"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageIndex = [dictionary objectForKey:@"pageIndex"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.searchValue = [dictionary objectForKey:@"searchValue"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeMonitorResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeMonitorResult* result = [[DomainserviceDescribeMonitorResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeMonitorResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation DomainserviceModifyMonitorResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceModifyMonitorResult* result = [[DomainserviceModifyMonitorResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceModifyMonitorResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation DomainserviceModifyMonitorStatusResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceModifyMonitorStatusResult* result = [[DomainserviceModifyMonitorStatusResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceModifyMonitorStatusResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceCreateResourceRecordResult
-(id) initWithDataList:(RR*) dataList { 
    self.dataList = dataList;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        [result setValue:[[self dataList] dictionary]forKey:@"dataList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dataList = [[RR alloc]initWithDic:[dictionary objectForKey:@"dataList"]];
    return self;
} 

@end
@implementation DomainserviceBatchSetResourceRecordsRequest
-(id) initWithRegion:(NSString *)regionId
req:(NSArray<BatchSetDNS*>*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(NSArray<BatchSetDNS*>*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self req] count]; i++) {
            BatchSetDNS* item = [[self req] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* reqArray = [dictionary objectForKey:@"req"];
    if(reqArray&&![reqArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [reqArray count];i++)
        {
            BatchSetDNS* item = [[BatchSetDNS alloc]initWithDic:[reqArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.req = propertyArray;
    }
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDescribeResourceRecordRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
search:(NSString*)search
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.search = search;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
search:(NSString*)search
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.search = search;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self search])
    {
        [result setValue:[self search] forKey:@"search"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.search = [dictionary objectForKey:@"search"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceCreateResourceRecordRequest
-(id) initWithRegion:(NSString *)regionId
req:(AddRR*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(AddRR*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        [result setValue:[[self req] dictionary]forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.req = [[AddRR alloc]initWithDic:[dictionary objectForKey:@"req"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceModifyResourceRecordStatusResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceDeleteResourceRecordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation DomainserviceBatchSetResourceRecordsResult
-(id) initWithData:(NSArray<NSString*>*) data { 
    self.data = data;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[self data] forKey:@"data"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [dictionary objectForKey:@"data"];
    return self;
} 

@end
  
@implementation DomainserviceBatchSetResourceRecordsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceBatchSetResourceRecordsResult* result = [[DomainserviceBatchSetResourceRecordsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceBatchSetResourceRecordsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceModifyResourceRecordStatusRequest
-(id) initWithRegion:(NSString *)regionId
action:(NSString*)action
domainId:(NSString*)domainId
resourceRecordId:(NSString*)resourceRecordId { 
    self.regionId = regionId;
    self.action = action;
    self.domainId = domainId;
    self.resourceRecordId = resourceRecordId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
action:(NSString*)action
domainId:(NSString*)domainId
resourceRecordId:(NSString*)resourceRecordId { 
    self.regionId = regionId;
    self.version = version;
    self.action = action;
    self.domainId = domainId;
    self.resourceRecordId = resourceRecordId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self action])
    {
        [result setValue:[self action] forKey:@"action"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    if([self resourceRecordId])
    {
        [result setValue:[self resourceRecordId] forKey:@"resourceRecordId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.action = [dictionary objectForKey:@"action"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    self.resourceRecordId = [dictionary objectForKey:@"resourceRecordId"];
    return self;
} 

@end
  
@implementation DomainserviceCreateResourceRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceCreateResourceRecordResult* result = [[DomainserviceCreateResourceRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceCreateResourceRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceModifyResourceRecordRequest
-(id) initWithRegion:(NSString *)regionId
req:(UpdateRR*)req
domainId:(NSString*)domainId
resourceRecordId:(NSString*)resourceRecordId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    self.resourceRecordId = resourceRecordId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(UpdateRR*)req
domainId:(NSString*)domainId
resourceRecordId:(NSString*)resourceRecordId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    self.resourceRecordId = resourceRecordId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        [result setValue:[[self req] dictionary]forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    if([self resourceRecordId])
    {
        [result setValue:[self resourceRecordId] forKey:@"resourceRecordId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.req = [[UpdateRR alloc]initWithDic:[dictionary objectForKey:@"req"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    self.resourceRecordId = [dictionary objectForKey:@"resourceRecordId"];
    return self;
} 

@end
@implementation DomainserviceDescribeViewTreeResult
-(id) initWithData:(NSArray<ViewTree*>*) data { 
    self.data = data;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self data] count]; i++) {
            ViewTree* item = [[self data] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"data"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataArray = [dictionary objectForKey:@"data"];
    if(dataArray&&![dataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataArray count];i++)
        {
            ViewTree* item = [[ViewTree alloc]initWithDic:[dataArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.data = propertyArray;
    }
    return self;
} 

@end
  
@implementation DomainserviceDescribeViewTreeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeViewTreeResult* result = [[DomainserviceDescribeViewTreeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeViewTreeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeResourceRecordResult
-(id) initWithDataList:(NSArray<RRInfo*>*) dataList
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage
        currentCount:(NSNumber*)currentCount { 
    self.dataList = dataList;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    self.currentCount = currentCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            RRInfo* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            RRInfo* item = [[RRInfo alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    return self;
} 

@end
@implementation DomainserviceModifyResourceRecordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation DomainserviceModifyResourceRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceModifyResourceRecordResult* result = [[DomainserviceModifyResourceRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceModifyResourceRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation DomainserviceDeleteResourceRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDeleteResourceRecordResult* result = [[DomainserviceDeleteResourceRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDeleteResourceRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeViewTreeRequest
-(id) initWithRegion:(NSString *)regionId
loadMode:(NSNumber*)loadMode
packId:(NSNumber*)packId
viewId:(NSNumber*)viewId
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.loadMode = loadMode;
    self.packId = packId;
    self.viewId = viewId;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
loadMode:(NSNumber*)loadMode
packId:(NSNumber*)packId
viewId:(NSNumber*)viewId
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.loadMode = loadMode;
    self.packId = packId;
    self.viewId = viewId;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self loadMode])
    {
        [result setValue:[self loadMode] forKey:@"loadMode"];
    }
    if([self packId])
    {
        [result setValue:[self packId] forKey:@"packId"];
    }
    if([self viewId])
    {
        [result setValue:[self viewId] forKey:@"viewId"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadMode = [dictionary objectForKey:@"loadMode"];
    self.packId = [dictionary objectForKey:@"packId"];
    self.viewId = [dictionary objectForKey:@"viewId"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeResourceRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeResourceRecordResult* result = [[DomainserviceDescribeResourceRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeResourceRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDeleteResourceRecordRequest
-(id) initWithRegion:(NSString *)regionId
domainId:(NSString*)domainId
resourceRecordId:(NSString*)resourceRecordId { 
    self.regionId = regionId;
    self.domainId = domainId;
    self.resourceRecordId = resourceRecordId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
domainId:(NSString*)domainId
resourceRecordId:(NSString*)resourceRecordId { 
    self.regionId = regionId;
    self.version = version;
    self.domainId = domainId;
    self.resourceRecordId = resourceRecordId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    if([self resourceRecordId])
    {
        [result setValue:[self resourceRecordId] forKey:@"resourceRecordId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.domainId = [dictionary objectForKey:@"domainId"];
    self.resourceRecordId = [dictionary objectForKey:@"resourceRecordId"];
    return self;
} 

@end
  
@implementation DomainserviceModifyResourceRecordStatusResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceModifyResourceRecordStatusResult* result = [[DomainserviceModifyResourceRecordStatusResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceModifyResourceRecordStatusResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeUserViewIPResult
-(id) initWithDataList:(NSArray<NSString*>*) dataList
        currentCount:(NSNumber*)currentCount
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage { 
    self.dataList = dataList;               
    self.currentCount = currentCount;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        [result setValue:[self dataList] forKey:@"dataList"];
    }
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dataList = [dictionary objectForKey:@"dataList"];
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    return self;
} 

@end
@implementation DomainserviceDescribeUserViewResult
-(id) initWithDataList:(NSArray<UserViewInput*>*) dataList
        currentCount:(NSNumber*)currentCount
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage { 
    self.dataList = dataList;               
    self.currentCount = currentCount;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            UserViewInput* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            UserViewInput* item = [[UserViewInput alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    return self;
} 

@end
@implementation DomainserviceDeleteUserViewIPRequest
-(id) initWithRegion:(NSString *)regionId
req:(DelViewIP*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(DelViewIP*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        [result setValue:[[self req] dictionary]forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.req = [[DelViewIP alloc]initWithDic:[dictionary objectForKey:@"req"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceCreateUserViewResult
-(id) initWithData:(Userview*) data { 
    self.data = data;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[[self data] dictionary]forKey:@"data"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [[Userview alloc]initWithDic:[dictionary objectForKey:@"data"]];
    return self;
} 

@end
  
@implementation DomainserviceCreateUserViewResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceCreateUserViewResult* result = [[DomainserviceCreateUserViewResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceCreateUserViewResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceCreateUserViewIPRequest
-(id) initWithRegion:(NSString *)regionId
req:(AddViewIP*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(AddViewIP*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        [result setValue:[[self req] dictionary]forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.req = [[AddViewIP alloc]initWithDic:[dictionary objectForKey:@"req"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeUserViewResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeUserViewResult* result = [[DomainserviceDescribeUserViewResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeUserViewResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDeleteUserViewResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation DomainserviceDescribeUserViewIPResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeUserViewIPResult* result = [[DomainserviceDescribeUserViewIPResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeUserViewIPResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDeleteUserViewIPResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation DomainserviceDeleteUserViewIPResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDeleteUserViewIPResult* result = [[DomainserviceDeleteUserViewIPResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDeleteUserViewIPResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceCreateUserViewRequest
-(id) initWithRegion:(NSString *)regionId
req:(AddView*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(AddView*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        [result setValue:[[self req] dictionary]forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.req = [[AddView alloc]initWithDic:[dictionary objectForKey:@"req"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDeleteUserViewRequest
-(id) initWithRegion:(NSString *)regionId
req:(DelView*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.req = req;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
req:(DelView*)req
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.req = req;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self req])
    {
        [result setValue:[[self req] dictionary]forKey:@"req"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.req = [[DelView alloc]initWithDic:[dictionary objectForKey:@"req"]];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDescribeUserViewIPRequest
-(id) initWithRegion:(NSString *)regionId
viewId:(NSNumber*)viewId
viewName:(NSString*)viewName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.viewId = viewId;
    self.viewName = viewName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
viewId:(NSNumber*)viewId
viewName:(NSString*)viewName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.viewId = viewId;
    self.viewName = viewName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self viewId])
    {
        [result setValue:[self viewId] forKey:@"viewId"];
    }
    if([self viewName])
    {
        [result setValue:[self viewName] forKey:@"viewName"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.viewId = [dictionary objectForKey:@"viewId"];
    self.viewName = [dictionary objectForKey:@"viewName"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceCreateUserViewIPResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation DomainserviceDeleteUserViewResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDeleteUserViewResult* result = [[DomainserviceDeleteUserViewResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDeleteUserViewResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation DomainserviceCreateUserViewIPResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceCreateUserViewIPResult* result = [[DomainserviceCreateUserViewIPResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceCreateUserViewIPResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DomainserviceDescribeUserViewRequest
-(id) initWithRegion:(NSString *)regionId
viewId:(NSNumber*)viewId
viewName:(NSString*)viewName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.viewId = viewId;
    self.viewName = viewName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.domainId = domainId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
viewId:(NSNumber*)viewId
viewName:(NSString*)viewName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
domainId:(NSString*)domainId { 
    self.regionId = regionId;
    self.version = version;
    self.viewId = viewId;
    self.viewName = viewName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.domainId = domainId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self viewId])
    {
        [result setValue:[self viewId] forKey:@"viewId"];
    }
    if([self viewName])
    {
        [result setValue:[self viewName] forKey:@"viewName"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self domainId])
    {
        [result setValue:[self domainId] forKey:@"domainId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.viewId = [dictionary objectForKey:@"viewId"];
    self.viewName = [dictionary objectForKey:@"viewName"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.domainId = [dictionary objectForKey:@"domainId"];
    return self;
} 

@end
@implementation DomainserviceDescribeActionLogRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime
keyWord:(NSString*)keyWord
success:(NSNumber*)success
type:(NSNumber*)type { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    self.keyWord = keyWord;
    self.success = success;
    self.type = type;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime
keyWord:(NSString*)keyWord
success:(NSNumber*)success
type:(NSNumber*)type { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    self.keyWord = keyWord;
    self.success = success;
    self.type = type;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self keyWord])
    {
        [result setValue:[self keyWord] forKey:@"keyWord"];
    }
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.keyWord = [dictionary objectForKey:@"keyWord"];
    self.success = [dictionary objectForKey:@"success"];
    self.type = [dictionary objectForKey:@"type"];
    return self;
} 

@end
@implementation DomainserviceDescribeActionLogResult
-(id) initWithDataList:(NSArray<Actionlog*>*) dataList
        currentCount:(NSNumber*)currentCount
        totalCount:(NSNumber*)totalCount
        totalPage:(NSNumber*)totalPage { 
    self.dataList = dataList;               
    self.currentCount = currentCount;               
    self.totalCount = totalCount;               
    self.totalPage = totalPage;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dataList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dataList] count]; i++) {
            Actionlog* item = [[self dataList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dataList"];
    }
    if([self currentCount])
    {
        [result setValue:[self currentCount] forKey:@"currentCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self totalPage])
    {
        [result setValue:[self totalPage] forKey:@"totalPage"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataListArray = [dictionary objectForKey:@"dataList"];
    if(dataListArray&&![dataListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataListArray count];i++)
        {
            Actionlog* item = [[Actionlog alloc]initWithDic:[dataListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dataList = propertyArray;
    }
    self.currentCount = [dictionary objectForKey:@"currentCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.totalPage = [dictionary objectForKey:@"totalPage"];
    return self;
} 

@end
  
@implementation DomainserviceDescribeActionLogResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DomainserviceDescribeActionLogResult* result = [[DomainserviceDescribeActionLogResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DomainserviceDescribeActionLogResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
