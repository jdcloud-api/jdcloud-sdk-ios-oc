/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

参数组管理
参数组管理相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKRds/RdsApiModel.h>


@implementation RdsDescribeBackupDownloadURLRequest
-(id) initWithRegion:(NSString *)regionId
fileName:(NSString*)fileName
urlExpirationSecond:(NSString*)urlExpirationSecond
backupId:(NSString*)backupId { 
    self.regionId = regionId;
    self.fileName = fileName;
    self.urlExpirationSecond = urlExpirationSecond;
    self.backupId = backupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
fileName:(NSString*)fileName
urlExpirationSecond:(NSString*)urlExpirationSecond
backupId:(NSString*)backupId { 
    self.regionId = regionId;
    self.version = version;
    self.fileName = fileName;
    self.urlExpirationSecond = urlExpirationSecond;
    self.backupId = backupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self fileName])
    {
        [result setValue:[self fileName] forKey:@"fileName"];
    }
    if([self urlExpirationSecond])
    {
        [result setValue:[self urlExpirationSecond] forKey:@"urlExpirationSecond"];
    }
    if([self backupId])
    {
        [result setValue:[self backupId] forKey:@"backupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.fileName = [dictionary objectForKey:@"fileName"];
    self.urlExpirationSecond = [dictionary objectForKey:@"urlExpirationSecond"];
    self.backupId = [dictionary objectForKey:@"backupId"];
    return self;
} 

@end
@implementation RdsDescribeBackupDownloadURLResult
-(id) initWithPublicURL:(NSString*) publicURL
        internalURL:(NSString*)internalURL { 
    self.publicURL = publicURL;               
    self.internalURL = internalURL;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publicURL])
    {
        [result setValue:[self publicURL] forKey:@"publicURL"];
    }
    if([self internalURL])
    {
        [result setValue:[self internalURL] forKey:@"internalURL"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publicURL = [dictionary objectForKey:@"publicURL"];
    self.internalURL = [dictionary objectForKey:@"internalURL"];
    return self;
} 

@end
@implementation RdsDescribeBackupsRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId
propertyAuto:(NSNumber*)propertyAuto
backupTypeFilter:(NSString*)backupTypeFilter
dbNameFilter:(NSString*)dbNameFilter
backupTimeRangeStartFilter:(NSString*)backupTimeRangeStartFilter
backupTimeRangeEndFilter:(NSString*)backupTimeRangeEndFilter
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    self.propertyAuto = propertyAuto;
    self.backupTypeFilter = backupTypeFilter;
    self.dbNameFilter = dbNameFilter;
    self.backupTimeRangeStartFilter = backupTimeRangeStartFilter;
    self.backupTimeRangeEndFilter = backupTimeRangeEndFilter;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId
propertyAuto:(NSNumber*)propertyAuto
backupTypeFilter:(NSString*)backupTypeFilter
dbNameFilter:(NSString*)dbNameFilter
backupTimeRangeStartFilter:(NSString*)backupTimeRangeStartFilter
backupTimeRangeEndFilter:(NSString*)backupTimeRangeEndFilter
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    self.propertyAuto = propertyAuto;
    self.backupTypeFilter = backupTypeFilter;
    self.dbNameFilter = dbNameFilter;
    self.backupTimeRangeStartFilter = backupTimeRangeStartFilter;
    self.backupTimeRangeEndFilter = backupTimeRangeEndFilter;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self propertyAuto])
    {
        [result setValue:[self propertyAuto] forKey:@"auto"];
    }
    if([self backupTypeFilter])
    {
        [result setValue:[self backupTypeFilter] forKey:@"backupTypeFilter"];
    }
    if([self dbNameFilter])
    {
        [result setValue:[self dbNameFilter] forKey:@"dbNameFilter"];
    }
    if([self backupTimeRangeStartFilter])
    {
        [result setValue:[self backupTimeRangeStartFilter] forKey:@"backupTimeRangeStartFilter"];
    }
    if([self backupTimeRangeEndFilter])
    {
        [result setValue:[self backupTimeRangeEndFilter] forKey:@"backupTimeRangeEndFilter"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.propertyAuto = [dictionary objectForKey:@"auto"];
    self.backupTypeFilter = [dictionary objectForKey:@"backupTypeFilter"];
    self.dbNameFilter = [dictionary objectForKey:@"dbNameFilter"];
    self.backupTimeRangeStartFilter = [dictionary objectForKey:@"backupTimeRangeStartFilter"];
    self.backupTimeRangeEndFilter = [dictionary objectForKey:@"backupTimeRangeEndFilter"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
@implementation RdsCreateBackupResult
-(id) initWithBackupId:(NSString*) backupId { 
    self.backupId = backupId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self backupId])
    {
        [result setValue:[self backupId] forKey:@"backupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.backupId = [dictionary objectForKey:@"backupId"];
    return self;
} 

@end
@implementation RdsDeleteBackupRequest
-(id) initWithRegion:(NSString *)regionId
backupId:(NSString*)backupId { 
    self.regionId = regionId;
    self.backupId = backupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
backupId:(NSString*)backupId { 
    self.regionId = regionId;
    self.version = version;
    self.backupId = backupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self backupId])
    {
        [result setValue:[self backupId] forKey:@"backupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.backupId = [dictionary objectForKey:@"backupId"];
    return self;
} 

@end
@implementation RdsDescribeErrorLogsRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeInterceptResultRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsEnableInterceptRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeInterceptResult
-(id) initWithAvailable:(NSNumber*) available { 
    self.available = available;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self available])
    {
        [result setValue:[self available] forKey:@"available"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.available = [dictionary objectForKey:@"available"];
    return self;
} 

@end
@implementation RdsDisableInterceptRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeInterceptRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsEnableTdeRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeTdeResult
-(id) initWithStatus:(NSString*) status { 
    self.status = status;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.status = [dictionary objectForKey:@"status"];
    return self;
} 

@end
@implementation RdsDescribeTdeRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyAuditRequest
-(id) initWithRegion:(NSString *)regionId
add:(NSString*)add
drop:(NSString*)drop
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.add = add;
    self.drop = drop;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
add:(NSString*)add
drop:(NSString*)drop
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.add = add;
    self.drop = drop;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self add])
    {
        [result setValue:[self add] forKey:@"add"];
    }
    if([self drop])
    {
        [result setValue:[self drop] forKey:@"drop"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.add = [dictionary objectForKey:@"add"];
    self.drop = [dictionary objectForKey:@"drop"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsEnableAuditRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDisableAuditRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeAuditDownloadURLResult
-(id) initWithPublicURL:(NSString*) publicURL
        internalURL:(NSString*)internalURL { 
    self.publicURL = publicURL;               
    self.internalURL = internalURL;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publicURL])
    {
        [result setValue:[self publicURL] forKey:@"publicURL"];
    }
    if([self internalURL])
    {
        [result setValue:[self internalURL] forKey:@"internalURL"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publicURL = [dictionary objectForKey:@"publicURL"];
    self.internalURL = [dictionary objectForKey:@"internalURL"];
    return self;
} 

@end
@implementation RdsDescribeAuditOptionsResult
-(id) initWithEnabled:(NSArray<NSString*>*) enabled
        disabled:(NSArray<NSString*>*)disabled { 
    self.enabled = enabled;               
    self.disabled = disabled;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self enabled])
    {
        [result setValue:[self enabled] forKey:@"enabled"];
    }
    if([self disabled])
    {
        [result setValue:[self disabled] forKey:@"disabled"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.enabled = [dictionary objectForKey:@"enabled"];
    self.disabled = [dictionary objectForKey:@"disabled"];
    return self;
} 

@end
@implementation RdsDescribeAuditFilesRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDeleteAuditRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeAuditDownloadURLRequest
-(id) initWithRegion:(NSString *)regionId
fileName:(NSString*)fileName
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.fileName = fileName;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
fileName:(NSString*)fileName
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.fileName = fileName;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self fileName])
    {
        [result setValue:[self fileName] forKey:@"fileName"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.fileName = [dictionary objectForKey:@"fileName"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateAuditRequest
-(id) initWithRegion:(NSString *)regionId
enabled:(NSString*)enabled
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.enabled = enabled;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
enabled:(NSString*)enabled
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.enabled = enabled;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self enabled])
    {
        [result setValue:[self enabled] forKey:@"enabled"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.enabled = [dictionary objectForKey:@"enabled"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeAuditRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeAuditOptionsRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.name = name;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeAuditResult
-(id) initWithEnabled:(NSArray<NSString*>*) enabled { 
    self.enabled = enabled;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self enabled])
    {
        [result setValue:[self enabled] forKey:@"enabled"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.enabled = [dictionary objectForKey:@"enabled"];
    return self;
} 

@end
@implementation RdsDescribeBinlogDownloadURLRequest
-(id) initWithRegion:(NSString *)regionId
seconds:(NSNumber*)seconds
instanceId:(NSString*)instanceId
binlogBackupId:(NSString*)binlogBackupId { 
    self.regionId = regionId;
    self.seconds = seconds;
    self.instanceId = instanceId;
    self.binlogBackupId = binlogBackupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
seconds:(NSNumber*)seconds
instanceId:(NSString*)instanceId
binlogBackupId:(NSString*)binlogBackupId { 
    self.regionId = regionId;
    self.version = version;
    self.seconds = seconds;
    self.instanceId = instanceId;
    self.binlogBackupId = binlogBackupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self seconds])
    {
        [result setValue:[self seconds] forKey:@"seconds"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self binlogBackupId])
    {
        [result setValue:[self binlogBackupId] forKey:@"binlogBackupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.seconds = [dictionary objectForKey:@"seconds"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.binlogBackupId = [dictionary objectForKey:@"binlogBackupId"];
    return self;
} 

@end
@implementation RdsDescribeBinlogDownloadURLResult
-(id) initWithPublicURL:(NSString*) publicURL
        internalURL:(NSString*)internalURL { 
    self.publicURL = publicURL;               
    self.internalURL = internalURL;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publicURL])
    {
        [result setValue:[self publicURL] forKey:@"publicURL"];
    }
    if([self internalURL])
    {
        [result setValue:[self internalURL] forKey:@"internalURL"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publicURL = [dictionary objectForKey:@"publicURL"];
    self.internalURL = [dictionary objectForKey:@"internalURL"];
    return self;
} 

@end
@implementation RdsDescribeBinlogsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsClearBinlogsRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeAzsResult
-(id) initWithAzs:(NSArray<NSString*>*) azs { 
    self.azs = azs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self azs])
    {
        [result setValue:[self azs] forKey:@"azs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.azs = [dictionary objectForKey:@"azs"];
    return self;
} 

@end
@implementation RdsDescribeAzsRequest
-(id) initWithRegion:(NSString *)regionId
engine:(NSString*)engine { 
    self.regionId = regionId;
    self.engine = engine;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
engine:(NSString*)engine { 
    self.regionId = regionId;
    self.version = version;
    self.engine = engine;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self engine])
    {
        [result setValue:[self engine] forKey:@"engine"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.engine = [dictionary objectForKey:@"engine"];
    return self;
} 

@end
@implementation RdsGetUploadKeyRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsSetImportFileSharedRequest
-(id) initWithRegion:(NSString *)regionId
shared:(NSString*)shared
instanceId:(NSString*)instanceId
fileName:(NSString*)fileName { 
    self.regionId = regionId;
    self.shared = shared;
    self.instanceId = instanceId;
    self.fileName = fileName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
shared:(NSString*)shared
instanceId:(NSString*)instanceId
fileName:(NSString*)fileName { 
    self.regionId = regionId;
    self.version = version;
    self.shared = shared;
    self.instanceId = instanceId;
    self.fileName = fileName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self shared])
    {
        [result setValue:[self shared] forKey:@"shared"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self fileName])
    {
        [result setValue:[self fileName] forKey:@"fileName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.shared = [dictionary objectForKey:@"shared"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.fileName = [dictionary objectForKey:@"fileName"];
    return self;
} 

@end
@implementation RdsDeleteImportFileRequest
-(id) initWithRegion:(NSString *)regionId
sharedFileGid:(NSString*)sharedFileGid
instanceId:(NSString*)instanceId
fileName:(NSString*)fileName { 
    self.regionId = regionId;
    self.sharedFileGid = sharedFileGid;
    self.instanceId = instanceId;
    self.fileName = fileName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
sharedFileGid:(NSString*)sharedFileGid
instanceId:(NSString*)instanceId
fileName:(NSString*)fileName { 
    self.regionId = regionId;
    self.version = version;
    self.sharedFileGid = sharedFileGid;
    self.instanceId = instanceId;
    self.fileName = fileName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self sharedFileGid])
    {
        [result setValue:[self sharedFileGid] forKey:@"sharedFileGid"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self fileName])
    {
        [result setValue:[self fileName] forKey:@"fileName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.sharedFileGid = [dictionary objectForKey:@"sharedFileGid"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.fileName = [dictionary objectForKey:@"fileName"];
    return self;
} 

@end
@implementation RdsGetUploadKeyResult
-(id) initWithKey:(NSString*) key { 
    self.key = key;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self key])
    {
        [result setValue:[self key] forKey:@"key"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.key = [dictionary objectForKey:@"key"];
    return self;
} 

@end
@implementation RdsDescribeImportFilesRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyWhiteListRequest
-(id) initWithRegion:(NSString *)regionId
ips:(NSString*)ips
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.ips = ips;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
ips:(NSString*)ips
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.ips = ips;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self ips])
    {
        [result setValue:[self ips] forKey:@"ips"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.ips = [dictionary objectForKey:@"ips"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeWhiteListRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeLogDownloadURLRequest
-(id) initWithRegion:(NSString *)regionId
seconds:(NSNumber*)seconds
instanceId:(NSString*)instanceId
logId:(NSString*)logId { 
    self.regionId = regionId;
    self.seconds = seconds;
    self.instanceId = instanceId;
    self.logId = logId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
seconds:(NSNumber*)seconds
instanceId:(NSString*)instanceId
logId:(NSString*)logId { 
    self.regionId = regionId;
    self.version = version;
    self.seconds = seconds;
    self.instanceId = instanceId;
    self.logId = logId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self seconds])
    {
        [result setValue:[self seconds] forKey:@"seconds"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self logId])
    {
        [result setValue:[self logId] forKey:@"logId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.seconds = [dictionary objectForKey:@"seconds"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.logId = [dictionary objectForKey:@"logId"];
    return self;
} 

@end
@implementation RdsDescribeLogDownloadURLResult
-(id) initWithPublicURL:(NSString*) publicURL
        internalURL:(NSString*)internalURL { 
    self.publicURL = publicURL;               
    self.internalURL = internalURL;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publicURL])
    {
        [result setValue:[self publicURL] forKey:@"publicURL"];
    }
    if([self internalURL])
    {
        [result setValue:[self internalURL] forKey:@"internalURL"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publicURL = [dictionary objectForKey:@"publicURL"];
    self.internalURL = [dictionary objectForKey:@"internalURL"];
    return self;
} 

@end
@implementation RdsUpdateLogDownloadURLInternalRequest
-(id) initWithRegion:(NSString *)regionId
seconds:(NSNumber*)seconds
instanceId:(NSString*)instanceId
logId:(NSString*)logId { 
    self.regionId = regionId;
    self.seconds = seconds;
    self.instanceId = instanceId;
    self.logId = logId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
seconds:(NSNumber*)seconds
instanceId:(NSString*)instanceId
logId:(NSString*)logId { 
    self.regionId = regionId;
    self.version = version;
    self.seconds = seconds;
    self.instanceId = instanceId;
    self.logId = logId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self seconds])
    {
        [result setValue:[self seconds] forKey:@"seconds"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self logId])
    {
        [result setValue:[self logId] forKey:@"logId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.seconds = [dictionary objectForKey:@"seconds"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.logId = [dictionary objectForKey:@"logId"];
    return self;
} 

@end
@implementation RdsUpdateLogDownloadURLInternalResult
-(id) initWithPublicURL:(NSString*) publicURL
        internalURL:(NSString*)internalURL { 
    self.publicURL = publicURL;               
    self.internalURL = internalURL;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self publicURL])
    {
        [result setValue:[self publicURL] forKey:@"publicURL"];
    }
    if([self internalURL])
    {
        [result setValue:[self internalURL] forKey:@"internalURL"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.publicURL = [dictionary objectForKey:@"publicURL"];
    self.internalURL = [dictionary objectForKey:@"internalURL"];
    return self;
} 

@end
@implementation RdsDisableInternetAccessRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyInstanceSpecResult
-(id) initWithOrderId:(NSString*) orderId { 
    self.orderId = orderId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self orderId])
    {
        [result setValue:[self orderId] forKey:@"orderId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.orderId = [dictionary objectForKey:@"orderId"];
    return self;
} 

@end
@implementation RdsCreateROInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instanceName:(NSString*)instanceName
instanceClass:(NSString*)instanceClass
instanceStorageType:(NSString*)instanceStorageType
instanceStorageGB:(NSNumber*)instanceStorageGB
azId:(NSString*)azId
vpcId:(NSString*)vpcId
subnetId:(NSString*)subnetId
parameterGroup:(NSString*)parameterGroup
storageEncrypted:(NSNumber*)storageEncrypted
count:(NSNumber*)count
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceName = instanceName;
    self.instanceClass = instanceClass;
    self.instanceStorageType = instanceStorageType;
    self.instanceStorageGB = instanceStorageGB;
    self.azId = azId;
    self.vpcId = vpcId;
    self.subnetId = subnetId;
    self.parameterGroup = parameterGroup;
    self.storageEncrypted = storageEncrypted;
    self.count = count;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceName:(NSString*)instanceName
instanceClass:(NSString*)instanceClass
instanceStorageType:(NSString*)instanceStorageType
instanceStorageGB:(NSNumber*)instanceStorageGB
azId:(NSString*)azId
vpcId:(NSString*)vpcId
subnetId:(NSString*)subnetId
parameterGroup:(NSString*)parameterGroup
storageEncrypted:(NSNumber*)storageEncrypted
count:(NSNumber*)count
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceName = instanceName;
    self.instanceClass = instanceClass;
    self.instanceStorageType = instanceStorageType;
    self.instanceStorageGB = instanceStorageGB;
    self.azId = azId;
    self.vpcId = vpcId;
    self.subnetId = subnetId;
    self.parameterGroup = parameterGroup;
    self.storageEncrypted = storageEncrypted;
    self.count = count;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceName])
    {
        [result setValue:[self instanceName] forKey:@"instanceName"];
    }
    if([self instanceClass])
    {
        [result setValue:[self instanceClass] forKey:@"instanceClass"];
    }
    if([self instanceStorageType])
    {
        [result setValue:[self instanceStorageType] forKey:@"instanceStorageType"];
    }
    if([self instanceStorageGB])
    {
        [result setValue:[self instanceStorageGB] forKey:@"instanceStorageGB"];
    }
    if([self azId])
    {
        [result setValue:[self azId] forKey:@"azId"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    if([self parameterGroup])
    {
        [result setValue:[self parameterGroup] forKey:@"parameterGroup"];
    }
    if([self storageEncrypted])
    {
        [result setValue:[self storageEncrypted] forKey:@"storageEncrypted"];
    }
    if([self count])
    {
        [result setValue:[self count] forKey:@"count"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceName = [dictionary objectForKey:@"instanceName"];
    self.instanceClass = [dictionary objectForKey:@"instanceClass"];
    self.instanceStorageType = [dictionary objectForKey:@"instanceStorageType"];
    self.instanceStorageGB = [dictionary objectForKey:@"instanceStorageGB"];
    self.azId = [dictionary objectForKey:@"azId"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    self.parameterGroup = [dictionary objectForKey:@"parameterGroup"];
    self.storageEncrypted = [dictionary objectForKey:@"storageEncrypted"];
    self.count = [dictionary objectForKey:@"count"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateInstanceResult
-(id) initWithInstanceId:(NSString*) instanceId { 
    self.instanceId = instanceId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsEnableInternetAccessRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateInstanceByTimeResult
-(id) initWithInstanceId:(NSString*) instanceId { 
    self.instanceId = instanceId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyInstanceNameRequest
-(id) initWithRegion:(NSString *)regionId
instanceName:(NSString*)instanceName
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceName = instanceName;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceName:(NSString*)instanceName
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceName = instanceName;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceName])
    {
        [result setValue:[self instanceName] forKey:@"instanceName"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceName = [dictionary objectForKey:@"instanceName"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeLatestRestoreTimeRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsRestoreInstanceRequest
-(id) initWithRegion:(NSString *)regionId
backupId:(NSString*)backupId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.backupId = backupId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
backupId:(NSString*)backupId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.backupId = backupId;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self backupId])
    {
        [result setValue:[self backupId] forKey:@"backupId"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.backupId = [dictionary objectForKey:@"backupId"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyParameterGroupRequest
-(id) initWithRegion:(NSString *)regionId
parameterGroupId:(NSString*)parameterGroupId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.parameterGroupId = parameterGroupId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameterGroupId:(NSString*)parameterGroupId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.parameterGroupId = parameterGroupId;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyConnectionModeRequest
-(id) initWithRegion:(NSString *)regionId
connectionMode:(NSString*)connectionMode
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.connectionMode = connectionMode;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
connectionMode:(NSString*)connectionMode
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.connectionMode = connectionMode;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self connectionMode])
    {
        [result setValue:[self connectionMode] forKey:@"connectionMode"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.connectionMode = [dictionary objectForKey:@"connectionMode"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsFailoverInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateInstanceFromBackupResult
-(id) initWithInstanceId:(NSString*) instanceId { 
    self.instanceId = instanceId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsRebootInstanceRequest
-(id) initWithRegion:(NSString *)regionId
rebootMaster:(NSNumber*)rebootMaster
rebootSlave:(NSNumber*)rebootSlave
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.rebootMaster = rebootMaster;
    self.rebootSlave = rebootSlave;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
rebootMaster:(NSNumber*)rebootMaster
rebootSlave:(NSNumber*)rebootSlave
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.rebootMaster = rebootMaster;
    self.rebootSlave = rebootSlave;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self rebootMaster])
    {
        [result setValue:[self rebootMaster] forKey:@"rebootMaster"];
    }
    if([self rebootSlave])
    {
        [result setValue:[self rebootSlave] forKey:@"rebootSlave"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.rebootMaster = [dictionary objectForKey:@"rebootMaster"];
    self.rebootSlave = [dictionary objectForKey:@"rebootSlave"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeInstanceAttributesRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyBackupPolicyRequest
-(id) initWithRegion:(NSString *)regionId
startWindow:(NSString*)startWindow
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.startWindow = startWindow;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
startWindow:(NSString*)startWindow
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.startWindow = startWindow;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self startWindow])
    {
        [result setValue:[self startWindow] forKey:@"startWindow"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.startWindow = [dictionary objectForKey:@"startWindow"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDeleteInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyInstanceSpecRequest
-(id) initWithRegion:(NSString *)regionId
rdsNewInstanceClass:(NSString*)rdsNewInstanceClass
rdsNewInstanceStorageGB:(NSNumber*)rdsNewInstanceStorageGB
rdsNewInstanceStorageType:(NSString*)rdsNewInstanceStorageType
storageEncrypted:(NSNumber*)storageEncrypted
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.rdsNewInstanceClass = rdsNewInstanceClass;
    self.rdsNewInstanceStorageGB = rdsNewInstanceStorageGB;
    self.rdsNewInstanceStorageType = rdsNewInstanceStorageType;
    self.storageEncrypted = storageEncrypted;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
rdsNewInstanceClass:(NSString*)rdsNewInstanceClass
rdsNewInstanceStorageGB:(NSNumber*)rdsNewInstanceStorageGB
rdsNewInstanceStorageType:(NSString*)rdsNewInstanceStorageType
storageEncrypted:(NSNumber*)storageEncrypted
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.rdsNewInstanceClass = rdsNewInstanceClass;
    self.rdsNewInstanceStorageGB = rdsNewInstanceStorageGB;
    self.rdsNewInstanceStorageType = rdsNewInstanceStorageType;
    self.storageEncrypted = storageEncrypted;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self rdsNewInstanceClass])
    {
        [result setValue:[self rdsNewInstanceClass] forKey:@"newInstanceClass"];
    }
    if([self rdsNewInstanceStorageGB])
    {
        [result setValue:[self rdsNewInstanceStorageGB] forKey:@"newInstanceStorageGB"];
    }
    if([self rdsNewInstanceStorageType])
    {
        [result setValue:[self rdsNewInstanceStorageType] forKey:@"newInstanceStorageType"];
    }
    if([self storageEncrypted])
    {
        [result setValue:[self storageEncrypted] forKey:@"storageEncrypted"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.rdsNewInstanceClass = [dictionary objectForKey:@"newInstanceClass"];
    self.rdsNewInstanceStorageGB = [dictionary objectForKey:@"newInstanceStorageGB"];
    self.rdsNewInstanceStorageType = [dictionary objectForKey:@"newInstanceStorageType"];
    self.storageEncrypted = [dictionary objectForKey:@"storageEncrypted"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateROInstanceResult
-(id) initWithRoInstanceId:(NSArray<NSString*>*) roInstanceId
        orderId:(NSString*)orderId { 
    self.roInstanceId = roInstanceId;               
    self.orderId = orderId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self roInstanceId])
    {
        [result setValue:[self roInstanceId] forKey:@"roInstanceId"];
    }
    if([self orderId])
    {
        [result setValue:[self orderId] forKey:@"orderId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.roInstanceId = [dictionary objectForKey:@"roInstanceId"];
    self.orderId = [dictionary objectForKey:@"orderId"];
    return self;
} 

@end
@implementation RdsDescribeBackupPolicyRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeLatestRestoreTimeResult
-(id) initWithLatestRestoreTime:(NSString*) latestRestoreTime { 
    self.latestRestoreTime = latestRestoreTime;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self latestRestoreTime])
    {
        [result setValue:[self latestRestoreTime] forKey:@"latestRestoreTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.latestRestoreTime = [dictionary objectForKey:@"latestRestoreTime"];
    return self;
} 

@end
@implementation RdsDescribeBackupPolicyResult
-(id) initWithStartWindow:(NSString*) startWindow
        retentionPeriod:(NSNumber*)retentionPeriod
        cycleMode:(NSNumber*)cycleMode
        backupBinlog:(NSString*)backupBinlog { 
    self.startWindow = startWindow;               
    self.retentionPeriod = retentionPeriod;               
    self.cycleMode = cycleMode;               
    self.backupBinlog = backupBinlog;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self startWindow])
    {
        [result setValue:[self startWindow] forKey:@"startWindow"];
    }
    if([self retentionPeriod])
    {
        [result setValue:[self retentionPeriod] forKey:@"retentionPeriod"];
    }
    if([self cycleMode])
    {
        [result setValue:[self cycleMode] forKey:@"cycleMode"];
    }
    if([self backupBinlog])
    {
        [result setValue:[self backupBinlog] forKey:@"backupBinlog"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.startWindow = [dictionary objectForKey:@"startWindow"];
    self.retentionPeriod = [dictionary objectForKey:@"retentionPeriod"];
    self.cycleMode = [dictionary objectForKey:@"cycleMode"];
    self.backupBinlog = [dictionary objectForKey:@"backupBinlog"];
    return self;
} 

@end
@implementation RdsExchangeInstanceDnsRequest
-(id) initWithRegion:(NSString *)regionId
targetInstanceId:(NSString*)targetInstanceId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.targetInstanceId = targetInstanceId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
targetInstanceId:(NSString*)targetInstanceId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.targetInstanceId = targetInstanceId;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self targetInstanceId])
    {
        [result setValue:[self targetInstanceId] forKey:@"targetInstanceId"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.targetInstanceId = [dictionary objectForKey:@"targetInstanceId"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDeleteDatabaseRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation RdsDescribeDatabasesRequest
-(id) initWithRegion:(NSString *)regionId
dbName:(NSString*)dbName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.dbName = dbName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
dbName:(NSString*)dbName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.dbName = dbName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dbName = [dictionary objectForKey:@"dbName"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateDatabaseRequest
-(id) initWithRegion:(NSString *)regionId
dbName:(NSString*)dbName
characterSetName:(NSString*)characterSetName
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.dbName = dbName;
    self.characterSetName = characterSetName;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
dbName:(NSString*)dbName
characterSetName:(NSString*)characterSetName
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.dbName = dbName;
    self.characterSetName = characterSetName;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    if([self characterSetName])
    {
        [result setValue:[self characterSetName] forKey:@"characterSetName"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dbName = [dictionary objectForKey:@"dbName"];
    self.characterSetName = [dictionary objectForKey:@"characterSetName"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsRestoreDatabaseFromFileRequest
-(id) initWithRegion:(NSString *)regionId
sharedFileGid:(NSString*)sharedFileGid
fileName:(NSString*)fileName
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.sharedFileGid = sharedFileGid;
    self.fileName = fileName;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
sharedFileGid:(NSString*)sharedFileGid
fileName:(NSString*)fileName
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.sharedFileGid = sharedFileGid;
    self.fileName = fileName;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self sharedFileGid])
    {
        [result setValue:[self sharedFileGid] forKey:@"sharedFileGid"];
    }
    if([self fileName])
    {
        [result setValue:[self fileName] forKey:@"fileName"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.sharedFileGid = [dictionary objectForKey:@"sharedFileGid"];
    self.fileName = [dictionary objectForKey:@"fileName"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation RdsRestoreDatabaseFromBackupRequest
-(id) initWithRegion:(NSString *)regionId
backupId:(NSString*)backupId
backupFileName:(NSString*)backupFileName
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.backupId = backupId;
    self.backupFileName = backupFileName;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
backupId:(NSString*)backupId
backupFileName:(NSString*)backupFileName
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.backupId = backupId;
    self.backupFileName = backupFileName;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self backupId])
    {
        [result setValue:[self backupId] forKey:@"backupId"];
    }
    if([self backupFileName])
    {
        [result setValue:[self backupFileName] forKey:@"backupFileName"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.backupId = [dictionary objectForKey:@"backupId"];
    self.backupFileName = [dictionary objectForKey:@"backupFileName"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation RdsRestoreDatabaseFromOSSRequest
-(id) initWithRegion:(NSString *)regionId
ossURL:(NSString*)ossURL
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.ossURL = ossURL;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
ossURL:(NSString*)ossURL
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.ossURL = ossURL;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self ossURL])
    {
        [result setValue:[self ossURL] forKey:@"ossURL"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.ossURL = [dictionary objectForKey:@"ossURL"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation RdsCreateBackupSynchronicityRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId
destRegion:(NSString*)destRegion { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    self.destRegion = destRegion;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId
destRegion:(NSString*)destRegion { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    self.destRegion = destRegion;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self destRegion])
    {
        [result setValue:[self destRegion] forKey:@"destRegion"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.destRegion = [dictionary objectForKey:@"destRegion"];
    return self;
} 

@end
@implementation RdsCreateInstanceByTimeInCrossRegionResult
-(id) initWithInstanceId:(NSString*) instanceId { 
    self.instanceId = instanceId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateBackupSynchronicityResult
-(id) initWithServiceId:(NSString*) serviceId { 
    self.serviceId = serviceId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serviceId])
    {
        [result setValue:[self serviceId] forKey:@"serviceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serviceId = [dictionary objectForKey:@"serviceId"];
    return self;
} 

@end
@implementation RdsDescribeBackupSynchronicitiesRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
@implementation RdsDeleteBackupSynchronicityRequest
-(id) initWithRegion:(NSString *)regionId
serviceId:(NSString*)serviceId { 
    self.regionId = regionId;
    self.serviceId = serviceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
serviceId:(NSString*)serviceId { 
    self.regionId = regionId;
    self.version = version;
    self.serviceId = serviceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self serviceId])
    {
        [result setValue:[self serviceId] forKey:@"serviceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serviceId = [dictionary objectForKey:@"serviceId"];
    return self;
} 

@end
@implementation RdsCreateAccountRequest
-(id) initWithRegion:(NSString *)regionId
accountName:(NSString*)accountName
accountPassword:(NSString*)accountPassword
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.accountName = accountName;
    self.accountPassword = accountPassword;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
accountName:(NSString*)accountName
accountPassword:(NSString*)accountPassword
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.accountName = accountName;
    self.accountPassword = accountPassword;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    if([self accountPassword])
    {
        [result setValue:[self accountPassword] forKey:@"accountPassword"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.accountName = [dictionary objectForKey:@"accountName"];
    self.accountPassword = [dictionary objectForKey:@"accountPassword"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsCreateSuperAccountRequest
-(id) initWithRegion:(NSString *)regionId
accountName:(NSString*)accountName
accountPassword:(NSString*)accountPassword
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.accountName = accountName;
    self.accountPassword = accountPassword;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
accountName:(NSString*)accountName
accountPassword:(NSString*)accountPassword
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.accountName = accountName;
    self.accountPassword = accountPassword;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    if([self accountPassword])
    {
        [result setValue:[self accountPassword] forKey:@"accountPassword"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.accountName = [dictionary objectForKey:@"accountName"];
    self.accountPassword = [dictionary objectForKey:@"accountPassword"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsResetPasswordRequest
-(id) initWithRegion:(NSString *)regionId
accountPassword:(NSString*)accountPassword
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.accountPassword = accountPassword;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
accountPassword:(NSString*)accountPassword
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.accountPassword = accountPassword;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self accountPassword])
    {
        [result setValue:[self accountPassword] forKey:@"accountPassword"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.accountPassword = [dictionary objectForKey:@"accountPassword"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation RdsRevokePrivilegeRequest
-(id) initWithRegion:(NSString *)regionId
dbNames:(NSArray<NSString*>*)dbNames
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.dbNames = dbNames;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
dbNames:(NSArray<NSString*>*)dbNames
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.dbNames = dbNames;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self dbNames])
    {
        [result setValue:[self dbNames] forKey:@"dbNames"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dbNames = [dictionary objectForKey:@"dbNames"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation RdsDeleteAccountRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation RdsDescribeAccountsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsAlterTableWithOnlineDDLRequest
-(id) initWithRegion:(NSString *)regionId
database:(NSString*)database
table:(NSString*)table
command:(NSString*)command
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.database = database;
    self.table = table;
    self.command = command;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
database:(NSString*)database
table:(NSString*)table
command:(NSString*)command
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.database = database;
    self.table = table;
    self.command = command;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self database])
    {
        [result setValue:[self database] forKey:@"database"];
    }
    if([self table])
    {
        [result setValue:[self table] forKey:@"table"];
    }
    if([self command])
    {
        [result setValue:[self command] forKey:@"command"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.database = [dictionary objectForKey:@"database"];
    self.table = [dictionary objectForKey:@"table"];
    self.command = [dictionary objectForKey:@"command"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeSlowLogAttributesRequest
-(id) initWithRegion:(NSString *)regionId
startTime:(NSString*)startTime
endTime:(NSString*)endTime
dbName:(NSString*)dbName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.startTime = startTime;
    self.endTime = endTime;
    self.dbName = dbName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
startTime:(NSString*)startTime
endTime:(NSString*)endTime
dbName:(NSString*)dbName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.startTime = startTime;
    self.endTime = endTime;
    self.dbName = dbName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeActiveQueryPerformanceRequest
-(id) initWithRegion:(NSString *)regionId
db:(NSString*)db
threshold:(NSNumber*)threshold
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.db = db;
    self.threshold = threshold;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
db:(NSString*)db
threshold:(NSNumber*)threshold
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.db = db;
    self.threshold = threshold;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self db])
    {
        [result setValue:[self db] forKey:@"db"];
    }
    if([self threshold])
    {
        [result setValue:[self threshold] forKey:@"threshold"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.db = [dictionary objectForKey:@"db"];
    self.threshold = [dictionary objectForKey:@"threshold"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeIndexPerformanceRequest
-(id) initWithRegion:(NSString *)regionId
queryType:(NSString*)queryType
db:(NSString*)db
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.queryType = queryType;
    self.db = db;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
queryType:(NSString*)queryType
db:(NSString*)db
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.queryType = queryType;
    self.db = db;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self queryType])
    {
        [result setValue:[self queryType] forKey:@"queryType"];
    }
    if([self db])
    {
        [result setValue:[self db] forKey:@"db"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.queryType = [dictionary objectForKey:@"queryType"];
    self.db = [dictionary objectForKey:@"db"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeSlowLogsRequest
-(id) initWithRegion:(NSString *)regionId
startTime:(NSString*)startTime
endTime:(NSString*)endTime
dbName:(NSString*)dbName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.startTime = startTime;
    self.endTime = endTime;
    self.dbName = dbName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
startTime:(NSString*)startTime
endTime:(NSString*)endTime
dbName:(NSString*)dbName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.startTime = startTime;
    self.endTime = endTime;
    self.dbName = dbName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeQueryPerformanceRequest
-(id) initWithRegion:(NSString *)regionId
queryType:(NSString*)queryType
threshold:(NSNumber*)threshold
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.queryType = queryType;
    self.threshold = threshold;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
queryType:(NSString*)queryType
threshold:(NSNumber*)threshold
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.queryType = queryType;
    self.threshold = threshold;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self queryType])
    {
        [result setValue:[self queryType] forKey:@"queryType"];
    }
    if([self threshold])
    {
        [result setValue:[self threshold] forKey:@"threshold"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.queryType = [dictionary objectForKey:@"queryType"];
    self.threshold = [dictionary objectForKey:@"threshold"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeParametersRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsDescribeParameterGroupParametersRequest
-(id) initWithRegion:(NSString *)regionId
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.parameterGroupId = parameterGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.parameterGroupId = parameterGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsModifyParameterGroupAttributeRequest
-(id) initWithRegion:(NSString *)regionId
parameterGroupName:(NSString*)parameterGroupName
descriptionValue:(NSString*)descriptionValue
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.parameterGroupName = parameterGroupName;
    self.descriptionValue = descriptionValue;
    self.parameterGroupId = parameterGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameterGroupName:(NSString*)parameterGroupName
descriptionValue:(NSString*)descriptionValue
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.parameterGroupName = parameterGroupName;
    self.descriptionValue = descriptionValue;
    self.parameterGroupId = parameterGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameterGroupName])
    {
        [result setValue:[self parameterGroupName] forKey:@"parameterGroupName"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupName = [dictionary objectForKey:@"parameterGroupName"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsDescribeParameterGroupAttachedInstancesRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.parameterGroupId = parameterGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.parameterGroupId = parameterGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsCopyParameterGroupRequest
-(id) initWithRegion:(NSString *)regionId
parameterGroupId:(NSString*)parameterGroupId
parameterGroupName:(NSString*)parameterGroupName
descriptionValue:(NSString*)descriptionValue { 
    self.regionId = regionId;
    self.parameterGroupId = parameterGroupId;
    self.parameterGroupName = parameterGroupName;
    self.descriptionValue = descriptionValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameterGroupId:(NSString*)parameterGroupId
parameterGroupName:(NSString*)parameterGroupName
descriptionValue:(NSString*)descriptionValue { 
    self.regionId = regionId;
    self.version = version;
    self.parameterGroupId = parameterGroupId;
    self.parameterGroupName = parameterGroupName;
    self.descriptionValue = descriptionValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    if([self parameterGroupName])
    {
        [result setValue:[self parameterGroupName] forKey:@"parameterGroupName"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    self.parameterGroupName = [dictionary objectForKey:@"parameterGroupName"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
} 

@end
@implementation RdsCreateParameterGroupRequest
-(id) initWithRegion:(NSString *)regionId
engine:(NSString*)engine
engineVersion:(NSString*)engineVersion
parameterGroupName:(NSString*)parameterGroupName
descriptionValue:(NSString*)descriptionValue { 
    self.regionId = regionId;
    self.engine = engine;
    self.engineVersion = engineVersion;
    self.parameterGroupName = parameterGroupName;
    self.descriptionValue = descriptionValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
engine:(NSString*)engine
engineVersion:(NSString*)engineVersion
parameterGroupName:(NSString*)parameterGroupName
descriptionValue:(NSString*)descriptionValue { 
    self.regionId = regionId;
    self.version = version;
    self.engine = engine;
    self.engineVersion = engineVersion;
    self.parameterGroupName = parameterGroupName;
    self.descriptionValue = descriptionValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self engine])
    {
        [result setValue:[self engine] forKey:@"engine"];
    }
    if([self engineVersion])
    {
        [result setValue:[self engineVersion] forKey:@"engineVersion"];
    }
    if([self parameterGroupName])
    {
        [result setValue:[self parameterGroupName] forKey:@"parameterGroupName"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.engine = [dictionary objectForKey:@"engine"];
    self.engineVersion = [dictionary objectForKey:@"engineVersion"];
    self.parameterGroupName = [dictionary objectForKey:@"parameterGroupName"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
} 

@end
@implementation RdsDeleteParameterGroupRequest
-(id) initWithRegion:(NSString *)regionId
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.parameterGroupId = parameterGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.parameterGroupId = parameterGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsDescribeParameterModifyRecordsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    self.parameterGroupId = parameterGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
startTime:(NSString*)startTime
endTime:(NSString*)endTime
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.startTime = startTime;
    self.endTime = endTime;
    self.parameterGroupId = parameterGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsDescribeParameterGroupsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
@implementation RdsCreateParameterGroupResult
-(id) initWithParameterGroupId:(NSString*) parameterGroupId { 
    self.parameterGroupId = parameterGroupId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsCopyParameterGroupResult
-(id) initWithParameterGroupId:(NSString*) parameterGroupId { 
    self.parameterGroupId = parameterGroupId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsDescribeBackupsResult
-(id) initWithBackup:(NSArray<Backup*>*) backup
        totalCount:(NSNumber*)totalCount { 
    self.backup = backup;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self backup])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self backup] count]; i++) {
            Backup* item = [[self backup] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"backup"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* backupArray = [dictionary objectForKey:@"backup"];
    if(backupArray&&![backupArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [backupArray count];i++)
        {
        Backup* item = [[Backup alloc]initWithDic:[backupArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.backup = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation RdsDeleteBackupResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteBackupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteBackupResult* result = [[RdsDeleteBackupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteBackupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeBackupsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeBackupsResult* result = [[RdsDescribeBackupsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeBackupsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCreateBackupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateBackupResult* result = [[RdsCreateBackupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateBackupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeBackupDownloadURLResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeBackupDownloadURLResult* result = [[RdsDescribeBackupDownloadURLResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeBackupDownloadURLResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateBackupRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId
backupSpec:(BackupSpec*)backupSpec { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    self.backupSpec = backupSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId
backupSpec:(BackupSpec*)backupSpec { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    self.backupSpec = backupSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self backupSpec])
    {
        [result setValue:[[self backupSpec] dictionary]forKey:@"backupSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.backupSpec = [[BackupSpec alloc]initWithDic:[dictionary objectForKey:@"backupSpec"]];
    return self;
} 

@end
@implementation RdsDescribeErrorLogsResult
-(id) initWithErrorLogs:(NSArray<ErrorLog*>*) errorLogs { 
    self.errorLogs = errorLogs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self errorLogs])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self errorLogs] count]; i++) {
            ErrorLog* item = [[self errorLogs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"errorLogs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* errorLogsArray = [dictionary objectForKey:@"errorLogs"];
    if(errorLogsArray&&![errorLogsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [errorLogsArray count];i++)
        {
        ErrorLog* item = [[ErrorLog alloc]initWithDic:[errorLogsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.errorLogs = propertyArray;
    }
    return self;
} 

@end
  
@implementation RdsDescribeErrorLogsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeErrorLogsResult* result = [[RdsDescribeErrorLogsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeErrorLogsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDisableInterceptResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDescribeInterceptResultResult
-(id) initWithInterceptResult:(NSArray<InterceptResult*>*) interceptResult
        totalCount:(NSNumber*)totalCount { 
    self.interceptResult = interceptResult;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self interceptResult])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self interceptResult] count]; i++) {
            InterceptResult* item = [[self interceptResult] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"interceptResult"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* interceptResultArray = [dictionary objectForKey:@"interceptResult"];
    if(interceptResultArray&&![interceptResultArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [interceptResultArray count];i++)
        {
        InterceptResult* item = [[InterceptResult alloc]initWithDic:[interceptResultArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.interceptResult = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation RdsEnableInterceptResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDescribeInterceptResultResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeInterceptResultResult* result = [[RdsDescribeInterceptResultResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeInterceptResultResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsEnableInterceptResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsEnableInterceptResult* result = [[RdsEnableInterceptResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsEnableInterceptResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeInterceptResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeInterceptResult* result = [[RdsDescribeInterceptResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeInterceptResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDisableInterceptResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDisableInterceptResult* result = [[RdsDisableInterceptResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDisableInterceptResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeTdeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeTdeResult* result = [[RdsDescribeTdeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeTdeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsEnableTdeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsEnableTdeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsEnableTdeResult* result = [[RdsEnableTdeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsEnableTdeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDeleteAuditResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDescribeAuditFilesResult
-(id) initWithAuditFiles:(NSArray<AuditFile*>*) auditFiles { 
    self.auditFiles = auditFiles;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self auditFiles])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self auditFiles] count]; i++) {
            AuditFile* item = [[self auditFiles] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"auditFiles"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* auditFilesArray = [dictionary objectForKey:@"auditFiles"];
    if(auditFilesArray&&![auditFilesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [auditFilesArray count];i++)
        {
        AuditFile* item = [[AuditFile alloc]initWithDic:[auditFilesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.auditFiles = propertyArray;
    }
    return self;
} 

@end
  
@implementation RdsDescribeAuditFilesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAuditFilesResult* result = [[RdsDescribeAuditFilesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAuditFilesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeAuditResultRequest
-(id) initWithRegion:(NSString *)regionId
startTime:(NSString*)startTime
endTime:(NSString*)endTime
dbName:(NSString*)dbName
accountName:(NSString*)accountName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.startTime = startTime;
    self.endTime = endTime;
    self.dbName = dbName;
    self.accountName = accountName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
startTime:(NSString*)startTime
endTime:(NSString*)endTime
dbName:(NSString*)dbName
accountName:(NSString*)accountName
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.startTime = startTime;
    self.endTime = endTime;
    self.dbName = dbName;
    self.accountName = accountName;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
        Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsEnableAuditResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsEnableAuditResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsEnableAuditResult* result = [[RdsEnableAuditResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsEnableAuditResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeAuditResultResult
-(id) initWithAuditResult:(NSArray<AuditResult*>*) auditResult
        totalCount:(NSNumber*)totalCount { 
    self.auditResult = auditResult;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self auditResult])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self auditResult] count]; i++) {
            AuditResult* item = [[self auditResult] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"auditResult"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* auditResultArray = [dictionary objectForKey:@"auditResult"];
    if(auditResultArray&&![auditResultArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [auditResultArray count];i++)
        {
        AuditResult* item = [[AuditResult alloc]initWithDic:[auditResultArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.auditResult = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeAuditResultResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAuditResultResult* result = [[RdsDescribeAuditResultResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAuditResultResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateAuditResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDisableAuditResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDisableAuditResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDisableAuditResult* result = [[RdsDisableAuditResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDisableAuditResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeAuditOptionsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAuditOptionsResult* result = [[RdsDescribeAuditOptionsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAuditOptionsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCreateAuditResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateAuditResult* result = [[RdsCreateAuditResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateAuditResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsModifyAuditResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsModifyAuditResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyAuditResult* result = [[RdsModifyAuditResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyAuditResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeAuditResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAuditResult* result = [[RdsDescribeAuditResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAuditResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeAuditDownloadURLResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAuditDownloadURLResult* result = [[RdsDescribeAuditDownloadURLResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAuditDownloadURLResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDeleteAuditResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteAuditResult* result = [[RdsDeleteAuditResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteAuditResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeBinlogsResult
-(id) initWithTotalCount:(NSNumber*) totalCount
        binlogs:(NSArray<Binlog*>*)binlogs { 
    self.totalCount = totalCount;               
    self.binlogs = binlogs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self binlogs])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self binlogs] count]; i++) {
            Binlog* item = [[self binlogs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"binlogs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    NSArray* binlogsArray = [dictionary objectForKey:@"binlogs"];
    if(binlogsArray&&![binlogsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [binlogsArray count];i++)
        {
        Binlog* item = [[Binlog alloc]initWithDic:[binlogsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.binlogs = propertyArray;
    }
    return self;
} 

@end
  
@implementation RdsDescribeBinlogsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeBinlogsResult* result = [[RdsDescribeBinlogsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeBinlogsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsClearBinlogsResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsClearBinlogsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsClearBinlogsResult* result = [[RdsClearBinlogsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsClearBinlogsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeBinlogDownloadURLResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeBinlogDownloadURLResult* result = [[RdsDescribeBinlogDownloadURLResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeBinlogDownloadURLResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeAzsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAzsResult* result = [[RdsDescribeAzsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAzsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsSetImportFileSharedResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsSetImportFileSharedResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsSetImportFileSharedResult* result = [[RdsSetImportFileSharedResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsSetImportFileSharedResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsGetUploadKeyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsGetUploadKeyResult* result = [[RdsGetUploadKeyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsGetUploadKeyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDeleteImportFileResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteImportFileResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteImportFileResult* result = [[RdsDeleteImportFileResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteImportFileResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeImportFilesResult
-(id) initWithImportFiles:(NSArray<ImportFile*>*) importFiles { 
    self.importFiles = importFiles;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self importFiles])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self importFiles] count]; i++) {
            ImportFile* item = [[self importFiles] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"importFiles"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* importFilesArray = [dictionary objectForKey:@"importFiles"];
    if(importFilesArray&&![importFilesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [importFilesArray count];i++)
        {
        ImportFile* item = [[ImportFile alloc]initWithDic:[importFilesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.importFiles = propertyArray;
    }
    return self;
} 

@end
  
@implementation RdsDescribeImportFilesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeImportFilesResult* result = [[RdsDescribeImportFilesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeImportFilesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeWhiteListResult
-(id) initWithWhiteLists:(NSArray<WhiteList*>*) whiteLists { 
    self.whiteLists = whiteLists;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self whiteLists])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self whiteLists] count]; i++) {
            WhiteList* item = [[self whiteLists] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"whiteLists"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* whiteListsArray = [dictionary objectForKey:@"whiteLists"];
    if(whiteListsArray&&![whiteListsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [whiteListsArray count];i++)
        {
        WhiteList* item = [[WhiteList alloc]initWithDic:[whiteListsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.whiteLists = propertyArray;
    }
    return self;
} 

@end
@implementation RdsModifyWhiteListResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsModifyWhiteListResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyWhiteListResult* result = [[RdsModifyWhiteListResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyWhiteListResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeWhiteListResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeWhiteListResult* result = [[RdsDescribeWhiteListResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeWhiteListResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeLogsResult
-(id) initWithLogs:(NSArray<Log*>*) logs
        totalCount:(NSNumber*)totalCount { 
    self.logs = logs;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self logs])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self logs] count]; i++) {
            Log* item = [[self logs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"logs"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* logsArray = [dictionary objectForKey:@"logs"];
    if(logsArray&&![logsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [logsArray count];i++)
        {
        Log* item = [[Log alloc]initWithDic:[logsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.logs = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeLogsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeLogsResult* result = [[RdsDescribeLogsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeLogsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsUpdateLogDownloadURLInternalResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsUpdateLogDownloadURLInternalResult* result = [[RdsUpdateLogDownloadURLInternalResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsUpdateLogDownloadURLInternalResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeLogDownloadURLResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeLogDownloadURLResult* result = [[RdsDescribeLogDownloadURLResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeLogDownloadURLResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeLogsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
        Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation RdsModifyParameterGroupResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsModifyParameterGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyParameterGroupResult* result = [[RdsModifyParameterGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyParameterGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsRebootInstanceResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsEnableInternetAccessResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDescribeInstancesResult
-(id) initWithDbInstances:(NSArray<DBInstance*>*) dbInstances
        totalCount:(NSNumber*)totalCount { 
    self.dbInstances = dbInstances;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dbInstances])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self dbInstances] count]; i++) {
            DBInstance* item = [[self dbInstances] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dbInstances"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dbInstancesArray = [dictionary objectForKey:@"dbInstances"];
    if(dbInstancesArray&&![dbInstancesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dbInstancesArray count];i++)
        {
        DBInstance* item = [[DBInstance alloc]initWithDic:[dbInstancesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.dbInstances = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsCreateInstanceFromBackupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateInstanceFromBackupResult* result = [[RdsCreateInstanceFromBackupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateInstanceFromBackupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCreateROInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateROInstanceResult* result = [[RdsCreateROInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateROInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsRestoreInstanceResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsRestoreInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsRestoreInstanceResult* result = [[RdsRestoreInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsRestoreInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCreateInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateInstanceResult* result = [[RdsCreateInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsModifyInstanceNameResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsModifyInstanceNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyInstanceNameResult* result = [[RdsModifyInstanceNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyInstanceNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeLatestRestoreTimeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeLatestRestoreTimeResult* result = [[RdsDescribeLatestRestoreTimeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeLatestRestoreTimeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instanceSpec:(DBInstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.instanceSpec = instanceSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceSpec:(DBInstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.version = version;
    self.instanceSpec = instanceSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceSpec])
    {
        [result setValue:[[self instanceSpec] dictionary]forKey:@"instanceSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceSpec = [[DBInstanceSpec alloc]initWithDic:[dictionary objectForKey:@"instanceSpec"]];
    return self;
} 

@end
@implementation RdsCreateInstanceByTimeRequest
-(id) initWithRegion:(NSString *)regionId
restoreTime:(NSString*)restoreTime
instanceSpec:(RestoredNewDBInstanceSpec*)instanceSpec
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.restoreTime = restoreTime;
    self.instanceSpec = instanceSpec;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restoreTime:(NSString*)restoreTime
instanceSpec:(RestoredNewDBInstanceSpec*)instanceSpec
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.restoreTime = restoreTime;
    self.instanceSpec = instanceSpec;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restoreTime])
    {
        [result setValue:[self restoreTime] forKey:@"restoreTime"];
    }
    if([self instanceSpec])
    {
        [result setValue:[[self instanceSpec] dictionary]forKey:@"instanceSpec"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restoreTime = [dictionary objectForKey:@"restoreTime"];
    self.instanceSpec = [[RestoredNewDBInstanceSpec alloc]initWithDic:[dictionary objectForKey:@"instanceSpec"]];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
  
@implementation RdsCreateInstanceByTimeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateInstanceByTimeResult* result = [[RdsCreateInstanceByTimeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateInstanceByTimeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsModifyInstanceSpecResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyInstanceSpecResult* result = [[RdsModifyInstanceSpecResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyInstanceSpecResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeInstancesRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
tagFilters:(NSArray<TagFilter*>*)tagFilters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.tagFilters = tagFilters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
tagFilters:(NSArray<TagFilter*>*)tagFilters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.tagFilters = tagFilters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    if([self tagFilters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self tagFilters] count]; i++) {
            TagFilter* item = [[self tagFilters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"tagFilters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
        Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    NSArray* tagFiltersArray = [dictionary objectForKey:@"tagFilters"];
    if(tagFiltersArray&&![tagFiltersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [tagFiltersArray count];i++)
        {
        TagFilter* item = [[TagFilter alloc]initWithDic:[tagFiltersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.tagFilters = propertyArray;
    }
    return self;
} 

@end
@implementation RdsModifyBackupPolicyResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDisableInternetAccessResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDeleteInstanceResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteInstanceResult* result = [[RdsDeleteInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateInstanceFromBackupRequest
-(id) initWithRegion:(NSString *)regionId
backupId:(NSString*)backupId
engine:(NSString*)engine
instanceSpec:(RestoredNewDBInstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.backupId = backupId;
    self.engine = engine;
    self.instanceSpec = instanceSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
backupId:(NSString*)backupId
engine:(NSString*)engine
instanceSpec:(RestoredNewDBInstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.version = version;
    self.backupId = backupId;
    self.engine = engine;
    self.instanceSpec = instanceSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self backupId])
    {
        [result setValue:[self backupId] forKey:@"backupId"];
    }
    if([self engine])
    {
        [result setValue:[self engine] forKey:@"engine"];
    }
    if([self instanceSpec])
    {
        [result setValue:[[self instanceSpec] dictionary]forKey:@"instanceSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.backupId = [dictionary objectForKey:@"backupId"];
    self.engine = [dictionary objectForKey:@"engine"];
    self.instanceSpec = [[RestoredNewDBInstanceSpec alloc]initWithDic:[dictionary objectForKey:@"instanceSpec"]];
    return self;
} 

@end
@implementation RdsModifyConnectionModeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDescribeInstanceAttributesResult
-(id) initWithDbInstanceAttributes:(DBInstanceAttribute*) dbInstanceAttributes { 
    self.dbInstanceAttributes = dbInstanceAttributes;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dbInstanceAttributes])
    {
        [result setValue:[[self dbInstanceAttributes] dictionary]forKey:@"dbInstanceAttributes"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dbInstanceAttributes = [[DBInstanceAttribute alloc]initWithDic:[dictionary objectForKey:@"dbInstanceAttributes"]];
    return self;
} 

@end
@implementation RdsExchangeInstanceDnsResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDisableInternetAccessResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDisableInternetAccessResult* result = [[RdsDisableInternetAccessResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDisableInternetAccessResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsModifyBackupPolicyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyBackupPolicyResult* result = [[RdsModifyBackupPolicyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyBackupPolicyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeBackupPolicyResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeBackupPolicyResult* result = [[RdsDescribeBackupPolicyResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeBackupPolicyResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsModifyConnectionModeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyConnectionModeResult* result = [[RdsModifyConnectionModeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyConnectionModeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsFailoverInstanceResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsEnableInternetAccessResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsEnableInternetAccessResult* result = [[RdsEnableInternetAccessResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsEnableInternetAccessResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeInstanceAttributesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeInstanceAttributesResult* result = [[RdsDescribeInstanceAttributesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeInstanceAttributesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsRebootInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsRebootInstanceResult* result = [[RdsRebootInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsRebootInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeInstancesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeInstancesResult* result = [[RdsDescribeInstancesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeInstancesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsFailoverInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsFailoverInstanceResult* result = [[RdsFailoverInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsFailoverInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsExchangeInstanceDnsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsExchangeInstanceDnsResult* result = [[RdsExchangeInstanceDnsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsExchangeInstanceDnsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDeleteDatabaseResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteDatabaseResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteDatabaseResult* result = [[RdsDeleteDatabaseResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteDatabaseResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeDatabasesResult
-(id) initWithDatabases:(NSArray<Database*>*) databases
        totalCount:(NSNumber*)totalCount { 
    self.databases = databases;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self databases])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self databases] count]; i++) {
            Database* item = [[self databases] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"databases"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* databasesArray = [dictionary objectForKey:@"databases"];
    if(databasesArray&&![databasesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [databasesArray count];i++)
        {
        Database* item = [[Database alloc]initWithDic:[databasesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.databases = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeDatabasesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeDatabasesResult* result = [[RdsDescribeDatabasesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeDatabasesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsRestoreDatabaseFromBackupResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsRestoreDatabaseFromOSSResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsRestoreDatabaseFromOSSResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsRestoreDatabaseFromOSSResult* result = [[RdsRestoreDatabaseFromOSSResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsRestoreDatabaseFromOSSResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsRestoreDatabaseFromFileResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsRestoreDatabaseFromFileResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsRestoreDatabaseFromFileResult* result = [[RdsRestoreDatabaseFromFileResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsRestoreDatabaseFromFileResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsRestoreDatabaseFromBackupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsRestoreDatabaseFromBackupResult* result = [[RdsRestoreDatabaseFromBackupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsRestoreDatabaseFromBackupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateDatabaseResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsCreateDatabaseResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateDatabaseResult* result = [[RdsCreateDatabaseResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateDatabaseResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCreateBackupSynchronicityResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateBackupSynchronicityResult* result = [[RdsCreateBackupSynchronicityResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateBackupSynchronicityResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDeleteBackupSynchronicityResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteBackupSynchronicityResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteBackupSynchronicityResult* result = [[RdsDeleteBackupSynchronicityResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteBackupSynchronicityResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeBackupSynchronicitiesResult
-(id) initWithBackupSynchronicities:(NSArray<BackupSynchronicity*>*) backupSynchronicities
        totalCount:(NSNumber*)totalCount { 
    self.backupSynchronicities = backupSynchronicities;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self backupSynchronicities])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self backupSynchronicities] count]; i++) {
            BackupSynchronicity* item = [[self backupSynchronicities] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"backupSynchronicities"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* backupSynchronicitiesArray = [dictionary objectForKey:@"backupSynchronicities"];
    if(backupSynchronicitiesArray&&![backupSynchronicitiesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [backupSynchronicitiesArray count];i++)
        {
        BackupSynchronicity* item = [[BackupSynchronicity alloc]initWithDic:[backupSynchronicitiesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.backupSynchronicities = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeBackupSynchronicitiesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeBackupSynchronicitiesResult* result = [[RdsDescribeBackupSynchronicitiesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeBackupSynchronicitiesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateInstanceByTimeInCrossRegionRequest
-(id) initWithRegion:(NSString *)regionId
restoreTime:(NSString*)restoreTime
serviceId:(NSString*)serviceId
instanceSpec:(RestoredNewDBInstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.restoreTime = restoreTime;
    self.serviceId = serviceId;
    self.instanceSpec = instanceSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
restoreTime:(NSString*)restoreTime
serviceId:(NSString*)serviceId
instanceSpec:(RestoredNewDBInstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.version = version;
    self.restoreTime = restoreTime;
    self.serviceId = serviceId;
    self.instanceSpec = instanceSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self restoreTime])
    {
        [result setValue:[self restoreTime] forKey:@"restoreTime"];
    }
    if([self serviceId])
    {
        [result setValue:[self serviceId] forKey:@"serviceId"];
    }
    if([self instanceSpec])
    {
        [result setValue:[[self instanceSpec] dictionary]forKey:@"instanceSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.restoreTime = [dictionary objectForKey:@"restoreTime"];
    self.serviceId = [dictionary objectForKey:@"serviceId"];
    self.instanceSpec = [[RestoredNewDBInstanceSpec alloc]initWithDic:[dictionary objectForKey:@"instanceSpec"]];
    return self;
} 

@end
  
@implementation RdsCreateInstanceByTimeInCrossRegionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateInstanceByTimeInCrossRegionResult* result = [[RdsCreateInstanceByTimeInCrossRegionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateInstanceByTimeInCrossRegionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsRevokePrivilegeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDeleteAccountResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteAccountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteAccountResult* result = [[RdsDeleteAccountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteAccountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsGrantPrivilegeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsDescribeAccountsResult
-(id) initWithAccounts:(NSArray<Account*>*) accounts
        totalCount:(NSNumber*)totalCount { 
    self.accounts = accounts;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self accounts])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self accounts] count]; i++) {
            Account* item = [[self accounts] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"accounts"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* accountsArray = [dictionary objectForKey:@"accounts"];
    if(accountsArray&&![accountsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [accountsArray count];i++)
        {
        Account* item = [[Account alloc]initWithDic:[accountsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.accounts = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation RdsGrantPrivilegeRequest
-(id) initWithRegion:(NSString *)regionId
accountPrivileges:(NSArray<AccountPrivilege*>*)accountPrivileges
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.accountPrivileges = accountPrivileges;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
accountPrivileges:(NSArray<AccountPrivilege*>*)accountPrivileges
instanceId:(NSString*)instanceId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.accountPrivileges = accountPrivileges;
    self.instanceId = instanceId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self accountPrivileges])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self accountPrivileges] count]; i++) {
            AccountPrivilege* item = [[self accountPrivileges] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"accountPrivileges"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* accountPrivilegesArray = [dictionary objectForKey:@"accountPrivileges"];
    if(accountPrivilegesArray&&![accountPrivilegesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [accountPrivilegesArray count];i++)
        {
        AccountPrivilege* item = [[AccountPrivilege alloc]initWithDic:[accountPrivilegesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.accountPrivileges = propertyArray;
    }
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation RdsCreateSuperAccountResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsCreateSuperAccountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateSuperAccountResult* result = [[RdsCreateSuperAccountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateSuperAccountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsRevokePrivilegeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsRevokePrivilegeResult* result = [[RdsRevokePrivilegeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsRevokePrivilegeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsResetPasswordResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDescribeAccountsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeAccountsResult* result = [[RdsDescribeAccountsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeAccountsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsResetPasswordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsResetPasswordResult* result = [[RdsResetPasswordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsResetPasswordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsGrantPrivilegeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsGrantPrivilegeResult* result = [[RdsGrantPrivilegeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsGrantPrivilegeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsCreateAccountResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsCreateAccountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateAccountResult* result = [[RdsCreateAccountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateAccountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsAlterTableWithOnlineDDLResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsAlterTableWithOnlineDDLResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsAlterTableWithOnlineDDLResult* result = [[RdsAlterTableWithOnlineDDLResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsAlterTableWithOnlineDDLResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeIndexPerformanceResult
-(id) initWithMissingIndexResult:(NSArray<MissingIndexResult*>*) missingIndexResult
        indexPerformanceResult:(NSArray<IndexPerformanceResult*>*)indexPerformanceResult
        totalCount:(NSNumber*)totalCount
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.missingIndexResult = missingIndexResult;               
    self.indexPerformanceResult = indexPerformanceResult;               
    self.totalCount = totalCount;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self missingIndexResult])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self missingIndexResult] count]; i++) {
            MissingIndexResult* item = [[self missingIndexResult] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"missingIndexResult"];
    }
    if([self indexPerformanceResult])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self indexPerformanceResult] count]; i++) {
            IndexPerformanceResult* item = [[self indexPerformanceResult] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"indexPerformanceResult"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* missingIndexResultArray = [dictionary objectForKey:@"missingIndexResult"];
    if(missingIndexResultArray&&![missingIndexResultArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [missingIndexResultArray count];i++)
        {
        MissingIndexResult* item = [[MissingIndexResult alloc]initWithDic:[missingIndexResultArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.missingIndexResult = propertyArray;
    }
    NSArray* indexPerformanceResultArray = [dictionary objectForKey:@"indexPerformanceResult"];
    if(indexPerformanceResultArray&&![indexPerformanceResultArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [indexPerformanceResultArray count];i++)
        {
        IndexPerformanceResult* item = [[IndexPerformanceResult alloc]initWithDic:[indexPerformanceResultArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.indexPerformanceResult = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
  
@implementation RdsDescribeIndexPerformanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeIndexPerformanceResult* result = [[RdsDescribeIndexPerformanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeIndexPerformanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeSlowLogAttributesResult
-(id) initWithSlowLogsAttributes:(NSArray<SlowLogAttributes*>*) slowLogsAttributes
        totalCount:(NSNumber*)totalCount { 
    self.slowLogsAttributes = slowLogsAttributes;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self slowLogsAttributes])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self slowLogsAttributes] count]; i++) {
            SlowLogAttributes* item = [[self slowLogsAttributes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"slowLogsAttributes"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* slowLogsAttributesArray = [dictionary objectForKey:@"slowLogsAttributes"];
    if(slowLogsAttributesArray&&![slowLogsAttributesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [slowLogsAttributesArray count];i++)
        {
        SlowLogAttributes* item = [[SlowLogAttributes alloc]initWithDic:[slowLogsAttributesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.slowLogsAttributes = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation RdsDescribeQueryPerformanceResult
-(id) initWithQueryPerformanceResult:(NSArray<QueryPerformanceResult*>*) queryPerformanceResult
        totalCount:(NSNumber*)totalCount
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.queryPerformanceResult = queryPerformanceResult;               
    self.totalCount = totalCount;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self queryPerformanceResult])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self queryPerformanceResult] count]; i++) {
            QueryPerformanceResult* item = [[self queryPerformanceResult] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"queryPerformanceResult"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* queryPerformanceResultArray = [dictionary objectForKey:@"queryPerformanceResult"];
    if(queryPerformanceResultArray&&![queryPerformanceResultArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [queryPerformanceResultArray count];i++)
        {
        QueryPerformanceResult* item = [[QueryPerformanceResult alloc]initWithDic:[queryPerformanceResultArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.queryPerformanceResult = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
  
@implementation RdsDescribeQueryPerformanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeQueryPerformanceResult* result = [[RdsDescribeQueryPerformanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeQueryPerformanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsDescribeSlowLogAttributesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeSlowLogAttributesResult* result = [[RdsDescribeSlowLogAttributesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeSlowLogAttributesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeActiveQueryPerformanceResult
-(id) initWithActiveQueryPerformanceResult:(NSArray<ActiveQueryPerformanceResult*>*) activeQueryPerformanceResult
        totalCount:(NSNumber*)totalCount
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.activeQueryPerformanceResult = activeQueryPerformanceResult;               
    self.totalCount = totalCount;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self activeQueryPerformanceResult])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self activeQueryPerformanceResult] count]; i++) {
            ActiveQueryPerformanceResult* item = [[self activeQueryPerformanceResult] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"activeQueryPerformanceResult"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* activeQueryPerformanceResultArray = [dictionary objectForKey:@"activeQueryPerformanceResult"];
    if(activeQueryPerformanceResultArray&&![activeQueryPerformanceResultArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [activeQueryPerformanceResultArray count];i++)
        {
        ActiveQueryPerformanceResult* item = [[ActiveQueryPerformanceResult alloc]initWithDic:[activeQueryPerformanceResultArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.activeQueryPerformanceResult = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
  
@implementation RdsDescribeActiveQueryPerformanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeActiveQueryPerformanceResult* result = [[RdsDescribeActiveQueryPerformanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeActiveQueryPerformanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeSlowLogsResult
-(id) initWithSlowLogs:(NSArray<SlowLogDigest*>*) slowLogs
        totalCount:(NSNumber*)totalCount { 
    self.slowLogs = slowLogs;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self slowLogs])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self slowLogs] count]; i++) {
            SlowLogDigest* item = [[self slowLogs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"slowLogs"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* slowLogsArray = [dictionary objectForKey:@"slowLogs"];
    if(slowLogsArray&&![slowLogsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [slowLogsArray count];i++)
        {
        SlowLogDigest* item = [[SlowLogDigest alloc]initWithDic:[slowLogsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.slowLogs = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeSlowLogsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeSlowLogsResult* result = [[RdsDescribeSlowLogsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeSlowLogsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeParametersResult
-(id) initWithParameters:(NSArray<DBInstanceParameter*>*) parameters { 
    self.parameters = parameters;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self parameters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self parameters] count]; i++) {
            DBInstanceParameter* item = [[self parameters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"parameters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* parametersArray = [dictionary objectForKey:@"parameters"];
    if(parametersArray&&![parametersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [parametersArray count];i++)
        {
        DBInstanceParameter* item = [[DBInstanceParameter alloc]initWithDic:[parametersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.parameters = propertyArray;
    }
    return self;
} 

@end
  
@implementation RdsDescribeParametersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeParametersResult* result = [[RdsDescribeParametersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeParametersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsModifyParametersResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation RdsModifyParametersRequest
-(id) initWithRegion:(NSString *)regionId
parameters:(NSArray<Parameter*>*)parameters
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.parameters = parameters;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameters:(NSArray<Parameter*>*)parameters
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.parameters = parameters;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self parameters] count]; i++) {
            Parameter* item = [[self parameters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"parameters"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* parametersArray = [dictionary objectForKey:@"parameters"];
    if(parametersArray&&![parametersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [parametersArray count];i++)
        {
        Parameter* item = [[Parameter alloc]initWithDic:[parametersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.parameters = propertyArray;
    }
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
  
@implementation RdsModifyParametersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyParametersResult* result = [[RdsModifyParametersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyParametersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsModifyParameterGroupAttributeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsModifyParameterGroupAttributeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyParameterGroupAttributeResult* result = [[RdsModifyParameterGroupAttributeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyParameterGroupAttributeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeParameterModifyRecordsResult
-(id) initWithRecords:(NSArray<ParameterModifyRecords*>*) records
        totalCount:(NSNumber*)totalCount { 
    self.records = records;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self records])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self records] count]; i++) {
            ParameterModifyRecords* item = [[self records] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"records"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* recordsArray = [dictionary objectForKey:@"records"];
    if(recordsArray&&![recordsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [recordsArray count];i++)
        {
        ParameterModifyRecords* item = [[ParameterModifyRecords alloc]initWithDic:[recordsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.records = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeParameterModifyRecordsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeParameterModifyRecordsResult* result = [[RdsDescribeParameterModifyRecordsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeParameterModifyRecordsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeParameterGroupParametersResult
-(id) initWithParameters:(NSArray<ParameterGroupParameter*>*) parameters { 
    self.parameters = parameters;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self parameters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self parameters] count]; i++) {
            ParameterGroupParameter* item = [[self parameters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"parameters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* parametersArray = [dictionary objectForKey:@"parameters"];
    if(parametersArray&&![parametersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [parametersArray count];i++)
        {
        ParameterGroupParameter* item = [[ParameterGroupParameter alloc]initWithDic:[parametersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.parameters = propertyArray;
    }
    return self;
} 

@end
  
@implementation RdsDescribeParameterGroupParametersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeParameterGroupParametersResult* result = [[RdsDescribeParameterGroupParametersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeParameterGroupParametersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeParameterGroupAttachedInstancesResult
-(id) initWithInstances:(NSArray<AttachedDBInstance*>*) instances
        totalCount:(NSNumber*)totalCount { 
    self.instances = instances;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instances])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self instances] count]; i++) {
            AttachedDBInstance* item = [[self instances] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"instances"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* instancesArray = [dictionary objectForKey:@"instances"];
    if(instancesArray&&![instancesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [instancesArray count];i++)
        {
        AttachedDBInstance* item = [[AttachedDBInstance alloc]initWithDic:[instancesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.instances = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeParameterGroupAttachedInstancesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeParameterGroupAttachedInstancesResult* result = [[RdsDescribeParameterGroupAttachedInstancesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeParameterGroupAttachedInstancesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCopyParameterGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCopyParameterGroupResult* result = [[RdsCopyParameterGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCopyParameterGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation RdsCreateParameterGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsCreateParameterGroupResult* result = [[RdsCreateParameterGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsCreateParameterGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDeleteParameterGroupResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsDeleteParameterGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDeleteParameterGroupResult* result = [[RdsDeleteParameterGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDeleteParameterGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsDescribeParameterGroupsResult
-(id) initWithParameterGroups:(NSArray<ParameterGroup*>*) parameterGroups
        totalCount:(NSNumber*)totalCount { 
    self.parameterGroups = parameterGroups;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self parameterGroups])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self parameterGroups] count]; i++) {
            ParameterGroup* item = [[self parameterGroups] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"parameterGroups"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* parameterGroupsArray = [dictionary objectForKey:@"parameterGroups"];
    if(parameterGroupsArray&&![parameterGroupsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [parameterGroupsArray count];i++)
        {
        ParameterGroup* item = [[ParameterGroup alloc]initWithDic:[parameterGroupsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.parameterGroups = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation RdsDescribeParameterGroupsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsDescribeParameterGroupsResult* result = [[RdsDescribeParameterGroupsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsDescribeParameterGroupsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation RdsModifyParameterGroupParametersRequest
-(id) initWithRegion:(NSString *)regionId
parameters:(NSArray<Parameter*>*)parameters
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.parameters = parameters;
    self.parameterGroupId = parameterGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
parameters:(NSArray<Parameter*>*)parameters
parameterGroupId:(NSString*)parameterGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.parameters = parameters;
    self.parameterGroupId = parameterGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self parameters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self parameters] count]; i++) {
            Parameter* item = [[self parameters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"parameters"];
    }
    if([self parameterGroupId])
    {
        [result setValue:[self parameterGroupId] forKey:@"parameterGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* parametersArray = [dictionary objectForKey:@"parameters"];
    if(parametersArray&&![parametersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [parametersArray count];i++)
        {
        Parameter* item = [[Parameter alloc]initWithDic:[parametersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.parameters = propertyArray;
    }
    self.parameterGroupId = [dictionary objectForKey:@"parameterGroupId"];
    return self;
} 

@end
@implementation RdsModifyParameterGroupParametersResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation RdsModifyParameterGroupParametersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
RdsModifyParameterGroupParametersResult* result = [[RdsModifyParameterGroupParametersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(RdsModifyParameterGroupParametersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
