/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

云数据库RDS
目前RDS OpenAPI支持云数据库 MySQL、Percona、MariaDB、SQL Server、PostgreSQL

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef RdsClient_h
#define RdsClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKRds/RdsApiModel.h>

@interface RdsClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    describeAuditDownloadURL sync request
    @param describeAuditDownloadURLRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuditDownloadURLResponse` the request response data model
    */
    -(NSDictionary*) describeAuditDownloadURLSyncWithRequest:(RdsDescribeAuditDownloadURLRequest*) describeAuditDownloadURLRequest;

    -(void)describeAuditDownloadURLAsyncWithRequest:(RdsDescribeAuditDownloadURLRequest*) describeAuditDownloadURLRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAuditDownloadURLResponse* _Nullable describeAuditDownloadURLResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    clearBinlogs sync request
    @param clearBinlogsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `clearBinlogsResponse` the request response data model
    */
    -(NSDictionary*) clearBinlogsSyncWithRequest:(RdsClearBinlogsRequest*) clearBinlogsRequest;

    -(void)clearBinlogsAsyncWithRequest:(RdsClearBinlogsRequest*) clearBinlogsRequest
    completionHandler:(void(^)(int statusCode,RdsClearBinlogsResponse* _Nullable clearBinlogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInterceptResult sync request
    @param describeInterceptResultRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInterceptResultResponse` the request response data model
    */
    -(NSDictionary*) describeInterceptResultSyncWithRequest:(RdsDescribeInterceptResultRequest*) describeInterceptResultRequest;

    -(void)describeInterceptResultAsyncWithRequest:(RdsDescribeInterceptResultRequest*) describeInterceptResultRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeInterceptResultResponse* _Nullable describeInterceptResultResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBackupPolicy sync request
    @param describeBackupPolicyRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBackupPolicyResponse` the request response data model
    */
    -(NSDictionary*) describeBackupPolicySyncWithRequest:(RdsDescribeBackupPolicyRequest*) describeBackupPolicyRequest;

    -(void)describeBackupPolicyAsyncWithRequest:(RdsDescribeBackupPolicyRequest*) describeBackupPolicyRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeBackupPolicyResponse* _Nullable describeBackupPolicyResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBackupDownloadURL sync request
    @param describeBackupDownloadURLRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBackupDownloadURLResponse` the request response data model
    */
    -(NSDictionary*) describeBackupDownloadURLSyncWithRequest:(RdsDescribeBackupDownloadURLRequest*) describeBackupDownloadURLRequest;

    -(void)describeBackupDownloadURLAsyncWithRequest:(RdsDescribeBackupDownloadURLRequest*) describeBackupDownloadURLRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeBackupDownloadURLResponse* _Nullable describeBackupDownloadURLResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    copyParameterGroup sync request
    @param copyParameterGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `copyParameterGroupResponse` the request response data model
    */
    -(NSDictionary*) copyParameterGroupSyncWithRequest:(RdsCopyParameterGroupRequest*) copyParameterGroupRequest;

    -(void)copyParameterGroupAsyncWithRequest:(RdsCopyParameterGroupRequest*) copyParameterGroupRequest
    completionHandler:(void(^)(int statusCode,RdsCopyParameterGroupResponse* _Nullable copyParameterGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBinlogs sync request
    @param describeBinlogsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBinlogsResponse` the request response data model
    */
    -(NSDictionary*) describeBinlogsSyncWithRequest:(RdsDescribeBinlogsRequest*) describeBinlogsRequest;

    -(void)describeBinlogsAsyncWithRequest:(RdsDescribeBinlogsRequest*) describeBinlogsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeBinlogsResponse* _Nullable describeBinlogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteInstance sync request
    @param deleteInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteInstanceResponse` the request response data model
    */
    -(NSDictionary*) deleteInstanceSyncWithRequest:(RdsDeleteInstanceRequest*) deleteInstanceRequest;

    -(void)deleteInstanceAsyncWithRequest:(RdsDeleteInstanceRequest*) deleteInstanceRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteInstanceResponse* _Nullable deleteInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    alterTableWithOnlineDDL sync request
    @param alterTableWithOnlineDDLRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `alterTableWithOnlineDDLResponse` the request response data model
    */
    -(NSDictionary*) alterTableWithOnlineDDLSyncWithRequest:(RdsAlterTableWithOnlineDDLRequest*) alterTableWithOnlineDDLRequest;

    -(void)alterTableWithOnlineDDLAsyncWithRequest:(RdsAlterTableWithOnlineDDLRequest*) alterTableWithOnlineDDLRequest
    completionHandler:(void(^)(int statusCode,RdsAlterTableWithOnlineDDLResponse* _Nullable alterTableWithOnlineDDLResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createParameterGroup sync request
    @param createParameterGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createParameterGroupResponse` the request response data model
    */
    -(NSDictionary*) createParameterGroupSyncWithRequest:(RdsCreateParameterGroupRequest*) createParameterGroupRequest;

    -(void)createParameterGroupAsyncWithRequest:(RdsCreateParameterGroupRequest*) createParameterGroupRequest
    completionHandler:(void(^)(int statusCode,RdsCreateParameterGroupResponse* _Nullable createParameterGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBackups sync request
    @param describeBackupsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBackupsResponse` the request response data model
    */
    -(NSDictionary*) describeBackupsSyncWithRequest:(RdsDescribeBackupsRequest*) describeBackupsRequest;

    -(void)describeBackupsAsyncWithRequest:(RdsDescribeBackupsRequest*) describeBackupsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeBackupsResponse* _Nullable describeBackupsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyConnectionMode sync request
    @param modifyConnectionModeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyConnectionModeResponse` the request response data model
    */
    -(NSDictionary*) modifyConnectionModeSyncWithRequest:(RdsModifyConnectionModeRequest*) modifyConnectionModeRequest;

    -(void)modifyConnectionModeAsyncWithRequest:(RdsModifyConnectionModeRequest*) modifyConnectionModeRequest
    completionHandler:(void(^)(int statusCode,RdsModifyConnectionModeResponse* _Nullable modifyConnectionModeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteAudit sync request
    @param deleteAuditRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteAuditResponse` the request response data model
    */
    -(NSDictionary*) deleteAuditSyncWithRequest:(RdsDeleteAuditRequest*) deleteAuditRequest;

    -(void)deleteAuditAsyncWithRequest:(RdsDeleteAuditRequest*) deleteAuditRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteAuditResponse* _Nullable deleteAuditResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createInstanceByTime sync request
    @param createInstanceByTimeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createInstanceByTimeResponse` the request response data model
    */
    -(NSDictionary*) createInstanceByTimeSyncWithRequest:(RdsCreateInstanceByTimeRequest*) createInstanceByTimeRequest;

    -(void)createInstanceByTimeAsyncWithRequest:(RdsCreateInstanceByTimeRequest*) createInstanceByTimeRequest
    completionHandler:(void(^)(int statusCode,RdsCreateInstanceByTimeResponse* _Nullable createInstanceByTimeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableInternetAccess sync request
    @param enableInternetAccessRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableInternetAccessResponse` the request response data model
    */
    -(NSDictionary*) enableInternetAccessSyncWithRequest:(RdsEnableInternetAccessRequest*) enableInternetAccessRequest;

    -(void)enableInternetAccessAsyncWithRequest:(RdsEnableInternetAccessRequest*) enableInternetAccessRequest
    completionHandler:(void(^)(int statusCode,RdsEnableInternetAccessResponse* _Nullable enableInternetAccessResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAccounts sync request
    @param describeAccountsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAccountsResponse` the request response data model
    */
    -(NSDictionary*) describeAccountsSyncWithRequest:(RdsDescribeAccountsRequest*) describeAccountsRequest;

    -(void)describeAccountsAsyncWithRequest:(RdsDescribeAccountsRequest*) describeAccountsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAccountsResponse* _Nullable describeAccountsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyParameterGroup sync request
    @param modifyParameterGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyParameterGroupResponse` the request response data model
    */
    -(NSDictionary*) modifyParameterGroupSyncWithRequest:(RdsModifyParameterGroupRequest*) modifyParameterGroupRequest;

    -(void)modifyParameterGroupAsyncWithRequest:(RdsModifyParameterGroupRequest*) modifyParameterGroupRequest
    completionHandler:(void(^)(int statusCode,RdsModifyParameterGroupResponse* _Nullable modifyParameterGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeParameterModifyRecords sync request
    @param describeParameterModifyRecordsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeParameterModifyRecordsResponse` the request response data model
    */
    -(NSDictionary*) describeParameterModifyRecordsSyncWithRequest:(RdsDescribeParameterModifyRecordsRequest*) describeParameterModifyRecordsRequest;

    -(void)describeParameterModifyRecordsAsyncWithRequest:(RdsDescribeParameterModifyRecordsRequest*) describeParameterModifyRecordsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeParameterModifyRecordsResponse* _Nullable describeParameterModifyRecordsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBinlogDownloadURL sync request
    @param describeBinlogDownloadURLRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBinlogDownloadURLResponse` the request response data model
    */
    -(NSDictionary*) describeBinlogDownloadURLSyncWithRequest:(RdsDescribeBinlogDownloadURLRequest*) describeBinlogDownloadURLRequest;

    -(void)describeBinlogDownloadURLAsyncWithRequest:(RdsDescribeBinlogDownloadURLRequest*) describeBinlogDownloadURLRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeBinlogDownloadURLResponse* _Nullable describeBinlogDownloadURLResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAuditFiles sync request
    @param describeAuditFilesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuditFilesResponse` the request response data model
    */
    -(NSDictionary*) describeAuditFilesSyncWithRequest:(RdsDescribeAuditFilesRequest*) describeAuditFilesRequest;

    -(void)describeAuditFilesAsyncWithRequest:(RdsDescribeAuditFilesRequest*) describeAuditFilesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAuditFilesResponse* _Nullable describeAuditFilesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createAccount sync request
    @param createAccountRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createAccountResponse` the request response data model
    */
    -(NSDictionary*) createAccountSyncWithRequest:(RdsCreateAccountRequest*) createAccountRequest;

    -(void)createAccountAsyncWithRequest:(RdsCreateAccountRequest*) createAccountRequest
    completionHandler:(void(^)(int statusCode,RdsCreateAccountResponse* _Nullable createAccountResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    grantPrivilege sync request
    @param grantPrivilegeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `grantPrivilegeResponse` the request response data model
    */
    -(NSDictionary*) grantPrivilegeSyncWithRequest:(RdsGrantPrivilegeRequest*) grantPrivilegeRequest;

    -(void)grantPrivilegeAsyncWithRequest:(RdsGrantPrivilegeRequest*) grantPrivilegeRequest
    completionHandler:(void(^)(int statusCode,RdsGrantPrivilegeResponse* _Nullable grantPrivilegeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    revokePrivilege sync request
    @param revokePrivilegeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `revokePrivilegeResponse` the request response data model
    */
    -(NSDictionary*) revokePrivilegeSyncWithRequest:(RdsRevokePrivilegeRequest*) revokePrivilegeRequest;

    -(void)revokePrivilegeAsyncWithRequest:(RdsRevokePrivilegeRequest*) revokePrivilegeRequest
    completionHandler:(void(^)(int statusCode,RdsRevokePrivilegeResponse* _Nullable revokePrivilegeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAzs sync request
    @param describeAzsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAzsResponse` the request response data model
    */
    -(NSDictionary*) describeAzsSyncWithRequest:(RdsDescribeAzsRequest*) describeAzsRequest;

    -(void)describeAzsAsyncWithRequest:(RdsDescribeAzsRequest*) describeAzsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAzsResponse* _Nullable describeAzsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getUploadKey sync request
    @param getUploadKeyRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getUploadKeyResponse` the request response data model
    */
    -(NSDictionary*) getUploadKeySyncWithRequest:(RdsGetUploadKeyRequest*) getUploadKeyRequest;

    -(void)getUploadKeyAsyncWithRequest:(RdsGetUploadKeyRequest*) getUploadKeyRequest
    completionHandler:(void(^)(int statusCode,RdsGetUploadKeyResponse* _Nullable getUploadKeyResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    restoreDatabaseFromFile sync request
    @param restoreDatabaseFromFileRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `restoreDatabaseFromFileResponse` the request response data model
    */
    -(NSDictionary*) restoreDatabaseFromFileSyncWithRequest:(RdsRestoreDatabaseFromFileRequest*) restoreDatabaseFromFileRequest;

    -(void)restoreDatabaseFromFileAsyncWithRequest:(RdsRestoreDatabaseFromFileRequest*) restoreDatabaseFromFileRequest
    completionHandler:(void(^)(int statusCode,RdsRestoreDatabaseFromFileResponse* _Nullable restoreDatabaseFromFileResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstanceAttributes sync request
    @param describeInstanceAttributesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceAttributesResponse` the request response data model
    */
    -(NSDictionary*) describeInstanceAttributesSyncWithRequest:(RdsDescribeInstanceAttributesRequest*) describeInstanceAttributesRequest;

    -(void)describeInstanceAttributesAsyncWithRequest:(RdsDescribeInstanceAttributesRequest*) describeInstanceAttributesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeInstanceAttributesResponse* _Nullable describeInstanceAttributesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyInstanceSpec sync request
    @param modifyInstanceSpecRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyInstanceSpecResponse` the request response data model
    */
    -(NSDictionary*) modifyInstanceSpecSyncWithRequest:(RdsModifyInstanceSpecRequest*) modifyInstanceSpecRequest;

    -(void)modifyInstanceSpecAsyncWithRequest:(RdsModifyInstanceSpecRequest*) modifyInstanceSpecRequest
    completionHandler:(void(^)(int statusCode,RdsModifyInstanceSpecResponse* _Nullable modifyInstanceSpecResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAudit sync request
    @param describeAuditRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuditResponse` the request response data model
    */
    -(NSDictionary*) describeAuditSyncWithRequest:(RdsDescribeAuditRequest*) describeAuditRequest;

    -(void)describeAuditAsyncWithRequest:(RdsDescribeAuditRequest*) describeAuditRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAuditResponse* _Nullable describeAuditResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeQueryPerformance sync request
    @param describeQueryPerformanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeQueryPerformanceResponse` the request response data model
    */
    -(NSDictionary*) describeQueryPerformanceSyncWithRequest:(RdsDescribeQueryPerformanceRequest*) describeQueryPerformanceRequest;

    -(void)describeQueryPerformanceAsyncWithRequest:(RdsDescribeQueryPerformanceRequest*) describeQueryPerformanceRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeQueryPerformanceResponse* _Nullable describeQueryPerformanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeParameterGroupAttachedInstances sync request
    @param describeParameterGroupAttachedInstancesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeParameterGroupAttachedInstancesResponse` the request response data model
    */
    -(NSDictionary*) describeParameterGroupAttachedInstancesSyncWithRequest:(RdsDescribeParameterGroupAttachedInstancesRequest*) describeParameterGroupAttachedInstancesRequest;

    -(void)describeParameterGroupAttachedInstancesAsyncWithRequest:(RdsDescribeParameterGroupAttachedInstancesRequest*) describeParameterGroupAttachedInstancesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeParameterGroupAttachedInstancesResponse* _Nullable describeParameterGroupAttachedInstancesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeTde sync request
    @param describeTdeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeTdeResponse` the request response data model
    */
    -(NSDictionary*) describeTdeSyncWithRequest:(RdsDescribeTdeRequest*) describeTdeRequest;

    -(void)describeTdeAsyncWithRequest:(RdsDescribeTdeRequest*) describeTdeRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeTdeResponse* _Nullable describeTdeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createBackupSynchronicity sync request
    @param createBackupSynchronicityRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createBackupSynchronicityResponse` the request response data model
    */
    -(NSDictionary*) createBackupSynchronicitySyncWithRequest:(RdsCreateBackupSynchronicityRequest*) createBackupSynchronicityRequest;

    -(void)createBackupSynchronicityAsyncWithRequest:(RdsCreateBackupSynchronicityRequest*) createBackupSynchronicityRequest
    completionHandler:(void(^)(int statusCode,RdsCreateBackupSynchronicityResponse* _Nullable createBackupSynchronicityResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteImportFile sync request
    @param deleteImportFileRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteImportFileResponse` the request response data model
    */
    -(NSDictionary*) deleteImportFileSyncWithRequest:(RdsDeleteImportFileRequest*) deleteImportFileRequest;

    -(void)deleteImportFileAsyncWithRequest:(RdsDeleteImportFileRequest*) deleteImportFileRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteImportFileResponse* _Nullable deleteImportFileResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteBackupSynchronicity sync request
    @param deleteBackupSynchronicityRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteBackupSynchronicityResponse` the request response data model
    */
    -(NSDictionary*) deleteBackupSynchronicitySyncWithRequest:(RdsDeleteBackupSynchronicityRequest*) deleteBackupSynchronicityRequest;

    -(void)deleteBackupSynchronicityAsyncWithRequest:(RdsDeleteBackupSynchronicityRequest*) deleteBackupSynchronicityRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteBackupSynchronicityResponse* _Nullable deleteBackupSynchronicityResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeSlowLogAttributes sync request
    @param describeSlowLogAttributesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeSlowLogAttributesResponse` the request response data model
    */
    -(NSDictionary*) describeSlowLogAttributesSyncWithRequest:(RdsDescribeSlowLogAttributesRequest*) describeSlowLogAttributesRequest;

    -(void)describeSlowLogAttributesAsyncWithRequest:(RdsDescribeSlowLogAttributesRequest*) describeSlowLogAttributesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeSlowLogAttributesResponse* _Nullable describeSlowLogAttributesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyParameterGroupAttribute sync request
    @param modifyParameterGroupAttributeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyParameterGroupAttributeResponse` the request response data model
    */
    -(NSDictionary*) modifyParameterGroupAttributeSyncWithRequest:(RdsModifyParameterGroupAttributeRequest*) modifyParameterGroupAttributeRequest;

    -(void)modifyParameterGroupAttributeAsyncWithRequest:(RdsModifyParameterGroupAttributeRequest*) modifyParameterGroupAttributeRequest
    completionHandler:(void(^)(int statusCode,RdsModifyParameterGroupAttributeResponse* _Nullable modifyParameterGroupAttributeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyAudit sync request
    @param modifyAuditRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyAuditResponse` the request response data model
    */
    -(NSDictionary*) modifyAuditSyncWithRequest:(RdsModifyAuditRequest*) modifyAuditRequest;

    -(void)modifyAuditAsyncWithRequest:(RdsModifyAuditRequest*) modifyAuditRequest
    completionHandler:(void(^)(int statusCode,RdsModifyAuditResponse* _Nullable modifyAuditResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAuditResult sync request
    @param describeAuditResultRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuditResultResponse` the request response data model
    */
    -(NSDictionary*) describeAuditResultSyncWithRequest:(RdsDescribeAuditResultRequest*) describeAuditResultRequest;

    -(void)describeAuditResultAsyncWithRequest:(RdsDescribeAuditResultRequest*) describeAuditResultRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAuditResultResponse* _Nullable describeAuditResultResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeLatestRestoreTime sync request
    @param describeLatestRestoreTimeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeLatestRestoreTimeResponse` the request response data model
    */
    -(NSDictionary*) describeLatestRestoreTimeSyncWithRequest:(RdsDescribeLatestRestoreTimeRequest*) describeLatestRestoreTimeRequest;

    -(void)describeLatestRestoreTimeAsyncWithRequest:(RdsDescribeLatestRestoreTimeRequest*) describeLatestRestoreTimeRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeLatestRestoreTimeResponse* _Nullable describeLatestRestoreTimeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeErrorLogs sync request
    @param describeErrorLogsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeErrorLogsResponse` the request response data model
    */
    -(NSDictionary*) describeErrorLogsSyncWithRequest:(RdsDescribeErrorLogsRequest*) describeErrorLogsRequest;

    -(void)describeErrorLogsAsyncWithRequest:(RdsDescribeErrorLogsRequest*) describeErrorLogsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeErrorLogsResponse* _Nullable describeErrorLogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableTde sync request
    @param enableTdeRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableTdeResponse` the request response data model
    */
    -(NSDictionary*) enableTdeSyncWithRequest:(RdsEnableTdeRequest*) enableTdeRequest;

    -(void)enableTdeAsyncWithRequest:(RdsEnableTdeRequest*) enableTdeRequest
    completionHandler:(void(^)(int statusCode,RdsEnableTdeResponse* _Nullable enableTdeResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeSlowLogs sync request
    @param describeSlowLogsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeSlowLogsResponse` the request response data model
    */
    -(NSDictionary*) describeSlowLogsSyncWithRequest:(RdsDescribeSlowLogsRequest*) describeSlowLogsRequest;

    -(void)describeSlowLogsAsyncWithRequest:(RdsDescribeSlowLogsRequest*) describeSlowLogsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeSlowLogsResponse* _Nullable describeSlowLogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteDatabase sync request
    @param deleteDatabaseRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteDatabaseResponse` the request response data model
    */
    -(NSDictionary*) deleteDatabaseSyncWithRequest:(RdsDeleteDatabaseRequest*) deleteDatabaseRequest;

    -(void)deleteDatabaseAsyncWithRequest:(RdsDeleteDatabaseRequest*) deleteDatabaseRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteDatabaseResponse* _Nullable deleteDatabaseResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeActiveQueryPerformance sync request
    @param describeActiveQueryPerformanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeActiveQueryPerformanceResponse` the request response data model
    */
    -(NSDictionary*) describeActiveQueryPerformanceSyncWithRequest:(RdsDescribeActiveQueryPerformanceRequest*) describeActiveQueryPerformanceRequest;

    -(void)describeActiveQueryPerformanceAsyncWithRequest:(RdsDescribeActiveQueryPerformanceRequest*) describeActiveQueryPerformanceRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeActiveQueryPerformanceResponse* _Nullable describeActiveQueryPerformanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createInstanceFromBackup sync request
    @param createInstanceFromBackupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createInstanceFromBackupResponse` the request response data model
    */
    -(NSDictionary*) createInstanceFromBackupSyncWithRequest:(RdsCreateInstanceFromBackupRequest*) createInstanceFromBackupRequest;

    -(void)createInstanceFromBackupAsyncWithRequest:(RdsCreateInstanceFromBackupRequest*) createInstanceFromBackupRequest
    completionHandler:(void(^)(int statusCode,RdsCreateInstanceFromBackupResponse* _Nullable createInstanceFromBackupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createSuperAccount sync request
    @param createSuperAccountRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createSuperAccountResponse` the request response data model
    */
    -(NSDictionary*) createSuperAccountSyncWithRequest:(RdsCreateSuperAccountRequest*) createSuperAccountRequest;

    -(void)createSuperAccountAsyncWithRequest:(RdsCreateSuperAccountRequest*) createSuperAccountRequest
    completionHandler:(void(^)(int statusCode,RdsCreateSuperAccountResponse* _Nullable createSuperAccountResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeParameters sync request
    @param describeParametersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeParametersResponse` the request response data model
    */
    -(NSDictionary*) describeParametersSyncWithRequest:(RdsDescribeParametersRequest*) describeParametersRequest;

    -(void)describeParametersAsyncWithRequest:(RdsDescribeParametersRequest*) describeParametersRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeParametersResponse* _Nullable describeParametersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyParameters sync request
    @param modifyParametersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyParametersResponse` the request response data model
    */
    -(NSDictionary*) modifyParametersSyncWithRequest:(RdsModifyParametersRequest*) modifyParametersRequest;

    -(void)modifyParametersAsyncWithRequest:(RdsModifyParametersRequest*) modifyParametersRequest
    completionHandler:(void(^)(int statusCode,RdsModifyParametersResponse* _Nullable modifyParametersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyWhiteList sync request
    @param modifyWhiteListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyWhiteListResponse` the request response data model
    */
    -(NSDictionary*) modifyWhiteListSyncWithRequest:(RdsModifyWhiteListRequest*) modifyWhiteListRequest;

    -(void)modifyWhiteListAsyncWithRequest:(RdsModifyWhiteListRequest*) modifyWhiteListRequest
    completionHandler:(void(^)(int statusCode,RdsModifyWhiteListResponse* _Nullable modifyWhiteListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateLogDownloadURLInternal sync request
    @param updateLogDownloadURLInternalRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateLogDownloadURLInternalResponse` the request response data model
    */
    -(NSDictionary*) updateLogDownloadURLInternalSyncWithRequest:(RdsUpdateLogDownloadURLInternalRequest*) updateLogDownloadURLInternalRequest;

    -(void)updateLogDownloadURLInternalAsyncWithRequest:(RdsUpdateLogDownloadURLInternalRequest*) updateLogDownloadURLInternalRequest
    completionHandler:(void(^)(int statusCode,RdsUpdateLogDownloadURLInternalResponse* _Nullable updateLogDownloadURLInternalResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeLogDownloadURL sync request
    @param describeLogDownloadURLRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeLogDownloadURLResponse` the request response data model
    */
    -(NSDictionary*) describeLogDownloadURLSyncWithRequest:(RdsDescribeLogDownloadURLRequest*) describeLogDownloadURLRequest;

    -(void)describeLogDownloadURLAsyncWithRequest:(RdsDescribeLogDownloadURLRequest*) describeLogDownloadURLRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeLogDownloadURLResponse* _Nullable describeLogDownloadURLResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    resetPassword sync request
    @param resetPasswordRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `resetPasswordResponse` the request response data model
    */
    -(NSDictionary*) resetPasswordSyncWithRequest:(RdsResetPasswordRequest*) resetPasswordRequest;

    -(void)resetPasswordAsyncWithRequest:(RdsResetPasswordRequest*) resetPasswordRequest
    completionHandler:(void(^)(int statusCode,RdsResetPasswordResponse* _Nullable resetPasswordResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disableIntercept sync request
    @param disableInterceptRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableInterceptResponse` the request response data model
    */
    -(NSDictionary*) disableInterceptSyncWithRequest:(RdsDisableInterceptRequest*) disableInterceptRequest;

    -(void)disableInterceptAsyncWithRequest:(RdsDisableInterceptRequest*) disableInterceptRequest
    completionHandler:(void(^)(int statusCode,RdsDisableInterceptResponse* _Nullable disableInterceptResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    exchangeInstanceDns sync request
    @param exchangeInstanceDnsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `exchangeInstanceDnsResponse` the request response data model
    */
    -(NSDictionary*) exchangeInstanceDnsSyncWithRequest:(RdsExchangeInstanceDnsRequest*) exchangeInstanceDnsRequest;

    -(void)exchangeInstanceDnsAsyncWithRequest:(RdsExchangeInstanceDnsRequest*) exchangeInstanceDnsRequest
    completionHandler:(void(^)(int statusCode,RdsExchangeInstanceDnsResponse* _Nullable exchangeInstanceDnsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disableAudit sync request
    @param disableAuditRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableAuditResponse` the request response data model
    */
    -(NSDictionary*) disableAuditSyncWithRequest:(RdsDisableAuditRequest*) disableAuditRequest;

    -(void)disableAuditAsyncWithRequest:(RdsDisableAuditRequest*) disableAuditRequest
    completionHandler:(void(^)(int statusCode,RdsDisableAuditResponse* _Nullable disableAuditResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createDatabase sync request
    @param createDatabaseRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createDatabaseResponse` the request response data model
    */
    -(NSDictionary*) createDatabaseSyncWithRequest:(RdsCreateDatabaseRequest*) createDatabaseRequest;

    -(void)createDatabaseAsyncWithRequest:(RdsCreateDatabaseRequest*) createDatabaseRequest
    completionHandler:(void(^)(int statusCode,RdsCreateDatabaseResponse* _Nullable createDatabaseResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableIntercept sync request
    @param enableInterceptRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableInterceptResponse` the request response data model
    */
    -(NSDictionary*) enableInterceptSyncWithRequest:(RdsEnableInterceptRequest*) enableInterceptRequest;

    -(void)enableInterceptAsyncWithRequest:(RdsEnableInterceptRequest*) enableInterceptRequest
    completionHandler:(void(^)(int statusCode,RdsEnableInterceptResponse* _Nullable enableInterceptResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setImportFileShared sync request
    @param setImportFileSharedRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setImportFileSharedResponse` the request response data model
    */
    -(NSDictionary*) setImportFileSharedSyncWithRequest:(RdsSetImportFileSharedRequest*) setImportFileSharedRequest;

    -(void)setImportFileSharedAsyncWithRequest:(RdsSetImportFileSharedRequest*) setImportFileSharedRequest
    completionHandler:(void(^)(int statusCode,RdsSetImportFileSharedResponse* _Nullable setImportFileSharedResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    rebootInstance sync request
    @param rebootInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `rebootInstanceResponse` the request response data model
    */
    -(NSDictionary*) rebootInstanceSyncWithRequest:(RdsRebootInstanceRequest*) rebootInstanceRequest;

    -(void)rebootInstanceAsyncWithRequest:(RdsRebootInstanceRequest*) rebootInstanceRequest
    completionHandler:(void(^)(int statusCode,RdsRebootInstanceResponse* _Nullable rebootInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeDatabases sync request
    @param describeDatabasesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeDatabasesResponse` the request response data model
    */
    -(NSDictionary*) describeDatabasesSyncWithRequest:(RdsDescribeDatabasesRequest*) describeDatabasesRequest;

    -(void)describeDatabasesAsyncWithRequest:(RdsDescribeDatabasesRequest*) describeDatabasesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeDatabasesResponse* _Nullable describeDatabasesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeIndexPerformance sync request
    @param describeIndexPerformanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeIndexPerformanceResponse` the request response data model
    */
    -(NSDictionary*) describeIndexPerformanceSyncWithRequest:(RdsDescribeIndexPerformanceRequest*) describeIndexPerformanceRequest;

    -(void)describeIndexPerformanceAsyncWithRequest:(RdsDescribeIndexPerformanceRequest*) describeIndexPerformanceRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeIndexPerformanceResponse* _Nullable describeIndexPerformanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createAudit sync request
    @param createAuditRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createAuditResponse` the request response data model
    */
    -(NSDictionary*) createAuditSyncWithRequest:(RdsCreateAuditRequest*) createAuditRequest;

    -(void)createAuditAsyncWithRequest:(RdsCreateAuditRequest*) createAuditRequest
    completionHandler:(void(^)(int statusCode,RdsCreateAuditResponse* _Nullable createAuditResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyInstanceName sync request
    @param modifyInstanceNameRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyInstanceNameResponse` the request response data model
    */
    -(NSDictionary*) modifyInstanceNameSyncWithRequest:(RdsModifyInstanceNameRequest*) modifyInstanceNameRequest;

    -(void)modifyInstanceNameAsyncWithRequest:(RdsModifyInstanceNameRequest*) modifyInstanceNameRequest
    completionHandler:(void(^)(int statusCode,RdsModifyInstanceNameResponse* _Nullable modifyInstanceNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    enableAudit sync request
    @param enableAuditRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `enableAuditResponse` the request response data model
    */
    -(NSDictionary*) enableAuditSyncWithRequest:(RdsEnableAuditRequest*) enableAuditRequest;

    -(void)enableAuditAsyncWithRequest:(RdsEnableAuditRequest*) enableAuditRequest
    completionHandler:(void(^)(int statusCode,RdsEnableAuditResponse* _Nullable enableAuditResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteParameterGroup sync request
    @param deleteParameterGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteParameterGroupResponse` the request response data model
    */
    -(NSDictionary*) deleteParameterGroupSyncWithRequest:(RdsDeleteParameterGroupRequest*) deleteParameterGroupRequest;

    -(void)deleteParameterGroupAsyncWithRequest:(RdsDeleteParameterGroupRequest*) deleteParameterGroupRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteParameterGroupResponse* _Nullable deleteParameterGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createBackup sync request
    @param createBackupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createBackupResponse` the request response data model
    */
    -(NSDictionary*) createBackupSyncWithRequest:(RdsCreateBackupRequest*) createBackupRequest;

    -(void)createBackupAsyncWithRequest:(RdsCreateBackupRequest*) createBackupRequest
    completionHandler:(void(^)(int statusCode,RdsCreateBackupResponse* _Nullable createBackupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createInstance sync request
    @param createInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createInstanceResponse` the request response data model
    */
    -(NSDictionary*) createInstanceSyncWithRequest:(RdsCreateInstanceRequest*) createInstanceRequest;

    -(void)createInstanceAsyncWithRequest:(RdsCreateInstanceRequest*) createInstanceRequest
    completionHandler:(void(^)(int statusCode,RdsCreateInstanceResponse* _Nullable createInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyBackupPolicy sync request
    @param modifyBackupPolicyRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyBackupPolicyResponse` the request response data model
    */
    -(NSDictionary*) modifyBackupPolicySyncWithRequest:(RdsModifyBackupPolicyRequest*) modifyBackupPolicyRequest;

    -(void)modifyBackupPolicyAsyncWithRequest:(RdsModifyBackupPolicyRequest*) modifyBackupPolicyRequest
    completionHandler:(void(^)(int statusCode,RdsModifyBackupPolicyResponse* _Nullable modifyBackupPolicyResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    restoreInstance sync request
    @param restoreInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `restoreInstanceResponse` the request response data model
    */
    -(NSDictionary*) restoreInstanceSyncWithRequest:(RdsRestoreInstanceRequest*) restoreInstanceRequest;

    -(void)restoreInstanceAsyncWithRequest:(RdsRestoreInstanceRequest*) restoreInstanceRequest
    completionHandler:(void(^)(int statusCode,RdsRestoreInstanceResponse* _Nullable restoreInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeLogs sync request
    @param describeLogsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeLogsResponse` the request response data model
    */
    -(NSDictionary*) describeLogsSyncWithRequest:(RdsDescribeLogsRequest*) describeLogsRequest;

    -(void)describeLogsAsyncWithRequest:(RdsDescribeLogsRequest*) describeLogsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeLogsResponse* _Nullable describeLogsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeImportFiles sync request
    @param describeImportFilesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeImportFilesResponse` the request response data model
    */
    -(NSDictionary*) describeImportFilesSyncWithRequest:(RdsDescribeImportFilesRequest*) describeImportFilesRequest;

    -(void)describeImportFilesAsyncWithRequest:(RdsDescribeImportFilesRequest*) describeImportFilesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeImportFilesResponse* _Nullable describeImportFilesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    restoreDatabaseFromOSS sync request
    @param restoreDatabaseFromOSSRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `restoreDatabaseFromOSSResponse` the request response data model
    */
    -(NSDictionary*) restoreDatabaseFromOSSSyncWithRequest:(RdsRestoreDatabaseFromOSSRequest*) restoreDatabaseFromOSSRequest;

    -(void)restoreDatabaseFromOSSAsyncWithRequest:(RdsRestoreDatabaseFromOSSRequest*) restoreDatabaseFromOSSRequest
    completionHandler:(void(^)(int statusCode,RdsRestoreDatabaseFromOSSResponse* _Nullable restoreDatabaseFromOSSResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeParameterGroups sync request
    @param describeParameterGroupsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeParameterGroupsResponse` the request response data model
    */
    -(NSDictionary*) describeParameterGroupsSyncWithRequest:(RdsDescribeParameterGroupsRequest*) describeParameterGroupsRequest;

    -(void)describeParameterGroupsAsyncWithRequest:(RdsDescribeParameterGroupsRequest*) describeParameterGroupsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeParameterGroupsResponse* _Nullable describeParameterGroupsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteBackup sync request
    @param deleteBackupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteBackupResponse` the request response data model
    */
    -(NSDictionary*) deleteBackupSyncWithRequest:(RdsDeleteBackupRequest*) deleteBackupRequest;

    -(void)deleteBackupAsyncWithRequest:(RdsDeleteBackupRequest*) deleteBackupRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteBackupResponse* _Nullable deleteBackupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBackupSynchronicities sync request
    @param describeBackupSynchronicitiesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBackupSynchronicitiesResponse` the request response data model
    */
    -(NSDictionary*) describeBackupSynchronicitiesSyncWithRequest:(RdsDescribeBackupSynchronicitiesRequest*) describeBackupSynchronicitiesRequest;

    -(void)describeBackupSynchronicitiesAsyncWithRequest:(RdsDescribeBackupSynchronicitiesRequest*) describeBackupSynchronicitiesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeBackupSynchronicitiesResponse* _Nullable describeBackupSynchronicitiesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeWhiteList sync request
    @param describeWhiteListRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeWhiteListResponse` the request response data model
    */
    -(NSDictionary*) describeWhiteListSyncWithRequest:(RdsDescribeWhiteListRequest*) describeWhiteListRequest;

    -(void)describeWhiteListAsyncWithRequest:(RdsDescribeWhiteListRequest*) describeWhiteListRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeWhiteListResponse* _Nullable describeWhiteListResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    restoreDatabaseFromBackup sync request
    @param restoreDatabaseFromBackupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `restoreDatabaseFromBackupResponse` the request response data model
    */
    -(NSDictionary*) restoreDatabaseFromBackupSyncWithRequest:(RdsRestoreDatabaseFromBackupRequest*) restoreDatabaseFromBackupRequest;

    -(void)restoreDatabaseFromBackupAsyncWithRequest:(RdsRestoreDatabaseFromBackupRequest*) restoreDatabaseFromBackupRequest
    completionHandler:(void(^)(int statusCode,RdsRestoreDatabaseFromBackupResponse* _Nullable restoreDatabaseFromBackupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeParameterGroupParameters sync request
    @param describeParameterGroupParametersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeParameterGroupParametersResponse` the request response data model
    */
    -(NSDictionary*) describeParameterGroupParametersSyncWithRequest:(RdsDescribeParameterGroupParametersRequest*) describeParameterGroupParametersRequest;

    -(void)describeParameterGroupParametersAsyncWithRequest:(RdsDescribeParameterGroupParametersRequest*) describeParameterGroupParametersRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeParameterGroupParametersResponse* _Nullable describeParameterGroupParametersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    failoverInstance sync request
    @param failoverInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `failoverInstanceResponse` the request response data model
    */
    -(NSDictionary*) failoverInstanceSyncWithRequest:(RdsFailoverInstanceRequest*) failoverInstanceRequest;

    -(void)failoverInstanceAsyncWithRequest:(RdsFailoverInstanceRequest*) failoverInstanceRequest
    completionHandler:(void(^)(int statusCode,RdsFailoverInstanceResponse* _Nullable failoverInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disableInternetAccess sync request
    @param disableInternetAccessRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disableInternetAccessResponse` the request response data model
    */
    -(NSDictionary*) disableInternetAccessSyncWithRequest:(RdsDisableInternetAccessRequest*) disableInternetAccessRequest;

    -(void)disableInternetAccessAsyncWithRequest:(RdsDisableInternetAccessRequest*) disableInternetAccessRequest
    completionHandler:(void(^)(int statusCode,RdsDisableInternetAccessResponse* _Nullable disableInternetAccessResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstances sync request
    @param describeInstancesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstancesResponse` the request response data model
    */
    -(NSDictionary*) describeInstancesSyncWithRequest:(RdsDescribeInstancesRequest*) describeInstancesRequest;

    -(void)describeInstancesAsyncWithRequest:(RdsDescribeInstancesRequest*) describeInstancesRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeInstancesResponse* _Nullable describeInstancesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createROInstance sync request
    @param createROInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createROInstanceResponse` the request response data model
    */
    -(NSDictionary*) createROInstanceSyncWithRequest:(RdsCreateROInstanceRequest*) createROInstanceRequest;

    -(void)createROInstanceAsyncWithRequest:(RdsCreateROInstanceRequest*) createROInstanceRequest
    completionHandler:(void(^)(int statusCode,RdsCreateROInstanceResponse* _Nullable createROInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeAuditOptions sync request
    @param describeAuditOptionsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuditOptionsResponse` the request response data model
    */
    -(NSDictionary*) describeAuditOptionsSyncWithRequest:(RdsDescribeAuditOptionsRequest*) describeAuditOptionsRequest;

    -(void)describeAuditOptionsAsyncWithRequest:(RdsDescribeAuditOptionsRequest*) describeAuditOptionsRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeAuditOptionsResponse* _Nullable describeAuditOptionsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteAccount sync request
    @param deleteAccountRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteAccountResponse` the request response data model
    */
    -(NSDictionary*) deleteAccountSyncWithRequest:(RdsDeleteAccountRequest*) deleteAccountRequest;

    -(void)deleteAccountAsyncWithRequest:(RdsDeleteAccountRequest*) deleteAccountRequest
    completionHandler:(void(^)(int statusCode,RdsDeleteAccountResponse* _Nullable deleteAccountResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyParameterGroupParameters sync request
    @param modifyParameterGroupParametersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyParameterGroupParametersResponse` the request response data model
    */
    -(NSDictionary*) modifyParameterGroupParametersSyncWithRequest:(RdsModifyParameterGroupParametersRequest*) modifyParameterGroupParametersRequest;

    -(void)modifyParameterGroupParametersAsyncWithRequest:(RdsModifyParameterGroupParametersRequest*) modifyParameterGroupParametersRequest
    completionHandler:(void(^)(int statusCode,RdsModifyParameterGroupParametersResponse* _Nullable modifyParameterGroupParametersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createInstanceByTimeInCrossRegion sync request
    @param createInstanceByTimeInCrossRegionRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createInstanceByTimeInCrossRegionResponse` the request response data model
    */
    -(NSDictionary*) createInstanceByTimeInCrossRegionSyncWithRequest:(RdsCreateInstanceByTimeInCrossRegionRequest*) createInstanceByTimeInCrossRegionRequest;

    -(void)createInstanceByTimeInCrossRegionAsyncWithRequest:(RdsCreateInstanceByTimeInCrossRegionRequest*) createInstanceByTimeInCrossRegionRequest
    completionHandler:(void(^)(int statusCode,RdsCreateInstanceByTimeInCrossRegionResponse* _Nullable createInstanceByTimeInCrossRegionResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeIntercept sync request
    @param describeInterceptRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInterceptResponse` the request response data model
    */
    -(NSDictionary*) describeInterceptSyncWithRequest:(RdsDescribeInterceptRequest*) describeInterceptRequest;

    -(void)describeInterceptAsyncWithRequest:(RdsDescribeInterceptRequest*) describeInterceptRequest
    completionHandler:(void(^)(int statusCode,RdsDescribeInterceptResponse* _Nullable describeInterceptResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    rds common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) rdsCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)rdsCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* RdsClient_h */
