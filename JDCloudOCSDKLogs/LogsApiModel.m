/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Logtopic APIs
日志服务日志主题相关的管理控制接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKLogs/LogsApiModel.h>


@implementation LogsSearchLogContextRequest
-(id) initWithRegion:(NSString *)regionId
anchor:(NSArray<NSObject*>*)anchor
direction:(NSString*)direction
idValue:(NSString*)idValue
lineSize:(NSNumber*)lineSize
time:(NSNumber*)time
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.anchor = anchor;
    self.direction = direction;
    self.idValue = idValue;
    self.lineSize = lineSize;
    self.time = time;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
anchor:(NSArray<NSObject*>*)anchor
direction:(NSString*)direction
idValue:(NSString*)idValue
lineSize:(NSNumber*)lineSize
time:(NSNumber*)time
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.anchor = anchor;
    self.direction = direction;
    self.idValue = idValue;
    self.lineSize = lineSize;
    self.time = time;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self anchor])
    {
        [result setValue:[self anchor] forKey:@"anchor"];
    }
    if([self direction])
    {
        [result setValue:[self direction] forKey:@"direction"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    if([self lineSize])
    {
        [result setValue:[self lineSize] forKey:@"lineSize"];
    }
    if([self time])
    {
        [result setValue:[self time] forKey:@"time"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.anchor = [dictionary objectForKey:@"anchor"];
    self.direction = [dictionary objectForKey:@"direction"];
    self.idValue = [dictionary objectForKey:@"id"];
    self.lineSize = [dictionary objectForKey:@"lineSize"];
    self.time = [dictionary objectForKey:@"time"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsSearchResult
-(id) initWithData:(NSArray<NSMutableDictionary<NSString*,NSObject*>*>*) data
        total:(NSNumber*)total { 
    self.data = data;               
    self.total = total;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[self data] forKey:@"data"];
    }
    if([self total])
    {
        [result setValue:[self total] forKey:@"total"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [dictionary objectForKey:@"data"];
    self.total = [dictionary objectForKey:@"total"];
    return self;
} 

@end
@implementation LogsSearchRequest
-(id) initWithRegion:(NSString *)regionId
action:(NSString*)action
expr:(NSString*)expr
caseSensitive:(NSNumber*)caseSensitive
startTime:(NSString*)startTime
endTime:(NSString*)endTime
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.action = action;
    self.expr = expr;
    self.caseSensitive = caseSensitive;
    self.startTime = startTime;
    self.endTime = endTime;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
action:(NSString*)action
expr:(NSString*)expr
caseSensitive:(NSNumber*)caseSensitive
startTime:(NSString*)startTime
endTime:(NSString*)endTime
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.action = action;
    self.expr = expr;
    self.caseSensitive = caseSensitive;
    self.startTime = startTime;
    self.endTime = endTime;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self action])
    {
        [result setValue:[self action] forKey:@"action"];
    }
    if([self expr])
    {
        [result setValue:[self expr] forKey:@"expr"];
    }
    if([self caseSensitive])
    {
        [result setValue:[self caseSensitive] forKey:@"caseSensitive"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.action = [dictionary objectForKey:@"action"];
    self.expr = [dictionary objectForKey:@"expr"];
    self.caseSensitive = [dictionary objectForKey:@"caseSensitive"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsSearchLogContextResult
-(id) initWithData:(NSArray<NSMutableDictionary<NSString*,NSObject*>*>*) data
        total:(NSNumber*)total { 
    self.data = data;               
    self.total = total;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[self data] forKey:@"data"];
    }
    if([self total])
    {
        [result setValue:[self total] forKey:@"total"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [dictionary objectForKey:@"data"];
    self.total = [dictionary objectForKey:@"total"];
    return self;
} 

@end
@implementation LogsDescribeMetricTaskRequest
-(id) initWithRegion:(NSString *)regionId
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID
logmetrictaskUID:(NSString*)logmetrictaskUID { 
    self.regionId = regionId;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    self.logmetrictaskUID = logmetrictaskUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID
logmetrictaskUID:(NSString*)logmetrictaskUID { 
    self.regionId = regionId;
    self.version = version;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    self.logmetrictaskUID = logmetrictaskUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    if([self logmetrictaskUID])
    {
        [result setValue:[self logmetrictaskUID] forKey:@"logmetrictaskUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    self.logmetrictaskUID = [dictionary objectForKey:@"logmetrictaskUID"];
    return self;
} 

@end
@implementation LogsCreateMetricTaskResult
-(id) initWithId:(NSString*) idValue
        suc:(NSString*)suc { 
    self.idValue = idValue;               
    self.suc = suc;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    if([self suc])
    {
        [result setValue:[self suc] forKey:@"suc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    self.suc = [dictionary objectForKey:@"suc"];
    return self;
} 

@end
@implementation LogsUpdateMetricTaskResult
-(id) initWithSuc:(NSString*) suc { 
    self.suc = suc;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self suc])
    {
        [result setValue:[self suc] forKey:@"suc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.suc = [dictionary objectForKey:@"suc"];
    return self;
} 

@end
@implementation LogsTestMetricTaskRequest
-(id) initWithRegion:(NSString *)regionId
aggregate:(NSString*)aggregate
content:(NSArray<NSString*>*)content
dataField:(NSString*)dataField
filterContent:(NSString*)filterContent
filterOpen:(NSString*)filterOpen
filterType:(NSString*)filterType
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.aggregate = aggregate;
    self.content = content;
    self.dataField = dataField;
    self.filterContent = filterContent;
    self.filterOpen = filterOpen;
    self.filterType = filterType;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
aggregate:(NSString*)aggregate
content:(NSArray<NSString*>*)content
dataField:(NSString*)dataField
filterContent:(NSString*)filterContent
filterOpen:(NSString*)filterOpen
filterType:(NSString*)filterType
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.aggregate = aggregate;
    self.content = content;
    self.dataField = dataField;
    self.filterContent = filterContent;
    self.filterOpen = filterOpen;
    self.filterType = filterType;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self aggregate])
    {
        [result setValue:[self aggregate] forKey:@"aggregate"];
    }
    if([self content])
    {
        [result setValue:[self content] forKey:@"content"];
    }
    if([self dataField])
    {
        [result setValue:[self dataField] forKey:@"dataField"];
    }
    if([self filterContent])
    {
        [result setValue:[self filterContent] forKey:@"filterContent"];
    }
    if([self filterOpen])
    {
        [result setValue:[self filterOpen] forKey:@"filterOpen"];
    }
    if([self filterType])
    {
        [result setValue:[self filterType] forKey:@"filterType"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.aggregate = [dictionary objectForKey:@"aggregate"];
    self.content = [dictionary objectForKey:@"content"];
    self.dataField = [dictionary objectForKey:@"dataField"];
    self.filterContent = [dictionary objectForKey:@"filterContent"];
    self.filterOpen = [dictionary objectForKey:@"filterOpen"];
    self.filterType = [dictionary objectForKey:@"filterType"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsCreateMetricTaskRequest
-(id) initWithRegion:(NSString *)regionId
aggregate:(NSString*)aggregate
customUnit:(NSString*)customUnit
dataField:(NSString*)dataField
filterContent:(NSString*)filterContent
filterOpen:(NSString*)filterOpen
filterType:(NSString*)filterType
interval:(NSNumber*)interval
metric:(NSString*)metric
name:(NSString*)name
unit:(NSString*)unit
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.aggregate = aggregate;
    self.customUnit = customUnit;
    self.dataField = dataField;
    self.filterContent = filterContent;
    self.filterOpen = filterOpen;
    self.filterType = filterType;
    self.interval = interval;
    self.metric = metric;
    self.name = name;
    self.unit = unit;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
aggregate:(NSString*)aggregate
customUnit:(NSString*)customUnit
dataField:(NSString*)dataField
filterContent:(NSString*)filterContent
filterOpen:(NSString*)filterOpen
filterType:(NSString*)filterType
interval:(NSNumber*)interval
metric:(NSString*)metric
name:(NSString*)name
unit:(NSString*)unit
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.aggregate = aggregate;
    self.customUnit = customUnit;
    self.dataField = dataField;
    self.filterContent = filterContent;
    self.filterOpen = filterOpen;
    self.filterType = filterType;
    self.interval = interval;
    self.metric = metric;
    self.name = name;
    self.unit = unit;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self aggregate])
    {
        [result setValue:[self aggregate] forKey:@"aggregate"];
    }
    if([self customUnit])
    {
        [result setValue:[self customUnit] forKey:@"customUnit"];
    }
    if([self dataField])
    {
        [result setValue:[self dataField] forKey:@"dataField"];
    }
    if([self filterContent])
    {
        [result setValue:[self filterContent] forKey:@"filterContent"];
    }
    if([self filterOpen])
    {
        [result setValue:[self filterOpen] forKey:@"filterOpen"];
    }
    if([self filterType])
    {
        [result setValue:[self filterType] forKey:@"filterType"];
    }
    if([self interval])
    {
        [result setValue:[self interval] forKey:@"interval"];
    }
    if([self metric])
    {
        [result setValue:[self metric] forKey:@"metric"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self unit])
    {
        [result setValue:[self unit] forKey:@"unit"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.aggregate = [dictionary objectForKey:@"aggregate"];
    self.customUnit = [dictionary objectForKey:@"customUnit"];
    self.dataField = [dictionary objectForKey:@"dataField"];
    self.filterContent = [dictionary objectForKey:@"filterContent"];
    self.filterOpen = [dictionary objectForKey:@"filterOpen"];
    self.filterType = [dictionary objectForKey:@"filterType"];
    self.interval = [dictionary objectForKey:@"interval"];
    self.metric = [dictionary objectForKey:@"metric"];
    self.name = [dictionary objectForKey:@"name"];
    self.unit = [dictionary objectForKey:@"unit"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsTestMetricTaskResult
-(id) initWithLines:(NSArray<NSString*>*) lines
        value:(NSNumber*)value { 
    self.lines = lines;               
    self.value = value;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self lines])
    {
        [result setValue:[self lines] forKey:@"lines"];
    }
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.lines = [dictionary objectForKey:@"lines"];
    self.value = [dictionary objectForKey:@"value"];
    return self;
} 

@end
@implementation LogsDescribeMetricTasksRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsUpdateMetricTaskRequest
-(id) initWithRegion:(NSString *)regionId
customUnit:(NSString*)customUnit
filterContent:(NSString*)filterContent
filterOpen:(NSString*)filterOpen
filterType:(NSString*)filterType
name:(NSString*)name
unit:(NSString*)unit
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID
logmetrictaskUID:(NSString*)logmetrictaskUID { 
    self.regionId = regionId;
    self.customUnit = customUnit;
    self.filterContent = filterContent;
    self.filterOpen = filterOpen;
    self.filterType = filterType;
    self.name = name;
    self.unit = unit;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    self.logmetrictaskUID = logmetrictaskUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
customUnit:(NSString*)customUnit
filterContent:(NSString*)filterContent
filterOpen:(NSString*)filterOpen
filterType:(NSString*)filterType
name:(NSString*)name
unit:(NSString*)unit
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID
logmetrictaskUID:(NSString*)logmetrictaskUID { 
    self.regionId = regionId;
    self.version = version;
    self.customUnit = customUnit;
    self.filterContent = filterContent;
    self.filterOpen = filterOpen;
    self.filterType = filterType;
    self.name = name;
    self.unit = unit;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    self.logmetrictaskUID = logmetrictaskUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self customUnit])
    {
        [result setValue:[self customUnit] forKey:@"customUnit"];
    }
    if([self filterContent])
    {
        [result setValue:[self filterContent] forKey:@"filterContent"];
    }
    if([self filterOpen])
    {
        [result setValue:[self filterOpen] forKey:@"filterOpen"];
    }
    if([self filterType])
    {
        [result setValue:[self filterType] forKey:@"filterType"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self unit])
    {
        [result setValue:[self unit] forKey:@"unit"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    if([self logmetrictaskUID])
    {
        [result setValue:[self logmetrictaskUID] forKey:@"logmetrictaskUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.customUnit = [dictionary objectForKey:@"customUnit"];
    self.filterContent = [dictionary objectForKey:@"filterContent"];
    self.filterOpen = [dictionary objectForKey:@"filterOpen"];
    self.filterType = [dictionary objectForKey:@"filterType"];
    self.name = [dictionary objectForKey:@"name"];
    self.unit = [dictionary objectForKey:@"unit"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    self.logmetrictaskUID = [dictionary objectForKey:@"logmetrictaskUID"];
    return self;
} 

@end
@implementation LogsDeleteMetricTaskRequest
-(id) initWithRegion:(NSString *)regionId
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID
logmetrictaskUID:(NSString*)logmetrictaskUID { 
    self.regionId = regionId;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    self.logmetrictaskUID = logmetrictaskUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
logsetUID:(NSString*)logsetUID
logtopicUID:(NSString*)logtopicUID
logmetrictaskUID:(NSString*)logmetrictaskUID { 
    self.regionId = regionId;
    self.version = version;
    self.logsetUID = logsetUID;
    self.logtopicUID = logtopicUID;
    self.logmetrictaskUID = logmetrictaskUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    if([self logmetrictaskUID])
    {
        [result setValue:[self logmetrictaskUID] forKey:@"logmetrictaskUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    self.logmetrictaskUID = [dictionary objectForKey:@"logmetrictaskUID"];
    return self;
} 

@end
@implementation LogsDeleteMetricTaskResult
-(id) initWithSuc:(NSString*) suc { 
    self.suc = suc;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self suc])
    {
        [result setValue:[self suc] forKey:@"suc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.suc = [dictionary objectForKey:@"suc"];
    return self;
} 

@end
@implementation LogsCreateLogsetRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
lifeCycle:(NSNumber*)lifeCycle { 
    self.regionId = regionId;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.lifeCycle = lifeCycle;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
lifeCycle:(NSNumber*)lifeCycle { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.lifeCycle = lifeCycle;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self lifeCycle])
    {
        [result setValue:[self lifeCycle] forKey:@"lifeCycle"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.lifeCycle = [dictionary objectForKey:@"lifeCycle"];
    return self;
} 

@end
@implementation LogsDescribeLogsetResult
-(id) initWithUID:(NSString*) uID
        createTime:(NSString*)createTime
        descriptionValue:(NSString*)descriptionValue
        hasTopic:(NSNumber*)hasTopic
        lifeCycle:(NSNumber*)lifeCycle
        name:(NSString*)name
        region:(NSString*)region { 
    self.uID = uID;               
    self.createTime = createTime;               
    self.descriptionValue = descriptionValue;               
    self.hasTopic = hasTopic;               
    self.lifeCycle = lifeCycle;               
    self.name = name;               
    self.region = region;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self uID])
    {
        [result setValue:[self uID] forKey:@"uID"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self hasTopic])
    {
        [result setValue:[self hasTopic] forKey:@"hasTopic"];
    }
    if([self lifeCycle])
    {
        [result setValue:[self lifeCycle] forKey:@"lifeCycle"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.uID = [dictionary objectForKey:@"uID"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.hasTopic = [dictionary objectForKey:@"hasTopic"];
    self.lifeCycle = [dictionary objectForKey:@"lifeCycle"];
    self.name = [dictionary objectForKey:@"name"];
    self.region = [dictionary objectForKey:@"region"];
    return self;
} 

@end
@implementation LogsDescribeLogsetRequest
-(id) initWithRegion:(NSString *)regionId
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.logsetUID = logsetUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.version = version;
    self.logsetUID = logsetUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    return self;
} 

@end
@implementation LogsCreateLogsetResult
-(id) initWithUID:(NSString*) uID { 
    self.uID = uID;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self uID])
    {
        [result setValue:[self uID] forKey:@"uID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.uID = [dictionary objectForKey:@"uID"];
    return self;
} 

@end
@implementation LogsUpdateLogsetRequest
-(id) initWithRegion:(NSString *)regionId
descriptionValue:(NSString*)descriptionValue
lifeCycle:(NSNumber*)lifeCycle
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.descriptionValue = descriptionValue;
    self.lifeCycle = lifeCycle;
    self.logsetUID = logsetUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
descriptionValue:(NSString*)descriptionValue
lifeCycle:(NSNumber*)lifeCycle
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.version = version;
    self.descriptionValue = descriptionValue;
    self.lifeCycle = lifeCycle;
    self.logsetUID = logsetUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self lifeCycle])
    {
        [result setValue:[self lifeCycle] forKey:@"lifeCycle"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.lifeCycle = [dictionary objectForKey:@"lifeCycle"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    return self;
} 

@end
@implementation LogsDeleteLogsetRequest
-(id) initWithRegion:(NSString *)regionId
logsetUIDs:(NSString*)logsetUIDs { 
    self.regionId = regionId;
    self.logsetUIDs = logsetUIDs;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
logsetUIDs:(NSString*)logsetUIDs { 
    self.regionId = regionId;
    self.version = version;
    self.logsetUIDs = logsetUIDs;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self logsetUIDs])
    {
        [result setValue:[self logsetUIDs] forKey:@"logsetUIDs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logsetUIDs = [dictionary objectForKey:@"logsetUIDs"];
    return self;
} 

@end
@implementation LogsDescribeLogsetsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation LogsDescribeInstanceCollectConfsRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation LogsDescribeLogdCARequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation LogsDescribeLogdCAResult
-(id) initWithCert:(NSString*) cert
        expiryDate:(NSNumber*)expiryDate
        privateKey:(NSString*)privateKey { 
    self.cert = cert;               
    self.expiryDate = expiryDate;               
    self.privateKey = privateKey;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self cert])
    {
        [result setValue:[self cert] forKey:@"cert"];
    }
    if([self expiryDate])
    {
        [result setValue:[self expiryDate] forKey:@"expiryDate"];
    }
    if([self privateKey])
    {
        [result setValue:[self privateKey] forKey:@"privateKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cert = [dictionary objectForKey:@"cert"];
    self.expiryDate = [dictionary objectForKey:@"expiryDate"];
    self.privateKey = [dictionary objectForKey:@"privateKey"];
    return self;
} 

@end
@implementation LogsCreateCollectInfoResult
-(id) initWithUID:(NSString*) uID { 
    self.uID = uID;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self uID])
    {
        [result setValue:[self uID] forKey:@"uID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.uID = [dictionary objectForKey:@"uID"];
    return self;
} 

@end
@implementation LogsDescribeCollectInfoRequest
-(id) initWithRegion:(NSString *)regionId
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.collectInfoUID = collectInfoUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.version = version;
    self.collectInfoUID = collectInfoUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self collectInfoUID])
    {
        [result setValue:[self collectInfoUID] forKey:@"collectInfoUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.collectInfoUID = [dictionary objectForKey:@"collectInfoUID"];
    return self;
} 

@end
@implementation LogsDescribeCollectResourcesRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.collectInfoUID = collectInfoUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.collectInfoUID = collectInfoUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self collectInfoUID])
    {
        [result setValue:[self collectInfoUID] forKey:@"collectInfoUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.collectInfoUID = [dictionary objectForKey:@"collectInfoUID"];
    return self;
} 

@end
@implementation LogsDeleteLogtopicRequest
-(id) initWithRegion:(NSString *)regionId
logsetUID:(NSString*)logsetUID
logtopicUIDs:(NSString*)logtopicUIDs { 
    self.regionId = regionId;
    self.logsetUID = logsetUID;
    self.logtopicUIDs = logtopicUIDs;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
logsetUID:(NSString*)logsetUID
logtopicUIDs:(NSString*)logtopicUIDs { 
    self.regionId = regionId;
    self.version = version;
    self.logsetUID = logsetUID;
    self.logtopicUIDs = logtopicUIDs;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUIDs])
    {
        [result setValue:[self logtopicUIDs] forKey:@"logtopicUIDs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUIDs = [dictionary objectForKey:@"logtopicUIDs"];
    return self;
} 

@end
@implementation LogsDescribeLogtopicResult
-(id) initWithUID:(NSString*) uID
        appCode:(NSString*)appCode
        collectInfoUID:(NSString*)collectInfoUID
        createTime:(NSString*)createTime
        descriptionValue:(NSString*)descriptionValue
        logsetName:(NSString*)logsetName
        logsetUID:(NSString*)logsetUID
        name:(NSString*)name
        region:(NSString*)region { 
    self.uID = uID;               
    self.appCode = appCode;               
    self.collectInfoUID = collectInfoUID;               
    self.createTime = createTime;               
    self.descriptionValue = descriptionValue;               
    self.logsetName = logsetName;               
    self.logsetUID = logsetUID;               
    self.name = name;               
    self.region = region;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self uID])
    {
        [result setValue:[self uID] forKey:@"uID"];
    }
    if([self appCode])
    {
        [result setValue:[self appCode] forKey:@"appCode"];
    }
    if([self collectInfoUID])
    {
        [result setValue:[self collectInfoUID] forKey:@"collectInfoUID"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self logsetName])
    {
        [result setValue:[self logsetName] forKey:@"logsetName"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.uID = [dictionary objectForKey:@"uID"];
    self.appCode = [dictionary objectForKey:@"appCode"];
    self.collectInfoUID = [dictionary objectForKey:@"collectInfoUID"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.logsetName = [dictionary objectForKey:@"logsetName"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.name = [dictionary objectForKey:@"name"];
    self.region = [dictionary objectForKey:@"region"];
    return self;
} 

@end
@implementation LogsUpdateLogtopicRequest
-(id) initWithRegion:(NSString *)regionId
descriptionValue:(NSString*)descriptionValue
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.descriptionValue = descriptionValue;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
descriptionValue:(NSString*)descriptionValue
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.descriptionValue = descriptionValue;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsCreateLogtopicRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.logsetUID = logsetUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.logsetUID = logsetUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    return self;
} 

@end
@implementation LogsDescribeLogtopicRequest
-(id) initWithRegion:(NSString *)regionId
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
@implementation LogsDescribeLogtopicsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.logsetUID = logsetUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
logsetUID:(NSString*)logsetUID { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.logsetUID = logsetUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    return self;
} 

@end
@implementation LogsCreateLogtopicResult
-(id) initWithUID:(NSString*) uID { 
    self.uID = uID;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self uID])
    {
        [result setValue:[self uID] forKey:@"uID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.uID = [dictionary objectForKey:@"uID"];
    return self;
} 

@end
  
@implementation LogsSearchLogContextResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsSearchLogContextResult* result = [[LogsSearchLogContextResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsSearchLogContextResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsSearchResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsSearchResult* result = [[LogsSearchResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsSearchResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsPutResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsPutResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsPutResult* result = [[LogsPutResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsPutResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsPutRequest
-(id) initWithRegion:(NSString *)regionId
stream:(NSString*)stream
timestamp:(NSString*)timestamp
entries:(NSArray<Entry*>*)entries
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.stream = stream;
    self.timestamp = timestamp;
    self.entries = entries;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
stream:(NSString*)stream
timestamp:(NSString*)timestamp
entries:(NSArray<Entry*>*)entries
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.stream = stream;
    self.timestamp = timestamp;
    self.entries = entries;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self stream])
    {
        [result setValue:[self stream] forKey:@"stream"];
    }
    if([self timestamp])
    {
        [result setValue:[self timestamp] forKey:@"timestamp"];
    }
    if([self entries])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self entries] count]; i++) {
            Entry* item = [[self entries] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"entries"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.stream = [dictionary objectForKey:@"stream"];
    self.timestamp = [dictionary objectForKey:@"timestamp"];
    NSArray* entriesArray = [dictionary objectForKey:@"entries"];
    if(entriesArray&&![entriesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [entriesArray count];i++)
        {
        Entry* item = [[Entry alloc]initWithDic:[entriesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.entries = propertyArray;
    }
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
  
@implementation LogsTestMetricTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsTestMetricTaskResult* result = [[LogsTestMetricTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsTestMetricTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsUpdateMetricTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsUpdateMetricTaskResult* result = [[LogsUpdateMetricTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsUpdateMetricTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDescribeMetricTaskResult
-(id) initWithData:(MetrictaskDetailEnd*) data { 
    self.data = data;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        [result setValue:[[self data] dictionary]forKey:@"data"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.data = [[MetrictaskDetailEnd alloc]initWithDic:[dictionary objectForKey:@"data"]];
    return self;
} 

@end
  
@implementation LogsDescribeMetricTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeMetricTaskResult* result = [[LogsDescribeMetricTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeMetricTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsDeleteMetricTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDeleteMetricTaskResult* result = [[LogsDeleteMetricTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDeleteMetricTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDescribeMetricTasksResult
-(id) initWithData:(NSArray<MetrictaskDetailEnd*>*) data
        numberPages:(NSNumber*)numberPages
        numberRecords:(NSNumber*)numberRecords
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.data = data;               
    self.numberPages = numberPages;               
    self.numberRecords = numberRecords;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self data] count]; i++) {
            MetrictaskDetailEnd* item = [[self data] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"data"];
    }
    if([self numberPages])
    {
        [result setValue:[self numberPages] forKey:@"numberPages"];
    }
    if([self numberRecords])
    {
        [result setValue:[self numberRecords] forKey:@"numberRecords"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataArray = [dictionary objectForKey:@"data"];
    if(dataArray&&![dataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataArray count];i++)
        {
        MetrictaskDetailEnd* item = [[MetrictaskDetailEnd alloc]initWithDic:[dataArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.data = propertyArray;
    }
    self.numberPages = [dictionary objectForKey:@"numberPages"];
    self.numberRecords = [dictionary objectForKey:@"numberRecords"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
  
@implementation LogsDescribeMetricTasksResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeMetricTasksResult* result = [[LogsDescribeMetricTasksResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeMetricTasksResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsCreateMetricTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsCreateMetricTaskResult* result = [[LogsCreateMetricTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsCreateMetricTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDescribeLogsetsResult
-(id) initWithData:(NSArray<LogsetEnd*>*) data
        numberPages:(NSNumber*)numberPages
        numberRecords:(NSNumber*)numberRecords
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.data = data;               
    self.numberPages = numberPages;               
    self.numberRecords = numberRecords;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self data] count]; i++) {
            LogsetEnd* item = [[self data] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"data"];
    }
    if([self numberPages])
    {
        [result setValue:[self numberPages] forKey:@"numberPages"];
    }
    if([self numberRecords])
    {
        [result setValue:[self numberRecords] forKey:@"numberRecords"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataArray = [dictionary objectForKey:@"data"];
    if(dataArray&&![dataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataArray count];i++)
        {
        LogsetEnd* item = [[LogsetEnd alloc]initWithDic:[dataArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.data = propertyArray;
    }
    self.numberPages = [dictionary objectForKey:@"numberPages"];
    self.numberRecords = [dictionary objectForKey:@"numberRecords"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
@implementation LogsUpdateLogsetResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsUpdateLogsetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsUpdateLogsetResult* result = [[LogsUpdateLogsetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsUpdateLogsetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDeleteLogsetResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsDeleteLogsetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDeleteLogsetResult* result = [[LogsDeleteLogsetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDeleteLogsetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsDescribeLogsetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeLogsetResult* result = [[LogsDescribeLogsetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeLogsetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsDescribeLogsetsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeLogsetsResult* result = [[LogsDescribeLogsetsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeLogsetsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsCreateLogsetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsCreateLogsetResult* result = [[LogsCreateLogsetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsCreateLogsetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDescribeInstanceCollectConfsResult
-(id) initWithConfs:(NSArray<CollectConf*>*) confs { 
    self.confs = confs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self confs])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self confs] count]; i++) {
            CollectConf* item = [[self confs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"confs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* confsArray = [dictionary objectForKey:@"confs"];
    if(confsArray&&![confsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [confsArray count];i++)
        {
        CollectConf* item = [[CollectConf alloc]initWithDic:[confsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.confs = propertyArray;
    }
    return self;
} 

@end
  
@implementation LogsDescribeInstanceCollectConfsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeInstanceCollectConfsResult* result = [[LogsDescribeInstanceCollectConfsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeInstanceCollectConfsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsDescribeLogdCAResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeLogdCAResult* result = [[LogsDescribeLogdCAResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeLogdCAResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsUpdateCollectResourcesResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsUpdateCollectResourcesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsUpdateCollectResourcesResult* result = [[LogsUpdateCollectResourcesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsUpdateCollectResourcesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDescribeCollectResourcesResult
-(id) initWithData:(NSArray<ResourceEnd*>*) data
        numberPages:(NSNumber*)numberPages
        numberRecords:(NSNumber*)numberRecords
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.data = data;               
    self.numberPages = numberPages;               
    self.numberRecords = numberRecords;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self data] count]; i++) {
            ResourceEnd* item = [[self data] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"data"];
    }
    if([self numberPages])
    {
        [result setValue:[self numberPages] forKey:@"numberPages"];
    }
    if([self numberRecords])
    {
        [result setValue:[self numberRecords] forKey:@"numberRecords"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataArray = [dictionary objectForKey:@"data"];
    if(dataArray&&![dataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataArray count];i++)
        {
        ResourceEnd* item = [[ResourceEnd alloc]initWithDic:[dataArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.data = propertyArray;
    }
    self.numberPages = [dictionary objectForKey:@"numberPages"];
    self.numberRecords = [dictionary objectForKey:@"numberRecords"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
@implementation LogsUpdateCollectInfoResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsUpdateCollectInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsUpdateCollectInfoResult* result = [[LogsUpdateCollectInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsUpdateCollectInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsUpdateCollectInfoRequest
-(id) initWithRegion:(NSString *)regionId
enabled:(NSNumber*)enabled
resourceType:(NSString*)resourceType
resources:(NSArray<Resource*>*)resources
logPath:(NSString*)logPath
logFile:(NSString*)logFile
logFilters:(NSArray<NSString*>*)logFilters
filterEnabled:(NSNumber*)filterEnabled
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.enabled = enabled;
    self.resourceType = resourceType;
    self.resources = resources;
    self.logPath = logPath;
    self.logFile = logFile;
    self.logFilters = logFilters;
    self.filterEnabled = filterEnabled;
    self.collectInfoUID = collectInfoUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
enabled:(NSNumber*)enabled
resourceType:(NSString*)resourceType
resources:(NSArray<Resource*>*)resources
logPath:(NSString*)logPath
logFile:(NSString*)logFile
logFilters:(NSArray<NSString*>*)logFilters
filterEnabled:(NSNumber*)filterEnabled
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.version = version;
    self.enabled = enabled;
    self.resourceType = resourceType;
    self.resources = resources;
    self.logPath = logPath;
    self.logFile = logFile;
    self.logFilters = logFilters;
    self.filterEnabled = filterEnabled;
    self.collectInfoUID = collectInfoUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self enabled])
    {
        [result setValue:[self enabled] forKey:@"enabled"];
    }
    if([self resourceType])
    {
        [result setValue:[self resourceType] forKey:@"resourceType"];
    }
    if([self resources])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self resources] count]; i++) {
            Resource* item = [[self resources] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"resources"];
    }
    if([self logPath])
    {
        [result setValue:[self logPath] forKey:@"logPath"];
    }
    if([self logFile])
    {
        [result setValue:[self logFile] forKey:@"logFile"];
    }
    if([self logFilters])
    {
        [result setValue:[self logFilters] forKey:@"logFilters"];
    }
    if([self filterEnabled])
    {
        [result setValue:[self filterEnabled] forKey:@"filterEnabled"];
    }
    if([self collectInfoUID])
    {
        [result setValue:[self collectInfoUID] forKey:@"collectInfoUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.enabled = [dictionary objectForKey:@"enabled"];
    self.resourceType = [dictionary objectForKey:@"resourceType"];
    NSArray* resourcesArray = [dictionary objectForKey:@"resources"];
    if(resourcesArray&&![resourcesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [resourcesArray count];i++)
        {
        Resource* item = [[Resource alloc]initWithDic:[resourcesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.resources = propertyArray;
    }
    self.logPath = [dictionary objectForKey:@"logPath"];
    self.logFile = [dictionary objectForKey:@"logFile"];
    self.logFilters = [dictionary objectForKey:@"logFilters"];
    self.filterEnabled = [dictionary objectForKey:@"filterEnabled"];
    self.collectInfoUID = [dictionary objectForKey:@"collectInfoUID"];
    return self;
} 

@end
@implementation LogsDescribeCollectInfoResult
-(id) initWithUID:(NSString*) uID
        appCode:(NSString*)appCode
        detail:(CollectTempalteEnd*)detail
        enabled:(NSNumber*)enabled
        hasResource:(NSNumber*)hasResource
        logsetUID:(NSString*)logsetUID
        logtopicUID:(NSString*)logtopicUID
        resourceType:(NSString*)resourceType
        serviceCode:(NSString*)serviceCode
        templateName:(NSString*)templateName
        templateUID:(NSString*)templateUID { 
    self.uID = uID;               
    self.appCode = appCode;               
    self.detail = detail;               
    self.enabled = enabled;               
    self.hasResource = hasResource;               
    self.logsetUID = logsetUID;               
    self.logtopicUID = logtopicUID;               
    self.resourceType = resourceType;               
    self.serviceCode = serviceCode;               
    self.templateName = templateName;               
    self.templateUID = templateUID;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self uID])
    {
        [result setValue:[self uID] forKey:@"uID"];
    }
    if([self appCode])
    {
        [result setValue:[self appCode] forKey:@"appCode"];
    }
    if([self detail])
    {
        [result setValue:[[self detail] dictionary]forKey:@"detail"];
    }
    if([self enabled])
    {
        [result setValue:[self enabled] forKey:@"enabled"];
    }
    if([self hasResource])
    {
        [result setValue:[self hasResource] forKey:@"hasResource"];
    }
    if([self logsetUID])
    {
        [result setValue:[self logsetUID] forKey:@"logsetUID"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    if([self resourceType])
    {
        [result setValue:[self resourceType] forKey:@"resourceType"];
    }
    if([self serviceCode])
    {
        [result setValue:[self serviceCode] forKey:@"serviceCode"];
    }
    if([self templateName])
    {
        [result setValue:[self templateName] forKey:@"templateName"];
    }
    if([self templateUID])
    {
        [result setValue:[self templateUID] forKey:@"templateUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.uID = [dictionary objectForKey:@"uID"];
    self.appCode = [dictionary objectForKey:@"appCode"];
    self.detail = [[CollectTempalteEnd alloc]initWithDic:[dictionary objectForKey:@"detail"]];
    self.enabled = [dictionary objectForKey:@"enabled"];
    self.hasResource = [dictionary objectForKey:@"hasResource"];
    self.logsetUID = [dictionary objectForKey:@"logsetUID"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    self.resourceType = [dictionary objectForKey:@"resourceType"];
    self.serviceCode = [dictionary objectForKey:@"serviceCode"];
    self.templateName = [dictionary objectForKey:@"templateName"];
    self.templateUID = [dictionary objectForKey:@"templateUID"];
    return self;
} 

@end
  
@implementation LogsDescribeCollectResourcesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeCollectResourcesResult* result = [[LogsDescribeCollectResourcesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeCollectResourcesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsUpdateCollectResourcesRequest
-(id) initWithRegion:(NSString *)regionId
action:(NSString*)action
resources:(NSArray<Resource*>*)resources
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.action = action;
    self.resources = resources;
    self.collectInfoUID = collectInfoUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
action:(NSString*)action
resources:(NSArray<Resource*>*)resources
collectInfoUID:(NSString*)collectInfoUID { 
    self.regionId = regionId;
    self.version = version;
    self.action = action;
    self.resources = resources;
    self.collectInfoUID = collectInfoUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self action])
    {
        [result setValue:[self action] forKey:@"action"];
    }
    if([self resources])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self resources] count]; i++) {
            Resource* item = [[self resources] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"resources"];
    }
    if([self collectInfoUID])
    {
        [result setValue:[self collectInfoUID] forKey:@"collectInfoUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.action = [dictionary objectForKey:@"action"];
    NSArray* resourcesArray = [dictionary objectForKey:@"resources"];
    if(resourcesArray&&![resourcesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [resourcesArray count];i++)
        {
        Resource* item = [[Resource alloc]initWithDic:[resourcesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.resources = propertyArray;
    }
    self.collectInfoUID = [dictionary objectForKey:@"collectInfoUID"];
    return self;
} 

@end
@implementation LogsCreateCollectInfoRequest
-(id) initWithRegion:(NSString *)regionId
enabled:(NSNumber*)enabled
appCode:(NSString*)appCode
serviceCode:(NSString*)serviceCode
resourceType:(NSString*)resourceType
resources:(NSArray<Resource*>*)resources
templateUID:(NSString*)templateUID
logPath:(NSString*)logPath
logFile:(NSString*)logFile
logFilters:(NSArray<NSString*>*)logFilters
filterEnabled:(NSNumber*)filterEnabled
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.enabled = enabled;
    self.appCode = appCode;
    self.serviceCode = serviceCode;
    self.resourceType = resourceType;
    self.resources = resources;
    self.templateUID = templateUID;
    self.logPath = logPath;
    self.logFile = logFile;
    self.logFilters = logFilters;
    self.filterEnabled = filterEnabled;
    self.logtopicUID = logtopicUID;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
enabled:(NSNumber*)enabled
appCode:(NSString*)appCode
serviceCode:(NSString*)serviceCode
resourceType:(NSString*)resourceType
resources:(NSArray<Resource*>*)resources
templateUID:(NSString*)templateUID
logPath:(NSString*)logPath
logFile:(NSString*)logFile
logFilters:(NSArray<NSString*>*)logFilters
filterEnabled:(NSNumber*)filterEnabled
logtopicUID:(NSString*)logtopicUID { 
    self.regionId = regionId;
    self.version = version;
    self.enabled = enabled;
    self.appCode = appCode;
    self.serviceCode = serviceCode;
    self.resourceType = resourceType;
    self.resources = resources;
    self.templateUID = templateUID;
    self.logPath = logPath;
    self.logFile = logFile;
    self.logFilters = logFilters;
    self.filterEnabled = filterEnabled;
    self.logtopicUID = logtopicUID;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self enabled])
    {
        [result setValue:[self enabled] forKey:@"enabled"];
    }
    if([self appCode])
    {
        [result setValue:[self appCode] forKey:@"appCode"];
    }
    if([self serviceCode])
    {
        [result setValue:[self serviceCode] forKey:@"serviceCode"];
    }
    if([self resourceType])
    {
        [result setValue:[self resourceType] forKey:@"resourceType"];
    }
    if([self resources])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self resources] count]; i++) {
            Resource* item = [[self resources] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"resources"];
    }
    if([self templateUID])
    {
        [result setValue:[self templateUID] forKey:@"templateUID"];
    }
    if([self logPath])
    {
        [result setValue:[self logPath] forKey:@"logPath"];
    }
    if([self logFile])
    {
        [result setValue:[self logFile] forKey:@"logFile"];
    }
    if([self logFilters])
    {
        [result setValue:[self logFilters] forKey:@"logFilters"];
    }
    if([self filterEnabled])
    {
        [result setValue:[self filterEnabled] forKey:@"filterEnabled"];
    }
    if([self logtopicUID])
    {
        [result setValue:[self logtopicUID] forKey:@"logtopicUID"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.enabled = [dictionary objectForKey:@"enabled"];
    self.appCode = [dictionary objectForKey:@"appCode"];
    self.serviceCode = [dictionary objectForKey:@"serviceCode"];
    self.resourceType = [dictionary objectForKey:@"resourceType"];
    NSArray* resourcesArray = [dictionary objectForKey:@"resources"];
    if(resourcesArray&&![resourcesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [resourcesArray count];i++)
        {
        Resource* item = [[Resource alloc]initWithDic:[resourcesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.resources = propertyArray;
    }
    self.templateUID = [dictionary objectForKey:@"templateUID"];
    self.logPath = [dictionary objectForKey:@"logPath"];
    self.logFile = [dictionary objectForKey:@"logFile"];
    self.logFilters = [dictionary objectForKey:@"logFilters"];
    self.filterEnabled = [dictionary objectForKey:@"filterEnabled"];
    self.logtopicUID = [dictionary objectForKey:@"logtopicUID"];
    return self;
} 

@end
  
@implementation LogsDescribeCollectInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeCollectInfoResult* result = [[LogsDescribeCollectInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeCollectInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsCreateCollectInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsCreateCollectInfoResult* result = [[LogsCreateCollectInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsCreateCollectInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDeleteLogtopicResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsDeleteLogtopicResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDeleteLogtopicResult* result = [[LogsDeleteLogtopicResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDeleteLogtopicResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsUpdateLogtopicResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation LogsUpdateLogtopicResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsUpdateLogtopicResult* result = [[LogsUpdateLogtopicResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsUpdateLogtopicResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation LogsDescribeLogtopicsResult
-(id) initWithData:(NSArray<LogtopicDetailEnd*>*) data
        numberPages:(NSNumber*)numberPages
        numberRecords:(NSNumber*)numberRecords
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize { 
    self.data = data;               
    self.numberPages = numberPages;               
    self.numberRecords = numberRecords;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self data] count]; i++) {
            LogtopicDetailEnd* item = [[self data] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"data"];
    }
    if([self numberPages])
    {
        [result setValue:[self numberPages] forKey:@"numberPages"];
    }
    if([self numberRecords])
    {
        [result setValue:[self numberRecords] forKey:@"numberRecords"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataArray = [dictionary objectForKey:@"data"];
    if(dataArray&&![dataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataArray count];i++)
        {
        LogtopicDetailEnd* item = [[LogtopicDetailEnd alloc]initWithDic:[dataArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.data = propertyArray;
    }
    self.numberPages = [dictionary objectForKey:@"numberPages"];
    self.numberRecords = [dictionary objectForKey:@"numberRecords"];
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    return self;
} 

@end
  
@implementation LogsDescribeLogtopicsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeLogtopicsResult* result = [[LogsDescribeLogtopicsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeLogtopicsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsDescribeLogtopicResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsDescribeLogtopicResult* result = [[LogsDescribeLogtopicResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsDescribeLogtopicResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation LogsCreateLogtopicResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
LogsCreateLogtopicResult* result = [[LogsCreateLogtopicResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(LogsCreateLogtopicResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
