/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Pod
Pod 相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKPod/PodApiModel.h>


@implementation PodDescribeQuotaRequest
-(id) initWithRegion:(NSString *)regionId
resourceType:(NSString*)resourceType { 
    self.regionId = regionId;
    self.resourceType = resourceType;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
resourceType:(NSString*)resourceType { 
    self.regionId = regionId;
    self.version = version;
    self.resourceType = resourceType;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self resourceType])
    {
        [result setValue:[self resourceType] forKey:@"resourceType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.resourceType = [dictionary objectForKey:@"resourceType"];
    return self;
} 

@end
@implementation PodExecCreateRequest
-(id) initWithRegion:(NSString *)regionId
command:(NSArray<NSString*>*)command
tty:(NSNumber*)tty
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.command = command;
    self.tty = tty;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
command:(NSArray<NSString*>*)command
tty:(NSNumber*)tty
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.command = command;
    self.tty = tty;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self command])
    {
        [result setValue:[self command] forKey:@"command"];
    }
    if([self tty])
    {
        [result setValue:[self tty] forKey:@"tty"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.command = [dictionary objectForKey:@"command"];
    self.tty = [dictionary objectForKey:@"tty"];
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodExecGetExitCodeResult
-(id) initWithExecCode:(NSNumber*) execCode { 
    self.execCode = execCode;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self execCode])
    {
        [result setValue:[self execCode] forKey:@"execCode"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.execCode = [dictionary objectForKey:@"execCode"];
    return self;
} 

@end
@implementation PodAttachRequest
-(id) initWithRegion:(NSString *)regionId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodDescribeContainerRequest
-(id) initWithRegion:(NSString *)regionId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodExecGetExitCodeRequest
-(id) initWithRegion:(NSString *)regionId
execId:(NSString*)execId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.execId = execId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
execId:(NSString*)execId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.execId = execId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self execId])
    {
        [result setValue:[self execId] forKey:@"execId"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.execId = [dictionary objectForKey:@"execId"];
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodExecStartRequest
-(id) initWithRegion:(NSString *)regionId
execId:(NSString*)execId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.execId = execId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
execId:(NSString*)execId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.execId = execId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self execId])
    {
        [result setValue:[self execId] forKey:@"execId"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.execId = [dictionary objectForKey:@"execId"];
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodExecCreateResult
-(id) initWithExecId:(NSString*) execId { 
    self.execId = execId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self execId])
    {
        [result setValue:[self execId] forKey:@"execId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.execId = [dictionary objectForKey:@"execId"];
    return self;
} 

@end
@implementation PodResizeTTYRequest
-(id) initWithRegion:(NSString *)regionId
height:(NSNumber*)height
width:(NSNumber*)width
execId:(NSString*)execId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.height = height;
    self.width = width;
    self.execId = execId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
height:(NSNumber*)height
width:(NSNumber*)width
execId:(NSString*)execId
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.height = height;
    self.width = width;
    self.execId = execId;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self height])
    {
        [result setValue:[self height] forKey:@"height"];
    }
    if([self width])
    {
        [result setValue:[self width] forKey:@"width"];
    }
    if([self execId])
    {
        [result setValue:[self execId] forKey:@"execId"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.height = [dictionary objectForKey:@"height"];
    self.width = [dictionary objectForKey:@"width"];
    self.execId = [dictionary objectForKey:@"execId"];
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodDeleteSecretRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name { 
    self.regionId = regionId;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation PodDescribeSecretRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name { 
    self.regionId = regionId;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation PodCreateSecretResult
-(id) initWithSecretName:(NSString*) secretName { 
    self.secretName = secretName;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self secretName])
    {
        [result setValue:[self secretName] forKey:@"secretName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.secretName = [dictionary objectForKey:@"secretName"];
    return self;
} 

@end
@implementation PodModifyPodAttributeRequest
-(id) initWithRegion:(NSString *)regionId
descriptionValue:(NSString*)descriptionValue
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.descriptionValue = descriptionValue;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
descriptionValue:(NSString*)descriptionValue
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.descriptionValue = descriptionValue;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodStartPodRequest
-(id) initWithRegion:(NSString *)regionId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodDescribePodRequest
-(id) initWithRegion:(NSString *)regionId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodCheckPodNameRequest
-(id) initWithRegion:(NSString *)regionId
podName:(NSString*)podName
maxCount:(NSNumber*)maxCount { 
    self.regionId = regionId;
    self.podName = podName;
    self.maxCount = maxCount;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podName:(NSString*)podName
maxCount:(NSNumber*)maxCount { 
    self.regionId = regionId;
    self.version = version;
    self.podName = podName;
    self.maxCount = maxCount;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podName])
    {
        [result setValue:[self podName] forKey:@"podName"];
    }
    if([self maxCount])
    {
        [result setValue:[self maxCount] forKey:@"maxCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podName = [dictionary objectForKey:@"podName"];
    self.maxCount = [dictionary objectForKey:@"maxCount"];
    return self;
} 

@end
@implementation PodAssociateElasticIpRequest
-(id) initWithRegion:(NSString *)regionId
elasticIpId:(NSString*)elasticIpId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.elasticIpId = elasticIpId;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
elasticIpId:(NSString*)elasticIpId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.elasticIpId = elasticIpId;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodDeletePodRequest
-(id) initWithRegion:(NSString *)regionId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodCreatePodsResult
-(id) initWithPodIds:(NSArray<NSString*>*) podIds { 
    self.podIds = podIds;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self podIds])
    {
        [result setValue:[self podIds] forKey:@"podIds"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podIds = [dictionary objectForKey:@"podIds"];
    return self;
} 

@end
@implementation PodStopPodRequest
-(id) initWithRegion:(NSString *)regionId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodDisassociateElasticIpRequest
-(id) initWithRegion:(NSString *)regionId
elasticIpId:(NSString*)elasticIpId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.elasticIpId = elasticIpId;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
elasticIpId:(NSString*)elasticIpId
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.elasticIpId = elasticIpId;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodCheckPodNameResult
-(id) initWithCode:(NSNumber*) code
        reason:(NSString*)reason { 
    self.code = code;               
    self.reason = reason;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self code])
    {
        [result setValue:[self code] forKey:@"code"];
    }
    if([self reason])
    {
        [result setValue:[self reason] forKey:@"reason"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.code = [dictionary objectForKey:@"code"];
    self.reason = [dictionary objectForKey:@"reason"];
    return self;
} 

@end
@implementation PodGetContainerLogsRequest
-(id) initWithRegion:(NSString *)regionId
tailLines:(NSNumber*)tailLines
sinceSeconds:(NSNumber*)sinceSeconds
limitBytes:(NSNumber*)limitBytes
startTime:(NSString*)startTime
endTime:(NSString*)endTime
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.tailLines = tailLines;
    self.sinceSeconds = sinceSeconds;
    self.limitBytes = limitBytes;
    self.startTime = startTime;
    self.endTime = endTime;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
tailLines:(NSNumber*)tailLines
sinceSeconds:(NSNumber*)sinceSeconds
limitBytes:(NSNumber*)limitBytes
startTime:(NSString*)startTime
endTime:(NSString*)endTime
podId:(NSString*)podId
containerName:(NSString*)containerName { 
    self.regionId = regionId;
    self.version = version;
    self.tailLines = tailLines;
    self.sinceSeconds = sinceSeconds;
    self.limitBytes = limitBytes;
    self.startTime = startTime;
    self.endTime = endTime;
    self.podId = podId;
    self.containerName = containerName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self tailLines])
    {
        [result setValue:[self tailLines] forKey:@"tailLines"];
    }
    if([self sinceSeconds])
    {
        [result setValue:[self sinceSeconds] forKey:@"sinceSeconds"];
    }
    if([self limitBytes])
    {
        [result setValue:[self limitBytes] forKey:@"limitBytes"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    if([self containerName])
    {
        [result setValue:[self containerName] forKey:@"containerName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.tailLines = [dictionary objectForKey:@"tailLines"];
    self.sinceSeconds = [dictionary objectForKey:@"sinceSeconds"];
    self.limitBytes = [dictionary objectForKey:@"limitBytes"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.podId = [dictionary objectForKey:@"podId"];
    self.containerName = [dictionary objectForKey:@"containerName"];
    return self;
} 

@end
@implementation PodDescribeQuotaResult
-(id) initWithQuota:(PodQuota*) quota { 
    self.quota = quota;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self quota])
    {
        [result setValue:[[self quota] dictionary]forKey:@"quota"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.quota = [[PodQuota alloc]initWithDic:[dictionary objectForKey:@"quota"]];
    return self;
} 

@end
  
@implementation PodDescribeQuotaResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribeQuotaResult* result = [[PodDescribeQuotaResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribeQuotaResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribeInstanceTypesResult
-(id) initWithInstanceTypes:(NSArray<InstanceType*>*) instanceTypes
        specificInstanceTypes:(NSArray<InstanceType*>*)specificInstanceTypes
        totalCount:(NSNumber*)totalCount { 
    self.instanceTypes = instanceTypes;               
    self.specificInstanceTypes = specificInstanceTypes;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceTypes])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self instanceTypes] count]; i++) {
            InstanceType* item = [[self instanceTypes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"instanceTypes"];
    }
    if([self specificInstanceTypes])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self specificInstanceTypes] count]; i++) {
            InstanceType* item = [[self specificInstanceTypes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"specificInstanceTypes"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* instanceTypesArray = [dictionary objectForKey:@"instanceTypes"];
    if(instanceTypesArray&&![instanceTypesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [instanceTypesArray count];i++)
        {
        InstanceType* item = [[InstanceType alloc]initWithDic:[instanceTypesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.instanceTypes = propertyArray;
    }
    NSArray* specificInstanceTypesArray = [dictionary objectForKey:@"specificInstanceTypes"];
    if(specificInstanceTypesArray&&![specificInstanceTypesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [specificInstanceTypesArray count];i++)
        {
        InstanceType* item = [[InstanceType alloc]initWithDic:[specificInstanceTypesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.specificInstanceTypes = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation PodDescribeInstanceTypesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribeInstanceTypesResult* result = [[PodDescribeInstanceTypesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribeInstanceTypesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribeInstanceTypesRequest
-(id) initWithRegion:(NSString *)regionId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self filters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
        Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation PodResizeTTYResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodResizeTTYResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodResizeTTYResult* result = [[PodResizeTTYResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodResizeTTYResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodExecStartResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodExecStartResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodExecStartResult* result = [[PodExecStartResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodExecStartResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodAttachResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodAttachResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodAttachResult* result = [[PodAttachResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodAttachResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodExecCreateResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodExecCreateResult* result = [[PodExecCreateResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodExecCreateResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodExecGetExitCodeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodExecGetExitCodeResult* result = [[PodExecGetExitCodeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodExecGetExitCodeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribeContainerResult
-(id) initWithContainer:(Container*) container { 
    self.container = container;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self container])
    {
        [result setValue:[[self container] dictionary]forKey:@"container"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.container = [[Container alloc]initWithDic:[dictionary objectForKey:@"container"]];
    return self;
} 

@end
  
@implementation PodDescribeContainerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribeContainerResult* result = [[PodDescribeContainerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribeContainerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodCreateSecretRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
secretType:(NSString*)secretType
data:(DockerRegistryData*)data { 
    self.regionId = regionId;
    self.name = name;
    self.secretType = secretType;
    self.data = data;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
secretType:(NSString*)secretType
data:(DockerRegistryData*)data { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.secretType = secretType;
    self.data = data;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self secretType])
    {
        [result setValue:[self secretType] forKey:@"secretType"];
    }
    if([self data])
    {
        [result setValue:[[self data] dictionary]forKey:@"data"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.secretType = [dictionary objectForKey:@"secretType"];
    self.data = [[DockerRegistryData alloc]initWithDic:[dictionary objectForKey:@"data"]];
    return self;
} 

@end
@implementation PodDeleteSecretResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodDeleteSecretResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDeleteSecretResult* result = [[PodDeleteSecretResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDeleteSecretResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribeSecretResult
-(id) initWithSecret:(Secret*) secret { 
    self.secret = secret;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self secret])
    {
        [result setValue:[[self secret] dictionary]forKey:@"secret"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.secret = [[Secret alloc]initWithDic:[dictionary objectForKey:@"secret"]];
    return self;
} 

@end
@implementation PodDescribeSecretsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
        Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation PodDescribeSecretResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribeSecretResult* result = [[PodDescribeSecretResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribeSecretResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodCreateSecretResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodCreateSecretResult* result = [[PodCreateSecretResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodCreateSecretResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribeSecretsResult
-(id) initWithSecrets:(NSArray<Secret*>*) secrets
        totalCount:(NSNumber*)totalCount { 
    self.secrets = secrets;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self secrets])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self secrets] count]; i++) {
            Secret* item = [[self secrets] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"secrets"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* secretsArray = [dictionary objectForKey:@"secrets"];
    if(secretsArray&&![secretsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [secretsArray count];i++)
        {
        Secret* item = [[Secret alloc]initWithDic:[secretsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.secrets = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation PodDescribeSecretsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribeSecretsResult* result = [[PodDescribeSecretsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribeSecretsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribePodsResult
-(id) initWithPods:(NSArray<Pod*>*) pods
        totalCount:(NSNumber*)totalCount { 
    self.pods = pods;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pods])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self pods] count]; i++) {
            Pod* item = [[self pods] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"pods"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* podsArray = [dictionary objectForKey:@"pods"];
    if(podsArray&&![podsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [podsArray count];i++)
        {
        Pod* item = [[Pod alloc]initWithDic:[podsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.pods = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation PodModifyPodAttributeResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodModifyPodAttributeResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodModifyPodAttributeResult* result = [[PodModifyPodAttributeResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodModifyPodAttributeResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDisassociateElasticIpResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation PodStopPodResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodStopPodResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodStopPodResult* result = [[PodStopPodResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodStopPodResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodGetContainerLogsResult
-(id) initWithLogs:(Logs*) logs { 
    self.logs = logs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self logs])
    {
        [result setValue:[[self logs] dictionary]forKey:@"logs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.logs = [[Logs alloc]initWithDic:[dictionary objectForKey:@"logs"]];
    return self;
} 

@end
  
@implementation PodGetContainerLogsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodGetContainerLogsResult* result = [[PodGetContainerLogsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodGetContainerLogsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodDescribePodsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
tags:(NSArray<PodTagFilter*>*)tags { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.tags = tags;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters
tags:(NSArray<PodTagFilter*>*)tags { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    self.tags = tags;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    if([self tags])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self tags] count]; i++) {
            PodTagFilter* item = [[self tags] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"tags"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
        Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    NSArray* tagsArray = [dictionary objectForKey:@"tags"];
    if(tagsArray&&![tagsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [tagsArray count];i++)
        {
        PodTagFilter* item = [[PodTagFilter alloc]initWithDic:[tagsArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.tags = propertyArray;
    }
    return self;
} 

@end
@implementation PodAssociateElasticIpResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation PodCreatePodsRequest
-(id) initWithRegion:(NSString *)regionId
podSpec:(PodSpec*)podSpec
maxCount:(NSNumber*)maxCount
clientToken:(NSString*)clientToken { 
    self.regionId = regionId;
    self.podSpec = podSpec;
    self.maxCount = maxCount;
    self.clientToken = clientToken;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
podSpec:(PodSpec*)podSpec
maxCount:(NSNumber*)maxCount
clientToken:(NSString*)clientToken { 
    self.regionId = regionId;
    self.version = version;
    self.podSpec = podSpec;
    self.maxCount = maxCount;
    self.clientToken = clientToken;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self podSpec])
    {
        [result setValue:[[self podSpec] dictionary]forKey:@"podSpec"];
    }
    if([self maxCount])
    {
        [result setValue:[self maxCount] forKey:@"maxCount"];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.podSpec = [[PodSpec alloc]initWithDic:[dictionary objectForKey:@"podSpec"]];
    self.maxCount = [dictionary objectForKey:@"maxCount"];
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    return self;
} 

@end
@implementation PodRebuildPodRequest
-(id) initWithRegion:(NSString *)regionId
containers:(NSArray<RebuildContainerSpec*>*)containers
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.containers = containers;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
containers:(NSArray<RebuildContainerSpec*>*)containers
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.containers = containers;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self containers])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self containers] count]; i++) {
            RebuildContainerSpec* item = [[self containers] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"containers"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* containersArray = [dictionary objectForKey:@"containers"];
    if(containersArray&&![containersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [containersArray count];i++)
        {
        RebuildContainerSpec* item = [[RebuildContainerSpec alloc]initWithDic:[containersArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.containers = propertyArray;
    }
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
@implementation PodDeletePodResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation PodResizePodResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation PodDescribePodResult
-(id) initWithPod:(Pod*) pod { 
    self.pod = pod;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pod])
    {
        [result setValue:[[self pod] dictionary]forKey:@"pod"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pod = [[Pod alloc]initWithDic:[dictionary objectForKey:@"pod"]];
    return self;
} 

@end
@implementation PodStartPodResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodCheckPodNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodCheckPodNameResult* result = [[PodCheckPodNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodCheckPodNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodStartPodResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodStartPodResult* result = [[PodStartPodResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodStartPodResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodCreatePodsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodCreatePodsResult* result = [[PodCreatePodsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodCreatePodsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodResizePodResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodResizePodResult* result = [[PodResizePodResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodResizePodResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodRebuildPodResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation PodRebuildPodResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodRebuildPodResult* result = [[PodRebuildPodResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodRebuildPodResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodDescribePodsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribePodsResult* result = [[PodDescribePodsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribePodsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodDescribePodResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDescribePodResult* result = [[PodDescribePodResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDescribePodResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodAssociateElasticIpResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodAssociateElasticIpResult* result = [[PodAssociateElasticIpResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodAssociateElasticIpResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation PodResizePodRequest
-(id) initWithRegion:(NSString *)regionId
instanceType:(NSString*)instanceType
containerResources:(NSArray<ContainerResourceSpec*>*)containerResources
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.instanceType = instanceType;
    self.containerResources = containerResources;
    self.podId = podId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceType:(NSString*)instanceType
containerResources:(NSArray<ContainerResourceSpec*>*)containerResources
podId:(NSString*)podId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceType = instanceType;
    self.containerResources = containerResources;
    self.podId = podId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceType])
    {
        [result setValue:[self instanceType] forKey:@"instanceType"];
    }
    if([self containerResources])
    {
            NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
            for (int i =0 ; i< [[self containerResources] count]; i++) {
            ContainerResourceSpec* item = [[self containerResources] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"containerResources"];
    }
    if([self podId])
    {
        [result setValue:[self podId] forKey:@"podId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceType = [dictionary objectForKey:@"instanceType"];
    NSArray* containerResourcesArray = [dictionary objectForKey:@"containerResources"];
    if(containerResourcesArray&&![containerResourcesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [containerResourcesArray count];i++)
        {
        ContainerResourceSpec* item = [[ContainerResourceSpec alloc]initWithDic:[containerResourcesArray objectAtIndex:i]];
            if(item)
            {
            [propertyArray addObject:item];
            }
        }
        self.containerResources = propertyArray;
    }
    self.podId = [dictionary objectForKey:@"podId"];
    return self;
} 

@end
  
@implementation PodDeletePodResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDeletePodResult* result = [[PodDeletePodResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDeletePodResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation PodDisassociateElasticIpResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
PodDisassociateElasticIpResult* result = [[PodDisassociateElasticIpResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(PodDisassociateElasticIpResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
