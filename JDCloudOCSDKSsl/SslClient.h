/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

JDCLOUD SSL数字证书管理 API
提供SSL数字证书，证书申购记录管理相关信息接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef SslClient_h
#define SslClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKSsl/SslApiModel.h>

@interface SslClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    updateCert sync request
    @param updateCertRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateCertResponse` the request response data model
    */
    -(NSDictionary*) updateCertSyncWithRequest:(SslUpdateCertRequest*) updateCertRequest;

    -(void)updateCertAsyncWithRequest:(SslUpdateCertRequest*) updateCertRequest
    completionHandler:(void(^)(int statusCode,SslUpdateCertResponse* _Nullable updateCertResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeCert sync request
    @param describeCertRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCertResponse` the request response data model
    */
    -(NSDictionary*) describeCertSyncWithRequest:(SslDescribeCertRequest*) describeCertRequest;

    -(void)describeCertAsyncWithRequest:(SslDescribeCertRequest*) describeCertRequest
    completionHandler:(void(^)(int statusCode,SslDescribeCertResponse* _Nullable describeCertResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    uploadCert sync request
    @param uploadCertRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `uploadCertResponse` the request response data model
    */
    -(NSDictionary*) uploadCertSyncWithRequest:(SslUploadCertRequest*) uploadCertRequest;

    -(void)uploadCertAsyncWithRequest:(SslUploadCertRequest*) uploadCertRequest
    completionHandler:(void(^)(int statusCode,SslUploadCertResponse* _Nullable uploadCertResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteCerts sync request
    @param deleteCertsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteCertsResponse` the request response data model
    */
    -(NSDictionary*) deleteCertsSyncWithRequest:(SslDeleteCertsRequest*) deleteCertsRequest;

    -(void)deleteCertsAsyncWithRequest:(SslDeleteCertsRequest*) deleteCertsRequest
    completionHandler:(void(^)(int statusCode,SslDeleteCertsResponse* _Nullable deleteCertsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    downloadCert sync request
    @param downloadCertRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `downloadCertResponse` the request response data model
    */
    -(NSDictionary*) downloadCertSyncWithRequest:(SslDownloadCertRequest*) downloadCertRequest;

    -(void)downloadCertAsyncWithRequest:(SslDownloadCertRequest*) downloadCertRequest
    completionHandler:(void(^)(int statusCode,SslDownloadCertResponse* _Nullable downloadCertResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeCerts sync request
    @param describeCertsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeCertsResponse` the request response data model
    */
    -(NSDictionary*) describeCertsSyncWithRequest:(SslDescribeCertsRequest*) describeCertsRequest;

    -(void)describeCertsAsyncWithRequest:(SslDescribeCertsRequest*) describeCertsRequest
    completionHandler:(void(^)(int statusCode,SslDescribeCertsResponse* _Nullable describeCertsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateCertName sync request
    @param updateCertNameRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateCertNameResponse` the request response data model
    */
    -(NSDictionary*) updateCertNameSyncWithRequest:(SslUpdateCertNameRequest*) updateCertNameRequest;

    -(void)updateCertNameAsyncWithRequest:(SslUpdateCertNameRequest*) updateCertNameRequest
    completionHandler:(void(^)(int statusCode,SslUpdateCertNameResponse* _Nullable updateCertNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    ssl common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) sslCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)sslCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* SslClient_h */
