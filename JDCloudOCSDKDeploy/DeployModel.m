 /* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.





Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#import <Foundation/Foundation.h>
#import <JDCloudOCSDKDeploy/DeployModel.h>

@implementation Milestone
-(id) initWithMilestoneId:(NSString*) milestoneId
      appId:(NSString*)appId
      appName:(NSString*)appName
      regionId:(NSString*)regionId
      desc:(NSString*)desc
      deployMethod:(NSNumber*)deployMethod
      deploySource:(NSNumber*)deploySource
      downloadUrl:(NSString*)downloadUrl
      md5:(NSString*)md5
      compileProject:(NSString*)compileProject
      compileSeries:(NSString*)compileSeries
      ossSpace:(NSString*)ossSpace
      ossDir:(NSString*)ossDir
      fileType:(NSNumber*)fileType
      lastDeployTime:(NSNumber*)lastDeployTime
      deployGroup:(NSArray<NSString*>*)deployGroup { 
     self.milestoneId = milestoneId;               
     self.appId = appId;               
     self.appName = appName;               
     self.regionId = regionId;               
     self.desc = desc;               
     self.deployMethod = deployMethod;               
     self.deploySource = deploySource;               
     self.downloadUrl = downloadUrl;               
     self.md5 = md5;               
     self.compileProject = compileProject;               
     self.compileSeries = compileSeries;               
     self.ossSpace = ossSpace;               
     self.ossDir = ossDir;               
     self.fileType = fileType;               
     self.lastDeployTime = lastDeployTime;               
     self.deployGroup = deployGroup;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self milestoneId])
    {
        [result setValue:[self milestoneId] forKey:@"milestoneId"];
    }
    if([self appId])
    {
        [result setValue:[self appId] forKey:@"appId"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self regionId])
    {
        [result setValue:[self regionId] forKey:@"regionId"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self deployMethod])
    {
        [result setValue:[self deployMethod] forKey:@"deployMethod"];
    }
    if([self deploySource])
    {
        [result setValue:[self deploySource] forKey:@"deploySource"];
    }
    if([self downloadUrl])
    {
        [result setValue:[self downloadUrl] forKey:@"downloadUrl"];
    }
    if([self md5])
    {
        [result setValue:[self md5] forKey:@"md5"];
    }
    if([self compileProject])
    {
        [result setValue:[self compileProject] forKey:@"compileProject"];
    }
    if([self compileSeries])
    {
        [result setValue:[self compileSeries] forKey:@"compileSeries"];
    }
    if([self ossSpace])
    {
        [result setValue:[self ossSpace] forKey:@"ossSpace"];
    }
    if([self ossDir])
    {
        [result setValue:[self ossDir] forKey:@"ossDir"];
    }
    if([self fileType])
    {
        [result setValue:[self fileType] forKey:@"fileType"];
    }
    if([self lastDeployTime])
    {
        [result setValue:[self lastDeployTime] forKey:@"lastDeployTime"];
    }
    if([self deployGroup])
    {
        [result setValue:[self deployGroup] forKey:@"deployGroup"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.milestoneId = [dictionary objectForKey:@"milestoneId"];
    self.appId = [dictionary objectForKey:@"appId"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.regionId = [dictionary objectForKey:@"regionId"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.deployMethod = [dictionary objectForKey:@"deployMethod"];
    self.deploySource = [dictionary objectForKey:@"deploySource"];
    self.downloadUrl = [dictionary objectForKey:@"downloadUrl"];
    self.md5 = [dictionary objectForKey:@"md5"];
    self.compileProject = [dictionary objectForKey:@"compileProject"];
    self.compileSeries = [dictionary objectForKey:@"compileSeries"];
    self.ossSpace = [dictionary objectForKey:@"ossSpace"];
    self.ossDir = [dictionary objectForKey:@"ossDir"];
    self.fileType = [dictionary objectForKey:@"fileType"];
    self.lastDeployTime = [dictionary objectForKey:@"lastDeployTime"];
    self.deployGroup = [dictionary objectForKey:@"deployGroup"];
    return self;
}
 @end
@implementation ModifyApp
-(id) initWithDesc:(NSString*) desc { 
     self.desc = desc;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.desc = [dictionary objectForKey:@"desc"];
    return self;
}
 @end
@implementation App
-(id) initWithAppId:(NSString*) appId
      appName:(NSString*)appName
      regionId:(NSString*)regionId
      platform:(NSNumber*)platform
      jdsfEnabled:(NSNumber*)jdsfEnabled
      desc:(NSString*)desc
      lastDeployTime:(NSNumber*)lastDeployTime { 
     self.appId = appId;               
     self.appName = appName;               
     self.regionId = regionId;               
     self.platform = platform;               
     self.jdsfEnabled = jdsfEnabled;               
     self.desc = desc;               
     self.lastDeployTime = lastDeployTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self appId])
    {
        [result setValue:[self appId] forKey:@"appId"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self regionId])
    {
        [result setValue:[self regionId] forKey:@"regionId"];
    }
    if([self platform])
    {
        [result setValue:[self platform] forKey:@"platform"];
    }
    if([self jdsfEnabled])
    {
        [result setValue:[self jdsfEnabled] forKey:@"jdsfEnabled"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self lastDeployTime])
    {
        [result setValue:[self lastDeployTime] forKey:@"lastDeployTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.appId = [dictionary objectForKey:@"appId"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.regionId = [dictionary objectForKey:@"regionId"];
    self.platform = [dictionary objectForKey:@"platform"];
    self.jdsfEnabled = [dictionary objectForKey:@"jdsfEnabled"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.lastDeployTime = [dictionary objectForKey:@"lastDeployTime"];
    return self;
}
 @end
@implementation CreateApp
-(id) initWithAppName:(NSString*) appName
      platform:(NSNumber*)platform
      jdsfEnabled:(NSNumber*)jdsfEnabled
      desc:(NSString*)desc { 
     self.appName = appName;               
     self.platform = platform;               
     self.jdsfEnabled = jdsfEnabled;               
     self.desc = desc;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self platform])
    {
        [result setValue:[self platform] forKey:@"platform"];
    }
    if([self jdsfEnabled])
    {
        [result setValue:[self jdsfEnabled] forKey:@"jdsfEnabled"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.appName = [dictionary objectForKey:@"appName"];
    self.platform = [dictionary objectForKey:@"platform"];
    self.jdsfEnabled = [dictionary objectForKey:@"jdsfEnabled"];
    self.desc = [dictionary objectForKey:@"desc"];
    return self;
}
 @end
@implementation DeployStage
-(id) initWithStageCode:(NSNumber*) stageCode
      stageName:(NSString*)stageName
      stageStatus:(NSNumber*)stageStatus
      stageMessage:(NSString*)stageMessage
      succeedCount:(NSNumber*)succeedCount
      totalCount:(NSNumber*)totalCount
      createTime:(NSNumber*)createTime
      updateTime:(NSNumber*)updateTime { 
     self.stageCode = stageCode;               
     self.stageName = stageName;               
     self.stageStatus = stageStatus;               
     self.stageMessage = stageMessage;               
     self.succeedCount = succeedCount;               
     self.totalCount = totalCount;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self stageCode])
    {
        [result setValue:[self stageCode] forKey:@"stageCode"];
    }
    if([self stageName])
    {
        [result setValue:[self stageName] forKey:@"stageName"];
    }
    if([self stageStatus])
    {
        [result setValue:[self stageStatus] forKey:@"stageStatus"];
    }
    if([self stageMessage])
    {
        [result setValue:[self stageMessage] forKey:@"stageMessage"];
    }
    if([self succeedCount])
    {
        [result setValue:[self succeedCount] forKey:@"succeedCount"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.stageCode = [dictionary objectForKey:@"stageCode"];
    self.stageName = [dictionary objectForKey:@"stageName"];
    self.stageStatus = [dictionary objectForKey:@"stageStatus"];
    self.stageMessage = [dictionary objectForKey:@"stageMessage"];
    self.succeedCount = [dictionary objectForKey:@"succeedCount"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation CreateDeploy
-(id) initWithGroupId:(NSString*) groupId
      desc:(NSString*)desc
      deploySource:(NSNumber*)deploySource
      deployCmd:(NSString*)deployCmd
      cmdSource:(NSNumber*)cmdSource
      cmdType:(NSNumber*)cmdType
      productType:(NSNumber*)productType
      downloadUrl:(NSString*)downloadUrl
      md5:(NSString*)md5
      compileProject:(NSString*)compileProject
      compileSeries:(NSString*)compileSeries
      ossSpace:(NSString*)ossSpace
      ossDir:(NSString*)ossDir
      fileType:(NSNumber*)fileType { 
     self.groupId = groupId;               
     self.desc = desc;               
     self.deploySource = deploySource;               
     self.deployCmd = deployCmd;               
     self.cmdSource = cmdSource;               
     self.cmdType = cmdType;               
     self.productType = productType;               
     self.downloadUrl = downloadUrl;               
     self.md5 = md5;               
     self.compileProject = compileProject;               
     self.compileSeries = compileSeries;               
     self.ossSpace = ossSpace;               
     self.ossDir = ossDir;               
     self.fileType = fileType;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self deploySource])
    {
        [result setValue:[self deploySource] forKey:@"deploySource"];
    }
    if([self deployCmd])
    {
        [result setValue:[self deployCmd] forKey:@"deployCmd"];
    }
    if([self cmdSource])
    {
        [result setValue:[self cmdSource] forKey:@"cmdSource"];
    }
    if([self cmdType])
    {
        [result setValue:[self cmdType] forKey:@"cmdType"];
    }
    if([self productType])
    {
        [result setValue:[self productType] forKey:@"productType"];
    }
    if([self downloadUrl])
    {
        [result setValue:[self downloadUrl] forKey:@"downloadUrl"];
    }
    if([self md5])
    {
        [result setValue:[self md5] forKey:@"md5"];
    }
    if([self compileProject])
    {
        [result setValue:[self compileProject] forKey:@"compileProject"];
    }
    if([self compileSeries])
    {
        [result setValue:[self compileSeries] forKey:@"compileSeries"];
    }
    if([self ossSpace])
    {
        [result setValue:[self ossSpace] forKey:@"ossSpace"];
    }
    if([self ossDir])
    {
        [result setValue:[self ossDir] forKey:@"ossDir"];
    }
    if([self fileType])
    {
        [result setValue:[self fileType] forKey:@"fileType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.deploySource = [dictionary objectForKey:@"deploySource"];
    self.deployCmd = [dictionary objectForKey:@"deployCmd"];
    self.cmdSource = [dictionary objectForKey:@"cmdSource"];
    self.cmdType = [dictionary objectForKey:@"cmdType"];
    self.productType = [dictionary objectForKey:@"productType"];
    self.downloadUrl = [dictionary objectForKey:@"downloadUrl"];
    self.md5 = [dictionary objectForKey:@"md5"];
    self.compileProject = [dictionary objectForKey:@"compileProject"];
    self.compileSeries = [dictionary objectForKey:@"compileSeries"];
    self.ossSpace = [dictionary objectForKey:@"ossSpace"];
    self.ossDir = [dictionary objectForKey:@"ossDir"];
    self.fileType = [dictionary objectForKey:@"fileType"];
    return self;
}
 @end
@implementation Deploy
-(id) initWithDeployId:(NSString*) deployId
      appId:(NSString*)appId
      appName:(NSString*)appName
      groupId:(NSString*)groupId
      groupName:(NSString*)groupName
      regionId:(NSString*)regionId
      startTime:(NSNumber*)startTime
      endTime:(NSNumber*)endTime
      deployStatus:(NSNumber*)deployStatus
      desc:(NSString*)desc
      deployMethod:(NSNumber*)deployMethod
      deploySource:(NSNumber*)deploySource
      deployCmd:(NSString*)deployCmd
      cmdSource:(NSNumber*)cmdSource
      cmdType:(NSNumber*)cmdType
      productType:(NSNumber*)productType
      downloadUrl:(NSString*)downloadUrl
      md5:(NSString*)md5
      compileProject:(NSString*)compileProject
      compileSeries:(NSString*)compileSeries
      ossSpace:(NSString*)ossSpace
      ossDir:(NSString*)ossDir
      fileType:(NSNumber*)fileType
      rollbackAble:(NSNumber*)rollbackAble
      concurrencyUnit:(NSNumber*)concurrencyUnit
      concurrencyNum:(NSNumber*)concurrencyNum
      concurrencyPct:(NSNumber*)concurrencyPct
      lbStatus:(NSNumber*)lbStatus
      lbInstance:(NSString*)lbInstance
      lbBackend:(NSString*)lbBackend
      repeatPolicy:(NSNumber*)repeatPolicy
      noticeTrigger:(NSNumber*)noticeTrigger
      noticeMethod:(NSArray<NSString*>*)noticeMethod
      jdsfEnabled:(NSNumber*)jdsfEnabled { 
     self.deployId = deployId;               
     self.appId = appId;               
     self.appName = appName;               
     self.groupId = groupId;               
     self.groupName = groupName;               
     self.regionId = regionId;               
     self.startTime = startTime;               
     self.endTime = endTime;               
     self.deployStatus = deployStatus;               
     self.desc = desc;               
     self.deployMethod = deployMethod;               
     self.deploySource = deploySource;               
     self.deployCmd = deployCmd;               
     self.cmdSource = cmdSource;               
     self.cmdType = cmdType;               
     self.productType = productType;               
     self.downloadUrl = downloadUrl;               
     self.md5 = md5;               
     self.compileProject = compileProject;               
     self.compileSeries = compileSeries;               
     self.ossSpace = ossSpace;               
     self.ossDir = ossDir;               
     self.fileType = fileType;               
     self.rollbackAble = rollbackAble;               
     self.concurrencyUnit = concurrencyUnit;               
     self.concurrencyNum = concurrencyNum;               
     self.concurrencyPct = concurrencyPct;               
     self.lbStatus = lbStatus;               
     self.lbInstance = lbInstance;               
     self.lbBackend = lbBackend;               
     self.repeatPolicy = repeatPolicy;               
     self.noticeTrigger = noticeTrigger;               
     self.noticeMethod = noticeMethod;               
     self.jdsfEnabled = jdsfEnabled;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployId])
    {
        [result setValue:[self deployId] forKey:@"deployId"];
    }
    if([self appId])
    {
        [result setValue:[self appId] forKey:@"appId"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self groupName])
    {
        [result setValue:[self groupName] forKey:@"groupName"];
    }
    if([self regionId])
    {
        [result setValue:[self regionId] forKey:@"regionId"];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self deployStatus])
    {
        [result setValue:[self deployStatus] forKey:@"deployStatus"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self deployMethod])
    {
        [result setValue:[self deployMethod] forKey:@"deployMethod"];
    }
    if([self deploySource])
    {
        [result setValue:[self deploySource] forKey:@"deploySource"];
    }
    if([self deployCmd])
    {
        [result setValue:[self deployCmd] forKey:@"deployCmd"];
    }
    if([self cmdSource])
    {
        [result setValue:[self cmdSource] forKey:@"cmdSource"];
    }
    if([self cmdType])
    {
        [result setValue:[self cmdType] forKey:@"cmdType"];
    }
    if([self productType])
    {
        [result setValue:[self productType] forKey:@"productType"];
    }
    if([self downloadUrl])
    {
        [result setValue:[self downloadUrl] forKey:@"downloadUrl"];
    }
    if([self md5])
    {
        [result setValue:[self md5] forKey:@"md5"];
    }
    if([self compileProject])
    {
        [result setValue:[self compileProject] forKey:@"compileProject"];
    }
    if([self compileSeries])
    {
        [result setValue:[self compileSeries] forKey:@"compileSeries"];
    }
    if([self ossSpace])
    {
        [result setValue:[self ossSpace] forKey:@"ossSpace"];
    }
    if([self ossDir])
    {
        [result setValue:[self ossDir] forKey:@"ossDir"];
    }
    if([self fileType])
    {
        [result setValue:[self fileType] forKey:@"fileType"];
    }
    if([self rollbackAble])
    {
        [result setValue:[self rollbackAble] forKey:@"rollbackAble"];
    }
    if([self concurrencyUnit])
    {
        [result setValue:[self concurrencyUnit] forKey:@"concurrencyUnit"];
    }
    if([self concurrencyNum])
    {
        [result setValue:[self concurrencyNum] forKey:@"concurrencyNum"];
    }
    if([self concurrencyPct])
    {
        [result setValue:[self concurrencyPct] forKey:@"concurrencyPct"];
    }
    if([self lbStatus])
    {
        [result setValue:[self lbStatus] forKey:@"lbStatus"];
    }
    if([self lbInstance])
    {
        [result setValue:[self lbInstance] forKey:@"lbInstance"];
    }
    if([self lbBackend])
    {
        [result setValue:[self lbBackend] forKey:@"lbBackend"];
    }
    if([self repeatPolicy])
    {
        [result setValue:[self repeatPolicy] forKey:@"repeatPolicy"];
    }
    if([self noticeTrigger])
    {
        [result setValue:[self noticeTrigger] forKey:@"noticeTrigger"];
    }
    if([self noticeMethod])
    {
        [result setValue:[self noticeMethod] forKey:@"noticeMethod"];
    }
    if([self jdsfEnabled])
    {
        [result setValue:[self jdsfEnabled] forKey:@"jdsfEnabled"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployId = [dictionary objectForKey:@"deployId"];
    self.appId = [dictionary objectForKey:@"appId"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.groupName = [dictionary objectForKey:@"groupName"];
    self.regionId = [dictionary objectForKey:@"regionId"];
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.deployStatus = [dictionary objectForKey:@"deployStatus"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.deployMethod = [dictionary objectForKey:@"deployMethod"];
    self.deploySource = [dictionary objectForKey:@"deploySource"];
    self.deployCmd = [dictionary objectForKey:@"deployCmd"];
    self.cmdSource = [dictionary objectForKey:@"cmdSource"];
    self.cmdType = [dictionary objectForKey:@"cmdType"];
    self.productType = [dictionary objectForKey:@"productType"];
    self.downloadUrl = [dictionary objectForKey:@"downloadUrl"];
    self.md5 = [dictionary objectForKey:@"md5"];
    self.compileProject = [dictionary objectForKey:@"compileProject"];
    self.compileSeries = [dictionary objectForKey:@"compileSeries"];
    self.ossSpace = [dictionary objectForKey:@"ossSpace"];
    self.ossDir = [dictionary objectForKey:@"ossDir"];
    self.fileType = [dictionary objectForKey:@"fileType"];
    self.rollbackAble = [dictionary objectForKey:@"rollbackAble"];
    self.concurrencyUnit = [dictionary objectForKey:@"concurrencyUnit"];
    self.concurrencyNum = [dictionary objectForKey:@"concurrencyNum"];
    self.concurrencyPct = [dictionary objectForKey:@"concurrencyPct"];
    self.lbStatus = [dictionary objectForKey:@"lbStatus"];
    self.lbInstance = [dictionary objectForKey:@"lbInstance"];
    self.lbBackend = [dictionary objectForKey:@"lbBackend"];
    self.repeatPolicy = [dictionary objectForKey:@"repeatPolicy"];
    self.noticeTrigger = [dictionary objectForKey:@"noticeTrigger"];
    self.noticeMethod = [dictionary objectForKey:@"noticeMethod"];
    self.jdsfEnabled = [dictionary objectForKey:@"jdsfEnabled"];
    return self;
}
 @end
@implementation Ag
-(id) initWithName:(NSString*) name
      idValue:(NSString*)idValue { 
     self.name = name;               
     self.idValue = idValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
}
 @end
@implementation StageLog
-(id) initWithStage:(NSString*) stage
      status:(NSString*)status
      msg:(NSString*)msg
      time:(NSString*)time { 
     self.stage = stage;               
     self.status = status;               
     self.msg = msg;               
     self.time = time;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self stage])
    {
        [result setValue:[self stage] forKey:@"stage"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self msg])
    {
        [result setValue:[self msg] forKey:@"msg"];
    }
    if([self time])
    {
        [result setValue:[self time] forKey:@"time"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.stage = [dictionary objectForKey:@"stage"];
    self.status = [dictionary objectForKey:@"status"];
    self.msg = [dictionary objectForKey:@"msg"];
    self.time = [dictionary objectForKey:@"time"];
    return self;
}
 @end
@implementation Vpc
-(id) initWithName:(NSString*) name
      idValue:(NSString*)idValue { 
     self.name = name;               
     self.idValue = idValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
}
 @end
@implementation CheckAgentStatusRequest
-(id) initWithGroupId:(NSString*) groupId { 
     self.groupId = groupId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    return self;
}
 @end
@implementation Rollback
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation DeployStatus
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation NoticeMethod
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation DeploySource
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation DeployType
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation NoticeTrigger
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation AgentStatus
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation StatusColor
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation FileType
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation ConcurrencyUnit
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation RegionId
-(id) initWithValue:(NSString*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation DeployMethod
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation Platform
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation RepeatPolicy
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation GrayService
-(id) initWithValue:(NSNumber*) value
      label:(NSString*)label { 
     self.value = value;               
     self.label = label;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    if([self label])
    {
        [result setValue:[self label] forKey:@"label"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    self.label = [dictionary objectForKey:@"label"];
    return self;
}
 @end
@implementation CreateGroup
-(id) initWithGroupName:(NSString*) groupName
      appId:(NSString*)appId
      desc:(NSString*)desc
      deployMethod:(NSNumber*)deployMethod
      instances:(NSArray<NSString*>*)instances
      blueInstances:(NSArray<NSString*>*)blueInstances
      greenInstances:(NSArray<NSString*>*)greenInstances
      concurrencyUnit:(NSNumber*)concurrencyUnit
      concurrencyNum:(NSNumber*)concurrencyNum
      concurrencyPct:(NSNumber*)concurrencyPct
      lbStatus:(NSNumber*)lbStatus
      lbInstance:(NSString*)lbInstance
      lbBackend:(NSString*)lbBackend
      repeatPolicy:(NSNumber*)repeatPolicy
      noticeTrigger:(NSNumber*)noticeTrigger
      noticeMethod:(NSArray<NSString*>*)noticeMethod
      rollback:(NSNumber*)rollback
      jdsfRegisterId:(NSString*)jdsfRegisterId { 
     self.groupName = groupName;               
     self.appId = appId;               
     self.desc = desc;               
     self.deployMethod = deployMethod;               
     self.instances = instances;               
     self.blueInstances = blueInstances;               
     self.greenInstances = greenInstances;               
     self.concurrencyUnit = concurrencyUnit;               
     self.concurrencyNum = concurrencyNum;               
     self.concurrencyPct = concurrencyPct;               
     self.lbStatus = lbStatus;               
     self.lbInstance = lbInstance;               
     self.lbBackend = lbBackend;               
     self.repeatPolicy = repeatPolicy;               
     self.noticeTrigger = noticeTrigger;               
     self.noticeMethod = noticeMethod;               
     self.rollback = rollback;               
     self.jdsfRegisterId = jdsfRegisterId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupName])
    {
        [result setValue:[self groupName] forKey:@"groupName"];
    }
    if([self appId])
    {
        [result setValue:[self appId] forKey:@"appId"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self deployMethod])
    {
        [result setValue:[self deployMethod] forKey:@"deployMethod"];
    }
    if([self instances])
    {
        [result setValue:[self instances] forKey:@"instances"];
    }
    if([self blueInstances])
    {
        [result setValue:[self blueInstances] forKey:@"blueInstances"];
    }
    if([self greenInstances])
    {
        [result setValue:[self greenInstances] forKey:@"greenInstances"];
    }
    if([self concurrencyUnit])
    {
        [result setValue:[self concurrencyUnit] forKey:@"concurrencyUnit"];
    }
    if([self concurrencyNum])
    {
        [result setValue:[self concurrencyNum] forKey:@"concurrencyNum"];
    }
    if([self concurrencyPct])
    {
        [result setValue:[self concurrencyPct] forKey:@"concurrencyPct"];
    }
    if([self lbStatus])
    {
        [result setValue:[self lbStatus] forKey:@"lbStatus"];
    }
    if([self lbInstance])
    {
        [result setValue:[self lbInstance] forKey:@"lbInstance"];
    }
    if([self lbBackend])
    {
        [result setValue:[self lbBackend] forKey:@"lbBackend"];
    }
    if([self repeatPolicy])
    {
        [result setValue:[self repeatPolicy] forKey:@"repeatPolicy"];
    }
    if([self noticeTrigger])
    {
        [result setValue:[self noticeTrigger] forKey:@"noticeTrigger"];
    }
    if([self noticeMethod])
    {
        [result setValue:[self noticeMethod] forKey:@"noticeMethod"];
    }
    if([self rollback])
    {
        [result setValue:[self rollback] forKey:@"rollback"];
    }
    if([self jdsfRegisterId])
    {
        [result setValue:[self jdsfRegisterId] forKey:@"jdsfRegisterId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupName = [dictionary objectForKey:@"groupName"];
    self.appId = [dictionary objectForKey:@"appId"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.deployMethod = [dictionary objectForKey:@"deployMethod"];
    self.instances = [dictionary objectForKey:@"instances"];
    self.blueInstances = [dictionary objectForKey:@"blueInstances"];
    self.greenInstances = [dictionary objectForKey:@"greenInstances"];
    self.concurrencyUnit = [dictionary objectForKey:@"concurrencyUnit"];
    self.concurrencyNum = [dictionary objectForKey:@"concurrencyNum"];
    self.concurrencyPct = [dictionary objectForKey:@"concurrencyPct"];
    self.lbStatus = [dictionary objectForKey:@"lbStatus"];
    self.lbInstance = [dictionary objectForKey:@"lbInstance"];
    self.lbBackend = [dictionary objectForKey:@"lbBackend"];
    self.repeatPolicy = [dictionary objectForKey:@"repeatPolicy"];
    self.noticeTrigger = [dictionary objectForKey:@"noticeTrigger"];
    self.noticeMethod = [dictionary objectForKey:@"noticeMethod"];
    self.rollback = [dictionary objectForKey:@"rollback"];
    self.jdsfRegisterId = [dictionary objectForKey:@"jdsfRegisterId"];
    return self;
}
 @end
@implementation ModifyGroup
-(id) initWithDesc:(NSString*) desc
      instances:(NSArray<NSString*>*)instances
      blueInstances:(NSArray<NSString*>*)blueInstances
      greenInstances:(NSArray<NSString*>*)greenInstances
      concurrencyUnit:(NSNumber*)concurrencyUnit
      concurrencyNum:(NSNumber*)concurrencyNum
      concurrencyPct:(NSNumber*)concurrencyPct
      lbStatus:(NSNumber*)lbStatus
      lbInstance:(NSString*)lbInstance
      lbBackend:(NSString*)lbBackend
      repeatPolicy:(NSNumber*)repeatPolicy
      noticeTrigger:(NSNumber*)noticeTrigger
      noticeMethod:(NSArray<NSString*>*)noticeMethod
      rollback:(NSNumber*)rollback
      jdsfRegisterId:(NSString*)jdsfRegisterId { 
     self.desc = desc;               
     self.instances = instances;               
     self.blueInstances = blueInstances;               
     self.greenInstances = greenInstances;               
     self.concurrencyUnit = concurrencyUnit;               
     self.concurrencyNum = concurrencyNum;               
     self.concurrencyPct = concurrencyPct;               
     self.lbStatus = lbStatus;               
     self.lbInstance = lbInstance;               
     self.lbBackend = lbBackend;               
     self.repeatPolicy = repeatPolicy;               
     self.noticeTrigger = noticeTrigger;               
     self.noticeMethod = noticeMethod;               
     self.rollback = rollback;               
     self.jdsfRegisterId = jdsfRegisterId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self instances])
    {
        [result setValue:[self instances] forKey:@"instances"];
    }
    if([self blueInstances])
    {
        [result setValue:[self blueInstances] forKey:@"blueInstances"];
    }
    if([self greenInstances])
    {
        [result setValue:[self greenInstances] forKey:@"greenInstances"];
    }
    if([self concurrencyUnit])
    {
        [result setValue:[self concurrencyUnit] forKey:@"concurrencyUnit"];
    }
    if([self concurrencyNum])
    {
        [result setValue:[self concurrencyNum] forKey:@"concurrencyNum"];
    }
    if([self concurrencyPct])
    {
        [result setValue:[self concurrencyPct] forKey:@"concurrencyPct"];
    }
    if([self lbStatus])
    {
        [result setValue:[self lbStatus] forKey:@"lbStatus"];
    }
    if([self lbInstance])
    {
        [result setValue:[self lbInstance] forKey:@"lbInstance"];
    }
    if([self lbBackend])
    {
        [result setValue:[self lbBackend] forKey:@"lbBackend"];
    }
    if([self repeatPolicy])
    {
        [result setValue:[self repeatPolicy] forKey:@"repeatPolicy"];
    }
    if([self noticeTrigger])
    {
        [result setValue:[self noticeTrigger] forKey:@"noticeTrigger"];
    }
    if([self noticeMethod])
    {
        [result setValue:[self noticeMethod] forKey:@"noticeMethod"];
    }
    if([self rollback])
    {
        [result setValue:[self rollback] forKey:@"rollback"];
    }
    if([self jdsfRegisterId])
    {
        [result setValue:[self jdsfRegisterId] forKey:@"jdsfRegisterId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.desc = [dictionary objectForKey:@"desc"];
    self.instances = [dictionary objectForKey:@"instances"];
    self.blueInstances = [dictionary objectForKey:@"blueInstances"];
    self.greenInstances = [dictionary objectForKey:@"greenInstances"];
    self.concurrencyUnit = [dictionary objectForKey:@"concurrencyUnit"];
    self.concurrencyNum = [dictionary objectForKey:@"concurrencyNum"];
    self.concurrencyPct = [dictionary objectForKey:@"concurrencyPct"];
    self.lbStatus = [dictionary objectForKey:@"lbStatus"];
    self.lbInstance = [dictionary objectForKey:@"lbInstance"];
    self.lbBackend = [dictionary objectForKey:@"lbBackend"];
    self.repeatPolicy = [dictionary objectForKey:@"repeatPolicy"];
    self.noticeTrigger = [dictionary objectForKey:@"noticeTrigger"];
    self.noticeMethod = [dictionary objectForKey:@"noticeMethod"];
    self.rollback = [dictionary objectForKey:@"rollback"];
    self.jdsfRegisterId = [dictionary objectForKey:@"jdsfRegisterId"];
    return self;
}
 @end
@implementation Group
-(id) initWithGroupId:(NSString*) groupId
      groupName:(NSString*)groupName
      appId:(NSString*)appId
      appName:(NSString*)appName
      regionId:(NSString*)regionId
      status:(NSNumber*)status
      platform:(NSNumber*)platform
      desc:(NSString*)desc
      deployMethod:(NSNumber*)deployMethod
      instances:(NSArray<NSString*>*)instances
      blueInstances:(NSArray<NSString*>*)blueInstances
      greenInstances:(NSArray<NSString*>*)greenInstances
      concurrencyUnit:(NSNumber*)concurrencyUnit
      concurrencyNum:(NSNumber*)concurrencyNum
      concurrencyPct:(NSNumber*)concurrencyPct
      lbStatus:(NSNumber*)lbStatus
      lbInstance:(NSString*)lbInstance
      lbBackend:(NSString*)lbBackend
      repeatPolicy:(NSNumber*)repeatPolicy
      noticeTrigger:(NSNumber*)noticeTrigger
      noticeMethod:(NSArray<NSString*>*)noticeMethod
      rollback:(NSNumber*)rollback
      jdsfEnabled:(NSNumber*)jdsfEnabled
      jdsfRegisterId:(NSString*)jdsfRegisterId
      lastDeployTime:(NSNumber*)lastDeployTime { 
     self.groupId = groupId;               
     self.groupName = groupName;               
     self.appId = appId;               
     self.appName = appName;               
     self.regionId = regionId;               
     self.status = status;               
     self.platform = platform;               
     self.desc = desc;               
     self.deployMethod = deployMethod;               
     self.instances = instances;               
     self.blueInstances = blueInstances;               
     self.greenInstances = greenInstances;               
     self.concurrencyUnit = concurrencyUnit;               
     self.concurrencyNum = concurrencyNum;               
     self.concurrencyPct = concurrencyPct;               
     self.lbStatus = lbStatus;               
     self.lbInstance = lbInstance;               
     self.lbBackend = lbBackend;               
     self.repeatPolicy = repeatPolicy;               
     self.noticeTrigger = noticeTrigger;               
     self.noticeMethod = noticeMethod;               
     self.rollback = rollback;               
     self.jdsfEnabled = jdsfEnabled;               
     self.jdsfRegisterId = jdsfRegisterId;               
     self.lastDeployTime = lastDeployTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self groupName])
    {
        [result setValue:[self groupName] forKey:@"groupName"];
    }
    if([self appId])
    {
        [result setValue:[self appId] forKey:@"appId"];
    }
    if([self appName])
    {
        [result setValue:[self appName] forKey:@"appName"];
    }
    if([self regionId])
    {
        [result setValue:[self regionId] forKey:@"regionId"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self platform])
    {
        [result setValue:[self platform] forKey:@"platform"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self deployMethod])
    {
        [result setValue:[self deployMethod] forKey:@"deployMethod"];
    }
    if([self instances])
    {
        [result setValue:[self instances] forKey:@"instances"];
    }
    if([self blueInstances])
    {
        [result setValue:[self blueInstances] forKey:@"blueInstances"];
    }
    if([self greenInstances])
    {
        [result setValue:[self greenInstances] forKey:@"greenInstances"];
    }
    if([self concurrencyUnit])
    {
        [result setValue:[self concurrencyUnit] forKey:@"concurrencyUnit"];
    }
    if([self concurrencyNum])
    {
        [result setValue:[self concurrencyNum] forKey:@"concurrencyNum"];
    }
    if([self concurrencyPct])
    {
        [result setValue:[self concurrencyPct] forKey:@"concurrencyPct"];
    }
    if([self lbStatus])
    {
        [result setValue:[self lbStatus] forKey:@"lbStatus"];
    }
    if([self lbInstance])
    {
        [result setValue:[self lbInstance] forKey:@"lbInstance"];
    }
    if([self lbBackend])
    {
        [result setValue:[self lbBackend] forKey:@"lbBackend"];
    }
    if([self repeatPolicy])
    {
        [result setValue:[self repeatPolicy] forKey:@"repeatPolicy"];
    }
    if([self noticeTrigger])
    {
        [result setValue:[self noticeTrigger] forKey:@"noticeTrigger"];
    }
    if([self noticeMethod])
    {
        [result setValue:[self noticeMethod] forKey:@"noticeMethod"];
    }
    if([self rollback])
    {
        [result setValue:[self rollback] forKey:@"rollback"];
    }
    if([self jdsfEnabled])
    {
        [result setValue:[self jdsfEnabled] forKey:@"jdsfEnabled"];
    }
    if([self jdsfRegisterId])
    {
        [result setValue:[self jdsfRegisterId] forKey:@"jdsfRegisterId"];
    }
    if([self lastDeployTime])
    {
        [result setValue:[self lastDeployTime] forKey:@"lastDeployTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.groupName = [dictionary objectForKey:@"groupName"];
    self.appId = [dictionary objectForKey:@"appId"];
    self.appName = [dictionary objectForKey:@"appName"];
    self.regionId = [dictionary objectForKey:@"regionId"];
    self.status = [dictionary objectForKey:@"status"];
    self.platform = [dictionary objectForKey:@"platform"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.deployMethod = [dictionary objectForKey:@"deployMethod"];
    self.instances = [dictionary objectForKey:@"instances"];
    self.blueInstances = [dictionary objectForKey:@"blueInstances"];
    self.greenInstances = [dictionary objectForKey:@"greenInstances"];
    self.concurrencyUnit = [dictionary objectForKey:@"concurrencyUnit"];
    self.concurrencyNum = [dictionary objectForKey:@"concurrencyNum"];
    self.concurrencyPct = [dictionary objectForKey:@"concurrencyPct"];
    self.lbStatus = [dictionary objectForKey:@"lbStatus"];
    self.lbInstance = [dictionary objectForKey:@"lbInstance"];
    self.lbBackend = [dictionary objectForKey:@"lbBackend"];
    self.repeatPolicy = [dictionary objectForKey:@"repeatPolicy"];
    self.noticeTrigger = [dictionary objectForKey:@"noticeTrigger"];
    self.noticeMethod = [dictionary objectForKey:@"noticeMethod"];
    self.rollback = [dictionary objectForKey:@"rollback"];
    self.jdsfEnabled = [dictionary objectForKey:@"jdsfEnabled"];
    self.jdsfRegisterId = [dictionary objectForKey:@"jdsfRegisterId"];
    self.lastDeployTime = [dictionary objectForKey:@"lastDeployTime"];
    return self;
}
 @end
@implementation PinInfo
-(id) initWithPin:(NSString*) pin
      appMax:(NSNumber*)appMax
      appCount:(NSNumber*)appCount
      groupMax:(NSNumber*)groupMax { 
     self.pin = pin;               
     self.appMax = appMax;               
     self.appCount = appCount;               
     self.groupMax = groupMax;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pin])
    {
        [result setValue:[self pin] forKey:@"pin"];
    }
    if([self appMax])
    {
        [result setValue:[self appMax] forKey:@"appMax"];
    }
    if([self appCount])
    {
        [result setValue:[self appCount] forKey:@"appCount"];
    }
    if([self groupMax])
    {
        [result setValue:[self groupMax] forKey:@"groupMax"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pin = [dictionary objectForKey:@"pin"];
    self.appMax = [dictionary objectForKey:@"appMax"];
    self.appCount = [dictionary objectForKey:@"appCount"];
    self.groupMax = [dictionary objectForKey:@"groupMax"];
    return self;
}
 @end
@implementation DeployInstance
-(id) initWithDeployId:(NSString*) deployId
      uuid:(NSString*)uuid
      instanceName:(NSString*)instanceName
      ip:(NSString*)ip
      public_ip:(NSString*)public_ip
      regionId:(NSString*)regionId
      vpc:(Vpc*)vpc
      type:(NSNumber*)type
      ag:(Ag*)ag
      tags:(NSString*)tags
      groupId:(NSString*)groupId
      method:(NSNumber*)method
      status:(NSNumber*)status { 
     self.deployId = deployId;               
     self.uuid = uuid;               
     self.instanceName = instanceName;               
     self.ip = ip;               
     self.public_ip = public_ip;               
     self.regionId = regionId;               
     self.vpc = vpc;               
     self.type = type;               
     self.ag = ag;               
     self.tags = tags;               
     self.groupId = groupId;               
     self.method = method;               
     self.status = status;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployId])
    {
        [result setValue:[self deployId] forKey:@"deployId"];
    }
    if([self uuid])
    {
        [result setValue:[self uuid] forKey:@"uuid"];
    }
    if([self instanceName])
    {
        [result setValue:[self instanceName] forKey:@"instanceName"];
    }
    if([self ip])
    {
        [result setValue:[self ip] forKey:@"ip"];
    }
    if([self public_ip])
    {
        [result setValue:[self public_ip] forKey:@"public_ip"];
    }
    if([self regionId])
    {
        [result setValue:[self regionId] forKey:@"regionId"];
    }
    if([self vpc])
    {
        [result setValue:[[self vpc] dictionary]forKey:@"vpc"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    if([self ag])
    {
        [result setValue:[[self ag] dictionary]forKey:@"ag"];
    }
    if([self tags])
    {
        [result setValue:[self tags] forKey:@"tags"];
    }
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self method])
    {
        [result setValue:[self method] forKey:@"method"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployId = [dictionary objectForKey:@"deployId"];
    self.uuid = [dictionary objectForKey:@"uuid"];
    self.instanceName = [dictionary objectForKey:@"instanceName"];
    self.ip = [dictionary objectForKey:@"ip"];
    self.public_ip = [dictionary objectForKey:@"public_ip"];
    self.regionId = [dictionary objectForKey:@"regionId"];
    self.vpc = [[Vpc alloc]initWithDic:[dictionary objectForKey:@"vpc"]];
    self.type = [dictionary objectForKey:@"type"];
    self.ag = [[Ag alloc]initWithDic:[dictionary objectForKey:@"ag"]];
    self.tags = [dictionary objectForKey:@"tags"];
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.method = [dictionary objectForKey:@"method"];
    self.status = [dictionary objectForKey:@"status"];
    return self;
}
 @end
@implementation Instance
-(id) initWithInstanceId:(NSString*) instanceId
      uuid:(NSString*)uuid
      instanceName:(NSString*)instanceName
      ip:(NSString*)ip
      public_ip:(NSString*)public_ip
      regionId:(NSString*)regionId
      vpc:(Vpc*)vpc
      type:(NSNumber*)type
      ag:(Ag*)ag
      tags:(NSString*)tags
      groupId:(NSString*)groupId
      agentStatus:(NSNumber*)agentStatus { 
     self.instanceId = instanceId;               
     self.uuid = uuid;               
     self.instanceName = instanceName;               
     self.ip = ip;               
     self.public_ip = public_ip;               
     self.regionId = regionId;               
     self.vpc = vpc;               
     self.type = type;               
     self.ag = ag;               
     self.tags = tags;               
     self.groupId = groupId;               
     self.agentStatus = agentStatus;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self uuid])
    {
        [result setValue:[self uuid] forKey:@"uuid"];
    }
    if([self instanceName])
    {
        [result setValue:[self instanceName] forKey:@"instanceName"];
    }
    if([self ip])
    {
        [result setValue:[self ip] forKey:@"ip"];
    }
    if([self public_ip])
    {
        [result setValue:[self public_ip] forKey:@"public_ip"];
    }
    if([self regionId])
    {
        [result setValue:[self regionId] forKey:@"regionId"];
    }
    if([self vpc])
    {
        [result setValue:[[self vpc] dictionary]forKey:@"vpc"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    if([self ag])
    {
        [result setValue:[[self ag] dictionary]forKey:@"ag"];
    }
    if([self tags])
    {
        [result setValue:[self tags] forKey:@"tags"];
    }
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self agentStatus])
    {
        [result setValue:[self agentStatus] forKey:@"agentStatus"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.uuid = [dictionary objectForKey:@"uuid"];
    self.instanceName = [dictionary objectForKey:@"instanceName"];
    self.ip = [dictionary objectForKey:@"ip"];
    self.public_ip = [dictionary objectForKey:@"public_ip"];
    self.regionId = [dictionary objectForKey:@"regionId"];
    self.vpc = [[Vpc alloc]initWithDic:[dictionary objectForKey:@"vpc"]];
    self.type = [dictionary objectForKey:@"type"];
    self.ag = [[Ag alloc]initWithDic:[dictionary objectForKey:@"ag"]];
    self.tags = [dictionary objectForKey:@"tags"];
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.agentStatus = [dictionary objectForKey:@"agentStatus"];
    return self;
}
 @end
 
 


