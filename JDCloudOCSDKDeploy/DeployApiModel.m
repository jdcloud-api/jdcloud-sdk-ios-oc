/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

用户
云部署pin相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKDeploy/DeployApiModel.h>


@implementation DeployDescribeAppsResult
-(id) initWithApps:(NSArray<App*>*) apps
        totalCount:(NSNumber*)totalCount { 
    self.apps = apps;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self apps])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self apps] count]; i++) {
            App* item = [[self apps] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"apps"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* appsArray = [dictionary objectForKey:@"apps"];
    if(appsArray&&![appsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [appsArray count];i++)
        {
            App* item = [[App alloc]initWithDic:[appsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.apps = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation DeployDescribeAppsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DeployDescribeAppsResult* result = [[DeployDescribeAppsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DeployDescribeAppsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DeployDescribeAppResult
-(id) initWithApp:(App*) app { 
    self.app = app;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self app])
    {
        [result setValue:[[self app] dictionary]forKey:@"app"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.app = [[App alloc]initWithDic:[dictionary objectForKey:@"app"]];
    return self;
} 

@end
@implementation DeployDescribeAppsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation DeployDescribeAppRequest
-(id) initWithRegion:(NSString *)regionId
appId:(NSString*)appId { 
    self.regionId = regionId;
    self.appId = appId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
appId:(NSString*)appId { 
    self.regionId = regionId;
    self.version = version;
    self.appId = appId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self appId])
    {
        [result setValue:[self appId] forKey:@"appId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.appId = [dictionary objectForKey:@"appId"];
    return self;
} 

@end
  
@implementation DeployDescribeAppResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DeployDescribeAppResult* result = [[DeployDescribeAppResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DeployDescribeAppResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DeployDescribeDeployRequest
-(id) initWithRegion:(NSString *)regionId
deployId:(NSString*)deployId { 
    self.regionId = regionId;
    self.deployId = deployId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
deployId:(NSString*)deployId { 
    self.regionId = regionId;
    self.version = version;
    self.deployId = deployId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self deployId])
    {
        [result setValue:[self deployId] forKey:@"deployId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployId = [dictionary objectForKey:@"deployId"];
    return self;
} 

@end
@implementation DeployDescribeDeployResult
-(id) initWithDeploy:(Deploy*) deploy { 
    self.deploy = deploy;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deploy])
    {
        [result setValue:[[self deploy] dictionary]forKey:@"deploy"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deploy = [[Deploy alloc]initWithDic:[dictionary objectForKey:@"deploy"]];
    return self;
} 

@end
  
@implementation DeployDescribeDeployResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DeployDescribeDeployResult* result = [[DeployDescribeDeployResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DeployDescribeDeployResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DeployCreateDeployResult
-(id) initWithDeployId:(NSString*) deployId { 
    self.deployId = deployId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployId])
    {
        [result setValue:[self deployId] forKey:@"deployId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployId = [dictionary objectForKey:@"deployId"];
    return self;
} 

@end
  
@implementation DeployCreateDeployResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DeployCreateDeployResult* result = [[DeployCreateDeployResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DeployCreateDeployResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation DeployCreateDeployRequest
-(id) initWithRegion:(NSString *)regionId
groupId:(NSString*)groupId
desc:(NSString*)desc
deploySource:(NSNumber*)deploySource
deployCmd:(NSString*)deployCmd
cmdSource:(NSNumber*)cmdSource
cmdType:(NSNumber*)cmdType
productType:(NSNumber*)productType
downloadUrl:(NSString*)downloadUrl
md5:(NSString*)md5
compileProject:(NSString*)compileProject
compileSeries:(NSString*)compileSeries
ossSpace:(NSString*)ossSpace
ossDir:(NSString*)ossDir
fileType:(NSNumber*)fileType { 
    self.regionId = regionId;
    self.groupId = groupId;
    self.desc = desc;
    self.deploySource = deploySource;
    self.deployCmd = deployCmd;
    self.cmdSource = cmdSource;
    self.cmdType = cmdType;
    self.productType = productType;
    self.downloadUrl = downloadUrl;
    self.md5 = md5;
    self.compileProject = compileProject;
    self.compileSeries = compileSeries;
    self.ossSpace = ossSpace;
    self.ossDir = ossDir;
    self.fileType = fileType;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
groupId:(NSString*)groupId
desc:(NSString*)desc
deploySource:(NSNumber*)deploySource
deployCmd:(NSString*)deployCmd
cmdSource:(NSNumber*)cmdSource
cmdType:(NSNumber*)cmdType
productType:(NSNumber*)productType
downloadUrl:(NSString*)downloadUrl
md5:(NSString*)md5
compileProject:(NSString*)compileProject
compileSeries:(NSString*)compileSeries
ossSpace:(NSString*)ossSpace
ossDir:(NSString*)ossDir
fileType:(NSNumber*)fileType { 
    self.regionId = regionId;
    self.version = version;
    self.groupId = groupId;
    self.desc = desc;
    self.deploySource = deploySource;
    self.deployCmd = deployCmd;
    self.cmdSource = cmdSource;
    self.cmdType = cmdType;
    self.productType = productType;
    self.downloadUrl = downloadUrl;
    self.md5 = md5;
    self.compileProject = compileProject;
    self.compileSeries = compileSeries;
    self.ossSpace = ossSpace;
    self.ossDir = ossDir;
    self.fileType = fileType;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self desc])
    {
        [result setValue:[self desc] forKey:@"desc"];
    }
    if([self deploySource])
    {
        [result setValue:[self deploySource] forKey:@"deploySource"];
    }
    if([self deployCmd])
    {
        [result setValue:[self deployCmd] forKey:@"deployCmd"];
    }
    if([self cmdSource])
    {
        [result setValue:[self cmdSource] forKey:@"cmdSource"];
    }
    if([self cmdType])
    {
        [result setValue:[self cmdType] forKey:@"cmdType"];
    }
    if([self productType])
    {
        [result setValue:[self productType] forKey:@"productType"];
    }
    if([self downloadUrl])
    {
        [result setValue:[self downloadUrl] forKey:@"downloadUrl"];
    }
    if([self md5])
    {
        [result setValue:[self md5] forKey:@"md5"];
    }
    if([self compileProject])
    {
        [result setValue:[self compileProject] forKey:@"compileProject"];
    }
    if([self compileSeries])
    {
        [result setValue:[self compileSeries] forKey:@"compileSeries"];
    }
    if([self ossSpace])
    {
        [result setValue:[self ossSpace] forKey:@"ossSpace"];
    }
    if([self ossDir])
    {
        [result setValue:[self ossDir] forKey:@"ossDir"];
    }
    if([self fileType])
    {
        [result setValue:[self fileType] forKey:@"fileType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.desc = [dictionary objectForKey:@"desc"];
    self.deploySource = [dictionary objectForKey:@"deploySource"];
    self.deployCmd = [dictionary objectForKey:@"deployCmd"];
    self.cmdSource = [dictionary objectForKey:@"cmdSource"];
    self.cmdType = [dictionary objectForKey:@"cmdType"];
    self.productType = [dictionary objectForKey:@"productType"];
    self.downloadUrl = [dictionary objectForKey:@"downloadUrl"];
    self.md5 = [dictionary objectForKey:@"md5"];
    self.compileProject = [dictionary objectForKey:@"compileProject"];
    self.compileSeries = [dictionary objectForKey:@"compileSeries"];
    self.ossSpace = [dictionary objectForKey:@"ossSpace"];
    self.ossDir = [dictionary objectForKey:@"ossDir"];
    self.fileType = [dictionary objectForKey:@"fileType"];
    return self;
} 

@end
@implementation DeployDescribeGroupRequest
-(id) initWithRegion:(NSString *)regionId
groupId:(NSString*)groupId { 
    self.regionId = regionId;
    self.groupId = groupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
groupId:(NSString*)groupId { 
    self.regionId = regionId;
    self.version = version;
    self.groupId = groupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    return self;
} 

@end
@implementation DeployDescribeGroupResult
-(id) initWithGroup:(Group*) group { 
    self.group = group;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self group])
    {
        [result setValue:[[self group] dictionary]forKey:@"group"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.group = [[Group alloc]initWithDic:[dictionary objectForKey:@"group"]];
    return self;
} 

@end
@implementation DeployDescribeGroupsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation DeployDescribeGroupsResult
-(id) initWithGroups:(NSArray<Group*>*) groups
        totalCount:(NSNumber*)totalCount { 
    self.groups = groups;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groups])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self groups] count]; i++) {
            Group* item = [[self groups] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"groups"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* groupsArray = [dictionary objectForKey:@"groups"];
    if(groupsArray&&![groupsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [groupsArray count];i++)
        {
            Group* item = [[Group alloc]initWithDic:[groupsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.groups = propertyArray;
    }
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation DeployDescribeGroupsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DeployDescribeGroupsResult* result = [[DeployDescribeGroupsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DeployDescribeGroupsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation DeployDescribeGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
DeployDescribeGroupResult* result = [[DeployDescribeGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(DeployDescribeGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
