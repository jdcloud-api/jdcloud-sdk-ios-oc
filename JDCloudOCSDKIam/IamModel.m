 /* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.





Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#import <Foundation/Foundation.h>
#import <JDCloudOCSDKIam/IamModel.h>

@implementation UserAttachment
-(id) initWithRemark:(NSString*) remark
      industry:(NSString*)industry
      subIndustry:(NSString*)subIndustry
      business:(NSString*)business
      website:(NSString*)website
      cpState:(NSString*)cpState
      cpProvince:(NSString*)cpProvince
      cpCity:(NSString*)cpCity
      cpCountry:(NSString*)cpCountry
      cpAddress:(NSString*)cpAddress
      cpTelphone:(NSString*)cpTelphone { 
     self.remark = remark;               
     self.industry = industry;               
     self.subIndustry = subIndustry;               
     self.business = business;               
     self.website = website;               
     self.cpState = cpState;               
     self.cpProvince = cpProvince;               
     self.cpCity = cpCity;               
     self.cpCountry = cpCountry;               
     self.cpAddress = cpAddress;               
     self.cpTelphone = cpTelphone;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self remark])
    {
        [result setValue:[self remark] forKey:@"remark"];
    }
    if([self industry])
    {
        [result setValue:[self industry] forKey:@"industry"];
    }
    if([self subIndustry])
    {
        [result setValue:[self subIndustry] forKey:@"subIndustry"];
    }
    if([self business])
    {
        [result setValue:[self business] forKey:@"business"];
    }
    if([self website])
    {
        [result setValue:[self website] forKey:@"website"];
    }
    if([self cpState])
    {
        [result setValue:[self cpState] forKey:@"cpState"];
    }
    if([self cpProvince])
    {
        [result setValue:[self cpProvince] forKey:@"cpProvince"];
    }
    if([self cpCity])
    {
        [result setValue:[self cpCity] forKey:@"cpCity"];
    }
    if([self cpCountry])
    {
        [result setValue:[self cpCountry] forKey:@"cpCountry"];
    }
    if([self cpAddress])
    {
        [result setValue:[self cpAddress] forKey:@"cpAddress"];
    }
    if([self cpTelphone])
    {
        [result setValue:[self cpTelphone] forKey:@"cpTelphone"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.remark = [dictionary objectForKey:@"remark"];
    self.industry = [dictionary objectForKey:@"industry"];
    self.subIndustry = [dictionary objectForKey:@"subIndustry"];
    self.business = [dictionary objectForKey:@"business"];
    self.website = [dictionary objectForKey:@"website"];
    self.cpState = [dictionary objectForKey:@"cpState"];
    self.cpProvince = [dictionary objectForKey:@"cpProvince"];
    self.cpCity = [dictionary objectForKey:@"cpCity"];
    self.cpCountry = [dictionary objectForKey:@"cpCountry"];
    self.cpAddress = [dictionary objectForKey:@"cpAddress"];
    self.cpTelphone = [dictionary objectForKey:@"cpTelphone"];
    return self;
}
 @end
@implementation UpdateSubUserInfo
-(id) initWithDescription:(NSString*) descriptionValue
      phone:(NSString*)phone
      email:(NSString*)email { 
     self.descriptionValue = descriptionValue;               
     self.phone = phone;               
     self.email = email;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self phone])
    {
        [result setValue:[self phone] forKey:@"phone"];
    }
    if([self email])
    {
        [result setValue:[self email] forKey:@"email"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.phone = [dictionary objectForKey:@"phone"];
    self.email = [dictionary objectForKey:@"email"];
    return self;
}
 @end
@implementation MFAInfo
-(id) initWithName:(NSString*) name
      secret:(NSString*)secret { 
     self.name = name;               
     self.secret = secret;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self secret])
    {
        [result setValue:[self secret] forKey:@"secret"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.secret = [dictionary objectForKey:@"secret"];
    return self;
}
 @end
@implementation SendBatchMsg
-(id) initWithTemplateId:(NSNumber*) templateId
      templateParam:(NSArray<NSString*>*)templateParam
      smsMessageSource:(NSString*)smsMessageSource
      pin:(NSString*)pin
      mobileNumSet:(NSArray<NSString*>*)mobileNumSet { 
     self.templateId = templateId;               
     self.templateParam = templateParam;               
     self.smsMessageSource = smsMessageSource;               
     self.pin = pin;               
     self.mobileNumSet = mobileNumSet;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self templateId])
    {
        [result setValue:[self templateId] forKey:@"templateId"];
    }
    if([self templateParam])
    {
        [result setValue:[self templateParam] forKey:@"templateParam"];
    }
    if([self smsMessageSource])
    {
        [result setValue:[self smsMessageSource] forKey:@"smsMessageSource"];
    }
    if([self pin])
    {
        [result setValue:[self pin] forKey:@"pin"];
    }
    if([self mobileNumSet])
    {
        [result setValue:[self mobileNumSet] forKey:@"mobileNumSet"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.templateId = [dictionary objectForKey:@"templateId"];
    self.templateParam = [dictionary objectForKey:@"templateParam"];
    self.smsMessageSource = [dictionary objectForKey:@"smsMessageSource"];
    self.pin = [dictionary objectForKey:@"pin"];
    self.mobileNumSet = [dictionary objectForKey:@"mobileNumSet"];
    return self;
}
 @end
@implementation GroupDetail
-(id) initWithGroupId:(NSString*) groupId
      name:(NSString*)name
      jrn:(NSString*)jrn
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.groupId = groupId;               
     self.name = name;               
     self.jrn = jrn;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.name = [dictionary objectForKey:@"name"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation Policy
-(id) initWithPolicyId:(NSString*) policyId
      name:(NSString*)name
      jrn:(NSString*)jrn
      descriptionValue:(NSString*)descriptionValue
      policyType:(NSString*)policyType
      version:(NSString*)version
      defaultEdition:(NSNumber*)defaultEdition
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.policyId = policyId;               
     self.name = name;               
     self.jrn = jrn;               
     self.descriptionValue = descriptionValue;               
     self.policyType = policyType;               
     self.version = version;               
     self.defaultEdition = defaultEdition;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self policyId])
    {
        [result setValue:[self policyId] forKey:@"policyId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self policyType])
    {
        [result setValue:[self policyType] forKey:@"policyType"];
    }
    if([self version])
    {
        [result setValue:[self version] forKey:@"version"];
    }
    if([self defaultEdition])
    {
        [result setValue:[self defaultEdition] forKey:@"defaultEdition"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.policyId = [dictionary objectForKey:@"policyId"];
    self.name = [dictionary objectForKey:@"name"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.policyType = [dictionary objectForKey:@"policyType"];
    self.version = [dictionary objectForKey:@"version"];
    self.defaultEdition = [dictionary objectForKey:@"defaultEdition"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation RemovePermissionInfo
-(id) initWithPermissionId:(NSNumber*) permissionId { 
     self.permissionId = permissionId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self permissionId])
    {
        [result setValue:[self permissionId] forKey:@"permissionId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.permissionId = [dictionary objectForKey:@"permissionId"];
    return self;
}
 @end
@implementation AuthenticationInfo
-(id) initWithAccount:(NSString*) account
      subUser:(NSString*)subUser
      action:(NSString*)action
      resource:(NSString*)resource { 
     self.account = account;               
     self.subUser = subUser;               
     self.action = action;               
     self.resource = resource;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self account])
    {
        [result setValue:[self account] forKey:@"account"];
    }
    if([self subUser])
    {
        [result setValue:[self subUser] forKey:@"subUser"];
    }
    if([self action])
    {
        [result setValue:[self action] forKey:@"action"];
    }
    if([self resource])
    {
        [result setValue:[self resource] forKey:@"resource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.account = [dictionary objectForKey:@"account"];
    self.subUser = [dictionary objectForKey:@"subUser"];
    self.action = [dictionary objectForKey:@"action"];
    self.resource = [dictionary objectForKey:@"resource"];
    return self;
}
 @end
@implementation PolicyEditionDetail
-(id) initWithDocument:(NSString*) document
      isDefaultEdition:(NSNumber*)isDefaultEdition
      edition:(NSNumber*)edition
      createTime:(NSString*)createTime { 
     self.document = document;               
     self.isDefaultEdition = isDefaultEdition;               
     self.edition = edition;               
     self.createTime = createTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self document])
    {
        [result setValue:[self document] forKey:@"document"];
    }
    if([self isDefaultEdition])
    {
        [result setValue:[self isDefaultEdition] forKey:@"isDefaultEdition"];
    }
    if([self edition])
    {
        [result setValue:[self edition] forKey:@"edition"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.document = [dictionary objectForKey:@"document"];
    self.isDefaultEdition = [dictionary objectForKey:@"isDefaultEdition"];
    self.edition = [dictionary objectForKey:@"edition"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    return self;
}
 @end
@implementation UpdatePolicyInfo
-(id) initWithContent:(NSString*) content { 
     self.content = content;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self content])
    {
        [result setValue:[self content] forKey:@"content"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.content = [dictionary objectForKey:@"content"];
    return self;
}
 @end
@implementation CreatePolicyEditionInfo
-(id) initWithPolicyDocument:(NSString*) policyDocument
      setAsDefault:(NSNumber*)setAsDefault { 
     self.policyDocument = policyDocument;               
     self.setAsDefault = setAsDefault;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self policyDocument])
    {
        [result setValue:[self policyDocument] forKey:@"policyDocument"];
    }
    if([self setAsDefault])
    {
        [result setValue:[self setAsDefault] forKey:@"setAsDefault"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.policyDocument = [dictionary objectForKey:@"policyDocument"];
    self.setAsDefault = [dictionary objectForKey:@"setAsDefault"];
    return self;
}
 @end
@implementation AzSaleStatusVo
-(id) initWithAz:(NSString*) az
      canSale:(NSNumber*)canSale
      visible:(NSNumber*)visible { 
     self.az = az;               
     self.canSale = canSale;               
     self.visible = visible;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self canSale])
    {
        [result setValue:[self canSale] forKey:@"canSale"];
    }
    if([self visible])
    {
        [result setValue:[self visible] forKey:@"visible"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    self.canSale = [dictionary objectForKey:@"canSale"];
    self.visible = [dictionary objectForKey:@"visible"];
    return self;
}
 @end
@implementation CreateGroupRes
-(id) initWithGroupId:(NSString*) groupId
      name:(NSString*)name
      jrn:(NSString*)jrn
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.groupId = groupId;               
     self.name = name;               
     self.jrn = jrn;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.name = [dictionary objectForKey:@"name"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation AzMappingVo
-(id) initWithLaz:(NSString*) laz
      paz:(NSString*)paz { 
     self.laz = laz;               
     self.paz = paz;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self laz])
    {
        [result setValue:[self laz] forKey:@"laz"];
    }
    if([self paz])
    {
        [result setValue:[self paz] forKey:@"paz"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.laz = [dictionary objectForKey:@"laz"];
    self.paz = [dictionary objectForKey:@"paz"];
    return self;
}
 @end
@implementation EmailSmsInfo
-(id) initWithCreatePin:(NSString*) createPin
      title:(NSString*)title
      sendType:(NSNumber*)sendType
      content:(NSString*)content
      receives:(NSArray<NSString*>*)receives
      templateId:(NSNumber*)templateId
      templateParam:(NSArray<NSString*>*)templateParam
      smsMessageSource:(NSString*)smsMessageSource { 
     self.createPin = createPin;               
     self.title = title;               
     self.sendType = sendType;               
     self.content = content;               
     self.receives = receives;               
     self.templateId = templateId;               
     self.templateParam = templateParam;               
     self.smsMessageSource = smsMessageSource;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self createPin])
    {
        [result setValue:[self createPin] forKey:@"createPin"];
    }
    if([self title])
    {
        [result setValue:[self title] forKey:@"title"];
    }
    if([self sendType])
    {
        [result setValue:[self sendType] forKey:@"sendType"];
    }
    if([self content])
    {
        [result setValue:[self content] forKey:@"content"];
    }
    if([self receives])
    {
        [result setValue:[self receives] forKey:@"receives"];
    }
    if([self templateId])
    {
        [result setValue:[self templateId] forKey:@"templateId"];
    }
    if([self templateParam])
    {
        [result setValue:[self templateParam] forKey:@"templateParam"];
    }
    if([self smsMessageSource])
    {
        [result setValue:[self smsMessageSource] forKey:@"smsMessageSource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.createPin = [dictionary objectForKey:@"createPin"];
    self.title = [dictionary objectForKey:@"title"];
    self.sendType = [dictionary objectForKey:@"sendType"];
    self.content = [dictionary objectForKey:@"content"];
    self.receives = [dictionary objectForKey:@"receives"];
    self.templateId = [dictionary objectForKey:@"templateId"];
    self.templateParam = [dictionary objectForKey:@"templateParam"];
    self.smsMessageSource = [dictionary objectForKey:@"smsMessageSource"];
    return self;
}
 @end
@implementation PasswordPolicyRule
-(id) initWithRequireUppercaseCharacters:(NSNumber*) requireUppercaseCharacters
      requireLowercaseCharacters:(NSNumber*)requireLowercaseCharacters
      requireNumbers:(NSNumber*)requireNumbers
      requireSpecialCharacters:(NSNumber*)requireSpecialCharacters { 
     self.requireUppercaseCharacters = requireUppercaseCharacters;               
     self.requireLowercaseCharacters = requireLowercaseCharacters;               
     self.requireNumbers = requireNumbers;               
     self.requireSpecialCharacters = requireSpecialCharacters;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self requireUppercaseCharacters])
    {
        [result setValue:[self requireUppercaseCharacters] forKey:@"requireUppercaseCharacters"];
    }
    if([self requireLowercaseCharacters])
    {
        [result setValue:[self requireLowercaseCharacters] forKey:@"requireLowercaseCharacters"];
    }
    if([self requireNumbers])
    {
        [result setValue:[self requireNumbers] forKey:@"requireNumbers"];
    }
    if([self requireSpecialCharacters])
    {
        [result setValue:[self requireSpecialCharacters] forKey:@"requireSpecialCharacters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.requireUppercaseCharacters = [dictionary objectForKey:@"requireUppercaseCharacters"];
    self.requireLowercaseCharacters = [dictionary objectForKey:@"requireLowercaseCharacters"];
    self.requireNumbers = [dictionary objectForKey:@"requireNumbers"];
    self.requireSpecialCharacters = [dictionary objectForKey:@"requireSpecialCharacters"];
    return self;
}
 @end
@implementation UpdateGroupInfo
-(id) initWithDescription:(NSString*) descriptionValue { 
     self.descriptionValue = descriptionValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
}
 @end
@implementation Resource
-(id) initWithIds:(NSArray<NSString*>*) ids
      type:(NSString*)type { 
     self.ids = ids;               
     self.type = type;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self ids])
    {
        [result setValue:[self ids] forKey:@"ids"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.ids = [dictionary objectForKey:@"ids"];
    self.type = [dictionary objectForKey:@"type"];
    return self;
}
 @end
@implementation CreateSubUserInfo
-(id) initWithName:(NSString*) name
      descriptionValue:(NSString*)descriptionValue
      password:(NSString*)password
      phone:(NSString*)phone
      email:(NSString*)email
      createAk:(NSNumber*)createAk
      needResetPassword:(NSNumber*)needResetPassword
      consoleLogin:(NSNumber*)consoleLogin
      autoGeneratePassword:(NSNumber*)autoGeneratePassword { 
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.password = password;               
     self.phone = phone;               
     self.email = email;               
     self.createAk = createAk;               
     self.needResetPassword = needResetPassword;               
     self.consoleLogin = consoleLogin;               
     self.autoGeneratePassword = autoGeneratePassword;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self phone])
    {
        [result setValue:[self phone] forKey:@"phone"];
    }
    if([self email])
    {
        [result setValue:[self email] forKey:@"email"];
    }
    if([self createAk])
    {
        [result setValue:[self createAk] forKey:@"createAk"];
    }
    if([self needResetPassword])
    {
        [result setValue:[self needResetPassword] forKey:@"needResetPassword"];
    }
    if([self consoleLogin])
    {
        [result setValue:[self consoleLogin] forKey:@"consoleLogin"];
    }
    if([self autoGeneratePassword])
    {
        [result setValue:[self autoGeneratePassword] forKey:@"autoGeneratePassword"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.password = [dictionary objectForKey:@"password"];
    self.phone = [dictionary objectForKey:@"phone"];
    self.email = [dictionary objectForKey:@"email"];
    self.createAk = [dictionary objectForKey:@"createAk"];
    self.needResetPassword = [dictionary objectForKey:@"needResetPassword"];
    self.consoleLogin = [dictionary objectForKey:@"consoleLogin"];
    self.autoGeneratePassword = [dictionary objectForKey:@"autoGeneratePassword"];
    return self;
}
 @end
@implementation SubUserInfo
-(id) initWithName:(NSString*) name
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime { 
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    return self;
}
 @end
@implementation GroupInfo
-(id) initWithGroupId:(NSString*) groupId
      name:(NSString*)name
      jrn:(NSString*)jrn
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime
      policies:(NSArray<NSString*>*)policies { 
     self.groupId = groupId;               
     self.name = name;               
     self.jrn = jrn;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
     self.policies = policies;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    if([self policies])
    {
        [result setValue:[self policies] forKey:@"policies"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.name = [dictionary objectForKey:@"name"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    self.policies = [dictionary objectForKey:@"policies"];
    return self;
}
 @end
@implementation Flags
-(id) initWithValue:(NSNumber*) value { 
     self.value = value;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.value = [dictionary objectForKey:@"value"];
    return self;
}
 @end
@implementation LoginProfile
-(id) initWithName:(NSString*) name
      passwordResetRequired:(NSNumber*)passwordResetRequired
      mFABindRequired:(NSNumber*)mFABindRequired { 
     self.name = name;               
     self.passwordResetRequired = passwordResetRequired;               
     self.mFABindRequired = mFABindRequired;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self passwordResetRequired])
    {
        [result setValue:[self passwordResetRequired] forKey:@"passwordResetRequired"];
    }
    if([self mFABindRequired])
    {
        [result setValue:[self mFABindRequired] forKey:@"mFABindRequired"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.passwordResetRequired = [dictionary objectForKey:@"passwordResetRequired"];
    self.mFABindRequired = [dictionary objectForKey:@"mFABindRequired"];
    return self;
}
 @end
@implementation CreateRoleInfo
-(id) initWithRoleName:(NSString*) roleName
      type:(NSNumber*)type
      assumeRolePolicyDocument:(NSString*)assumeRolePolicyDocument
      descriptionValue:(NSString*)descriptionValue
      maxSessionDuration:(NSNumber*)maxSessionDuration { 
     self.roleName = roleName;               
     self.type = type;               
     self.assumeRolePolicyDocument = assumeRolePolicyDocument;               
     self.descriptionValue = descriptionValue;               
     self.maxSessionDuration = maxSessionDuration;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self roleName])
    {
        [result setValue:[self roleName] forKey:@"roleName"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    if([self assumeRolePolicyDocument])
    {
        [result setValue:[self assumeRolePolicyDocument] forKey:@"assumeRolePolicyDocument"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self maxSessionDuration])
    {
        [result setValue:[self maxSessionDuration] forKey:@"maxSessionDuration"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.roleName = [dictionary objectForKey:@"roleName"];
    self.type = [dictionary objectForKey:@"type"];
    self.assumeRolePolicyDocument = [dictionary objectForKey:@"assumeRolePolicyDocument"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.maxSessionDuration = [dictionary objectForKey:@"maxSessionDuration"];
    return self;
}
 @end
@implementation APIInfo
-(id) initWithAccessLevel:(NSNumber*) accessLevel
      actionName:(NSString*)actionName
      actionType:(NSString*)actionType
      resource:(NSString*)resource
      resourceType:(NSString*)resourceType
      subResourceType:(NSString*)subResourceType
      terResourceType:(NSString*)terResourceType { 
     self.accessLevel = accessLevel;               
     self.actionName = actionName;               
     self.actionType = actionType;               
     self.resource = resource;               
     self.resourceType = resourceType;               
     self.subResourceType = subResourceType;               
     self.terResourceType = terResourceType;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self accessLevel])
    {
        [result setValue:[self accessLevel] forKey:@"accessLevel"];
    }
    if([self actionName])
    {
        [result setValue:[self actionName] forKey:@"actionName"];
    }
    if([self actionType])
    {
        [result setValue:[self actionType] forKey:@"actionType"];
    }
    if([self resource])
    {
        [result setValue:[self resource] forKey:@"resource"];
    }
    if([self resourceType])
    {
        [result setValue:[self resourceType] forKey:@"resourceType"];
    }
    if([self subResourceType])
    {
        [result setValue:[self subResourceType] forKey:@"subResourceType"];
    }
    if([self terResourceType])
    {
        [result setValue:[self terResourceType] forKey:@"terResourceType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.accessLevel = [dictionary objectForKey:@"accessLevel"];
    self.actionName = [dictionary objectForKey:@"actionName"];
    self.actionType = [dictionary objectForKey:@"actionType"];
    self.resource = [dictionary objectForKey:@"resource"];
    self.resourceType = [dictionary objectForKey:@"resourceType"];
    self.subResourceType = [dictionary objectForKey:@"subResourceType"];
    self.terResourceType = [dictionary objectForKey:@"terResourceType"];
    return self;
}
 @end
@implementation ConditionMappingVo
-(id) initWithConditionKey:(NSString*) conditionKey
      values:(NSArray<NSString*>*)values { 
     self.conditionKey = conditionKey;               
     self.values = values;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self conditionKey])
    {
        [result setValue:[self conditionKey] forKey:@"conditionKey"];
    }
    if([self values])
    {
        [result setValue:[self values] forKey:@"values"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.conditionKey = [dictionary objectForKey:@"conditionKey"];
    self.values = [dictionary objectForKey:@"values"];
    return self;
}
 @end
@implementation SubUserAccessKey
-(id) initWithAccessKey:(NSString*) accessKey
      secretAccessKey:(NSString*)secretAccessKey
      createTime:(NSString*)createTime
      status:(NSNumber*)status
      yn:(NSNumber*)yn { 
     self.accessKey = accessKey;               
     self.secretAccessKey = secretAccessKey;               
     self.createTime = createTime;               
     self.status = status;               
     self.yn = yn;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self accessKey])
    {
        [result setValue:[self accessKey] forKey:@"accessKey"];
    }
    if([self secretAccessKey])
    {
        [result setValue:[self secretAccessKey] forKey:@"secretAccessKey"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self yn])
    {
        [result setValue:[self yn] forKey:@"yn"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.accessKey = [dictionary objectForKey:@"accessKey"];
    self.secretAccessKey = [dictionary objectForKey:@"secretAccessKey"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.status = [dictionary objectForKey:@"status"];
    self.yn = [dictionary objectForKey:@"yn"];
    return self;
}
 @end
@implementation ResultMsg
-(id) initWithErrorCode:(NSString*) errorCode
      errorMsg:(NSString*)errorMsg { 
     self.errorCode = errorCode;               
     self.errorMsg = errorMsg;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self errorCode])
    {
        [result setValue:[self errorCode] forKey:@"errorCode"];
    }
    if([self errorMsg])
    {
        [result setValue:[self errorMsg] forKey:@"errorMsg"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.errorCode = [dictionary objectForKey:@"errorCode"];
    self.errorMsg = [dictionary objectForKey:@"errorMsg"];
    return self;
}
 @end
@implementation UpdateRoleInfo
-(id) initWithDescription:(NSString*) descriptionValue
      maxSessionDuration:(NSNumber*)maxSessionDuration { 
     self.descriptionValue = descriptionValue;               
     self.maxSessionDuration = maxSessionDuration;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self maxSessionDuration])
    {
        [result setValue:[self maxSessionDuration] forKey:@"maxSessionDuration"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.maxSessionDuration = [dictionary objectForKey:@"maxSessionDuration"];
    return self;
}
 @end
@implementation UserAccessKey
-(id) initWithAccessKey:(NSString*) accessKey
      accessKeySecret:(NSString*)accessKeySecret
      createTime:(NSString*)createTime
      state:(NSNumber*)state
      yn:(NSNumber*)yn { 
     self.accessKey = accessKey;               
     self.accessKeySecret = accessKeySecret;               
     self.createTime = createTime;               
     self.state = state;               
     self.yn = yn;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self accessKey])
    {
        [result setValue:[self accessKey] forKey:@"accessKey"];
    }
    if([self accessKeySecret])
    {
        [result setValue:[self accessKeySecret] forKey:@"accessKeySecret"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self state])
    {
        [result setValue:[self state] forKey:@"state"];
    }
    if([self yn])
    {
        [result setValue:[self yn] forKey:@"yn"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.accessKey = [dictionary objectForKey:@"accessKey"];
    self.accessKeySecret = [dictionary objectForKey:@"accessKeySecret"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.state = [dictionary objectForKey:@"state"];
    self.yn = [dictionary objectForKey:@"yn"];
    return self;
}
 @end
@implementation SendSingleMsg
-(id) initWithTemplateId:(NSNumber*) templateId
      templateParam:(NSArray<NSString*>*)templateParam
      smsMessageSource:(NSString*)smsMessageSource
      pin:(NSString*)pin
      mobileNum:(NSString*)mobileNum { 
     self.templateId = templateId;               
     self.templateParam = templateParam;               
     self.smsMessageSource = smsMessageSource;               
     self.pin = pin;               
     self.mobileNum = mobileNum;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self templateId])
    {
        [result setValue:[self templateId] forKey:@"templateId"];
    }
    if([self templateParam])
    {
        [result setValue:[self templateParam] forKey:@"templateParam"];
    }
    if([self smsMessageSource])
    {
        [result setValue:[self smsMessageSource] forKey:@"smsMessageSource"];
    }
    if([self pin])
    {
        [result setValue:[self pin] forKey:@"pin"];
    }
    if([self mobileNum])
    {
        [result setValue:[self mobileNum] forKey:@"mobileNum"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.templateId = [dictionary objectForKey:@"templateId"];
    self.templateParam = [dictionary objectForKey:@"templateParam"];
    self.smsMessageSource = [dictionary objectForKey:@"smsMessageSource"];
    self.pin = [dictionary objectForKey:@"pin"];
    self.mobileNum = [dictionary objectForKey:@"mobileNum"];
    return self;
}
 @end
@implementation ListRoleInfo
-(id) initWithRoleName:(NSString*) roleName
      type:(NSNumber*)type
      assumeRolePolicyDocument:(NSString*)assumeRolePolicyDocument
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime { 
     self.roleName = roleName;               
     self.type = type;               
     self.assumeRolePolicyDocument = assumeRolePolicyDocument;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self roleName])
    {
        [result setValue:[self roleName] forKey:@"roleName"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    if([self assumeRolePolicyDocument])
    {
        [result setValue:[self assumeRolePolicyDocument] forKey:@"assumeRolePolicyDocument"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.roleName = [dictionary objectForKey:@"roleName"];
    self.type = [dictionary objectForKey:@"type"];
    self.assumeRolePolicyDocument = [dictionary objectForKey:@"assumeRolePolicyDocument"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    return self;
}
 @end
@implementation UserReqVo
-(id) initWithPin:(NSString*) pin
      cscPhone:(NSString*)cscPhone
      cscEmail:(NSString*)cscEmail
      name:(NSString*)name
      userType:(NSNumber*)userType
      companyName:(NSString*)companyName
      createTimeStart:(NSString*)createTimeStart
      createTimeEnd:(NSString*)createTimeEnd
      arrearageStatus:(NSNumber*)arrearageStatus
      groups:(NSString*)groups
      group:(NSNumber*)group
      billingWhite:(NSNumber*)billingWhite
      tag:(NSNumber*)tag
      pageSize:(NSNumber*)pageSize
      currentPage:(NSNumber*)currentPage { 
     self.pin = pin;               
     self.cscPhone = cscPhone;               
     self.cscEmail = cscEmail;               
     self.name = name;               
     self.userType = userType;               
     self.companyName = companyName;               
     self.createTimeStart = createTimeStart;               
     self.createTimeEnd = createTimeEnd;               
     self.arrearageStatus = arrearageStatus;               
     self.groups = groups;               
     self.group = group;               
     self.billingWhite = billingWhite;               
     self.tag = tag;               
     self.pageSize = pageSize;               
     self.currentPage = currentPage;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pin])
    {
        [result setValue:[self pin] forKey:@"pin"];
    }
    if([self cscPhone])
    {
        [result setValue:[self cscPhone] forKey:@"cscPhone"];
    }
    if([self cscEmail])
    {
        [result setValue:[self cscEmail] forKey:@"cscEmail"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self userType])
    {
        [result setValue:[self userType] forKey:@"userType"];
    }
    if([self companyName])
    {
        [result setValue:[self companyName] forKey:@"companyName"];
    }
    if([self createTimeStart])
    {
        [result setValue:[self createTimeStart] forKey:@"createTimeStart"];
    }
    if([self createTimeEnd])
    {
        [result setValue:[self createTimeEnd] forKey:@"createTimeEnd"];
    }
    if([self arrearageStatus])
    {
        [result setValue:[self arrearageStatus] forKey:@"arrearageStatus"];
    }
    if([self groups])
    {
        [result setValue:[self groups] forKey:@"groups"];
    }
    if([self group])
    {
        [result setValue:[self group] forKey:@"group"];
    }
    if([self billingWhite])
    {
        [result setValue:[self billingWhite] forKey:@"billingWhite"];
    }
    if([self tag])
    {
        [result setValue:[self tag] forKey:@"tag"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self currentPage])
    {
        [result setValue:[self currentPage] forKey:@"currentPage"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pin = [dictionary objectForKey:@"pin"];
    self.cscPhone = [dictionary objectForKey:@"cscPhone"];
    self.cscEmail = [dictionary objectForKey:@"cscEmail"];
    self.name = [dictionary objectForKey:@"name"];
    self.userType = [dictionary objectForKey:@"userType"];
    self.companyName = [dictionary objectForKey:@"companyName"];
    self.createTimeStart = [dictionary objectForKey:@"createTimeStart"];
    self.createTimeEnd = [dictionary objectForKey:@"createTimeEnd"];
    self.arrearageStatus = [dictionary objectForKey:@"arrearageStatus"];
    self.groups = [dictionary objectForKey:@"groups"];
    self.group = [dictionary objectForKey:@"group"];
    self.billingWhite = [dictionary objectForKey:@"billingWhite"];
    self.tag = [dictionary objectForKey:@"tag"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.currentPage = [dictionary objectForKey:@"currentPage"];
    return self;
}
 @end
@implementation CreateGroupInfo
-(id) initWithName:(NSString*) name
      descriptionValue:(NSString*)descriptionValue { 
     self.name = name;               
     self.descriptionValue = descriptionValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
}
 @end
@implementation PolicyDetail
-(id) initWithPolicyId:(NSString*) policyId
      name:(NSString*)name
      jrn:(NSString*)jrn
      descriptionValue:(NSString*)descriptionValue
      policyType:(NSString*)policyType
      version:(NSString*)version
      defaultEdition:(NSNumber*)defaultEdition
      content:(NSString*)content
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.policyId = policyId;               
     self.name = name;               
     self.jrn = jrn;               
     self.descriptionValue = descriptionValue;               
     self.policyType = policyType;               
     self.version = version;               
     self.defaultEdition = defaultEdition;               
     self.content = content;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self policyId])
    {
        [result setValue:[self policyId] forKey:@"policyId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self policyType])
    {
        [result setValue:[self policyType] forKey:@"policyType"];
    }
    if([self version])
    {
        [result setValue:[self version] forKey:@"version"];
    }
    if([self defaultEdition])
    {
        [result setValue:[self defaultEdition] forKey:@"defaultEdition"];
    }
    if([self content])
    {
        [result setValue:[self content] forKey:@"content"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.policyId = [dictionary objectForKey:@"policyId"];
    self.name = [dictionary objectForKey:@"name"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.policyType = [dictionary objectForKey:@"policyType"];
    self.version = [dictionary objectForKey:@"version"];
    self.defaultEdition = [dictionary objectForKey:@"defaultEdition"];
    self.content = [dictionary objectForKey:@"content"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation UpdatePolicyDescriptionInfo
-(id) initWithDescription:(NSString*) descriptionValue { 
     self.descriptionValue = descriptionValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
}
 @end
@implementation PolicyEdition
-(id) initWithIsDefaultEdition:(NSNumber*) isDefaultEdition
      edition:(NSNumber*)edition
      createTime:(NSString*)createTime { 
     self.isDefaultEdition = isDefaultEdition;               
     self.edition = edition;               
     self.createTime = createTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self isDefaultEdition])
    {
        [result setValue:[self isDefaultEdition] forKey:@"isDefaultEdition"];
    }
    if([self edition])
    {
        [result setValue:[self edition] forKey:@"edition"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.isDefaultEdition = [dictionary objectForKey:@"isDefaultEdition"];
    self.edition = [dictionary objectForKey:@"edition"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    return self;
}
 @end
@implementation UpdateLoginProfileInfo
-(id) initWithPasswordResetRequired:(NSNumber*) passwordResetRequired
      password:(NSString*)password
      autoGeneratePassword:(NSNumber*)autoGeneratePassword
      mFABindRequired:(NSNumber*)mFABindRequired { 
     self.passwordResetRequired = passwordResetRequired;               
     self.password = password;               
     self.autoGeneratePassword = autoGeneratePassword;               
     self.mFABindRequired = mFABindRequired;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self passwordResetRequired])
    {
        [result setValue:[self passwordResetRequired] forKey:@"passwordResetRequired"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self autoGeneratePassword])
    {
        [result setValue:[self autoGeneratePassword] forKey:@"autoGeneratePassword"];
    }
    if([self mFABindRequired])
    {
        [result setValue:[self mFABindRequired] forKey:@"mFABindRequired"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.passwordResetRequired = [dictionary objectForKey:@"passwordResetRequired"];
    self.password = [dictionary objectForKey:@"password"];
    self.autoGeneratePassword = [dictionary objectForKey:@"autoGeneratePassword"];
    self.mFABindRequired = [dictionary objectForKey:@"mFABindRequired"];
    return self;
}
 @end
@implementation RoleInfo
-(id) initWithRoleId:(NSString*) roleId
      roleName:(NSString*)roleName
      type:(NSNumber*)type
      assumeRolePolicyDocument:(NSString*)assumeRolePolicyDocument
      descriptionValue:(NSString*)descriptionValue
      maxSessionDuration:(NSNumber*)maxSessionDuration
      jrn:(NSString*)jrn
      createTime:(NSString*)createTime
      account:(NSString*)account { 
     self.roleId = roleId;               
     self.roleName = roleName;               
     self.type = type;               
     self.assumeRolePolicyDocument = assumeRolePolicyDocument;               
     self.descriptionValue = descriptionValue;               
     self.maxSessionDuration = maxSessionDuration;               
     self.jrn = jrn;               
     self.createTime = createTime;               
     self.account = account;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self roleId])
    {
        [result setValue:[self roleId] forKey:@"roleId"];
    }
    if([self roleName])
    {
        [result setValue:[self roleName] forKey:@"roleName"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    if([self assumeRolePolicyDocument])
    {
        [result setValue:[self assumeRolePolicyDocument] forKey:@"assumeRolePolicyDocument"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self maxSessionDuration])
    {
        [result setValue:[self maxSessionDuration] forKey:@"maxSessionDuration"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self account])
    {
        [result setValue:[self account] forKey:@"account"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.roleId = [dictionary objectForKey:@"roleId"];
    self.roleName = [dictionary objectForKey:@"roleName"];
    self.type = [dictionary objectForKey:@"type"];
    self.assumeRolePolicyDocument = [dictionary objectForKey:@"assumeRolePolicyDocument"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.maxSessionDuration = [dictionary objectForKey:@"maxSessionDuration"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.account = [dictionary objectForKey:@"account"];
    return self;
}
 @end
@implementation CreateLoginProfileInfo
-(id) initWithPasswordResetRequired:(NSNumber*) passwordResetRequired
      password:(NSString*)password
      autoGeneratePassword:(NSNumber*)autoGeneratePassword
      mFABindRequired:(NSNumber*)mFABindRequired { 
     self.passwordResetRequired = passwordResetRequired;               
     self.password = password;               
     self.autoGeneratePassword = autoGeneratePassword;               
     self.mFABindRequired = mFABindRequired;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self passwordResetRequired])
    {
        [result setValue:[self passwordResetRequired] forKey:@"passwordResetRequired"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self autoGeneratePassword])
    {
        [result setValue:[self autoGeneratePassword] forKey:@"autoGeneratePassword"];
    }
    if([self mFABindRequired])
    {
        [result setValue:[self mFABindRequired] forKey:@"mFABindRequired"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.passwordResetRequired = [dictionary objectForKey:@"passwordResetRequired"];
    self.password = [dictionary objectForKey:@"password"];
    self.autoGeneratePassword = [dictionary objectForKey:@"autoGeneratePassword"];
    self.mFABindRequired = [dictionary objectForKey:@"mFABindRequired"];
    return self;
}
 @end
@implementation RolePolicy
-(id) initWithPolicyName:(NSString*) policyName
      descriptionValue:(NSString*)descriptionValue
      type:(NSString*)type
      policyJrn:(NSString*)policyJrn { 
     self.policyName = policyName;               
     self.descriptionValue = descriptionValue;               
     self.type = type;               
     self.policyJrn = policyJrn;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self policyName])
    {
        [result setValue:[self policyName] forKey:@"policyName"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self type])
    {
        [result setValue:[self type] forKey:@"type"];
    }
    if([self policyJrn])
    {
        [result setValue:[self policyJrn] forKey:@"policyJrn"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.policyName = [dictionary objectForKey:@"policyName"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.type = [dictionary objectForKey:@"type"];
    self.policyJrn = [dictionary objectForKey:@"policyJrn"];
    return self;
}
 @end
@implementation Group
-(id) initWithGroupId:(NSString*) groupId
      name:(NSString*)name
      jrn:(NSString*)jrn
      descriptionValue:(NSString*)descriptionValue
      subUserSum:(NSNumber*)subUserSum
      policySum:(NSNumber*)policySum
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.groupId = groupId;               
     self.name = name;               
     self.jrn = jrn;               
     self.descriptionValue = descriptionValue;               
     self.subUserSum = subUserSum;               
     self.policySum = policySum;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self groupId])
    {
        [result setValue:[self groupId] forKey:@"groupId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self jrn])
    {
        [result setValue:[self jrn] forKey:@"jrn"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self subUserSum])
    {
        [result setValue:[self subUserSum] forKey:@"subUserSum"];
    }
    if([self policySum])
    {
        [result setValue:[self policySum] forKey:@"policySum"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.groupId = [dictionary objectForKey:@"groupId"];
    self.name = [dictionary objectForKey:@"name"];
    self.jrn = [dictionary objectForKey:@"jrn"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.subUserSum = [dictionary objectForKey:@"subUserSum"];
    self.policySum = [dictionary objectForKey:@"policySum"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation CreateSubUserRes
-(id) initWithName:(NSString*) name
      password:(NSString*)password
      email:(NSString*)email
      phone:(NSString*)phone
      accessKey:(NSString*)accessKey
      secretAccessKey:(NSString*)secretAccessKey
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.name = name;               
     self.password = password;               
     self.email = email;               
     self.phone = phone;               
     self.accessKey = accessKey;               
     self.secretAccessKey = secretAccessKey;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self email])
    {
        [result setValue:[self email] forKey:@"email"];
    }
    if([self phone])
    {
        [result setValue:[self phone] forKey:@"phone"];
    }
    if([self accessKey])
    {
        [result setValue:[self accessKey] forKey:@"accessKey"];
    }
    if([self secretAccessKey])
    {
        [result setValue:[self secretAccessKey] forKey:@"secretAccessKey"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.password = [dictionary objectForKey:@"password"];
    self.email = [dictionary objectForKey:@"email"];
    self.phone = [dictionary objectForKey:@"phone"];
    self.accessKey = [dictionary objectForKey:@"accessKey"];
    self.secretAccessKey = [dictionary objectForKey:@"secretAccessKey"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation UpdateAssumeRolePolicyInfo
-(id) initWithAssumeRolePolicyDocument:(NSString*) assumeRolePolicyDocument { 
     self.assumeRolePolicyDocument = assumeRolePolicyDocument;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self assumeRolePolicyDocument])
    {
        [result setValue:[self assumeRolePolicyDocument] forKey:@"assumeRolePolicyDocument"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.assumeRolePolicyDocument = [dictionary objectForKey:@"assumeRolePolicyDocument"];
    return self;
}
 @end
@implementation AddPermissionsInfo
-(id) initWithPermissionIds:(NSArray<NSNumber*>*) permissionIds { 
     self.permissionIds = permissionIds;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self permissionIds])
    {
        [result setValue:[self permissionIds] forKey:@"permissionIds"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.permissionIds = [dictionary objectForKey:@"permissionIds"];
    return self;
}
 @end
@implementation SubUser
-(id) initWithName:(NSString*) name
      phone:(NSString*)phone
      email:(NSString*)email
      descriptionValue:(NSString*)descriptionValue
      account:(NSString*)account
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.name = name;               
     self.phone = phone;               
     self.email = email;               
     self.descriptionValue = descriptionValue;               
     self.account = account;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self phone])
    {
        [result setValue:[self phone] forKey:@"phone"];
    }
    if([self email])
    {
        [result setValue:[self email] forKey:@"email"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self account])
    {
        [result setValue:[self account] forKey:@"account"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.phone = [dictionary objectForKey:@"phone"];
    self.email = [dictionary objectForKey:@"email"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.account = [dictionary objectForKey:@"account"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation LoginProfileInfo
-(id) initWithName:(NSString*) name
      password:(NSString*)password
      passwordResetRequired:(NSNumber*)passwordResetRequired
      mFABindRequired:(NSNumber*)mFABindRequired { 
     self.name = name;               
     self.password = password;               
     self.passwordResetRequired = passwordResetRequired;               
     self.mFABindRequired = mFABindRequired;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self passwordResetRequired])
    {
        [result setValue:[self passwordResetRequired] forKey:@"passwordResetRequired"];
    }
    if([self mFABindRequired])
    {
        [result setValue:[self mFABindRequired] forKey:@"mFABindRequired"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.password = [dictionary objectForKey:@"password"];
    self.passwordResetRequired = [dictionary objectForKey:@"passwordResetRequired"];
    self.mFABindRequired = [dictionary objectForKey:@"mFABindRequired"];
    return self;
}
 @end
@implementation CreatePolicyInfo
-(id) initWithName:(NSString*) name
      descriptionValue:(NSString*)descriptionValue
      content:(NSString*)content { 
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.content = content;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self content])
    {
        [result setValue:[self content] forKey:@"content"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.content = [dictionary objectForKey:@"content"];
    return self;
}
 @end
@implementation SendOutSiteNotice
-(id) initWithPin:(NSString*) pin
      emailSubject:(NSString*)emailSubject
      emailContent:(NSString*)emailContent
      notifyBusinessTypeEnum:(NSString*)notifyBusinessTypeEnum
      templateId:(NSNumber*)templateId
      templateParam:(NSArray<NSString*>*)templateParam
      smsMessageSource:(NSString*)smsMessageSource { 
     self.pin = pin;               
     self.emailSubject = emailSubject;               
     self.emailContent = emailContent;               
     self.notifyBusinessTypeEnum = notifyBusinessTypeEnum;               
     self.templateId = templateId;               
     self.templateParam = templateParam;               
     self.smsMessageSource = smsMessageSource;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pin])
    {
        [result setValue:[self pin] forKey:@"pin"];
    }
    if([self emailSubject])
    {
        [result setValue:[self emailSubject] forKey:@"emailSubject"];
    }
    if([self emailContent])
    {
        [result setValue:[self emailContent] forKey:@"emailContent"];
    }
    if([self notifyBusinessTypeEnum])
    {
        [result setValue:[self notifyBusinessTypeEnum] forKey:@"notifyBusinessTypeEnum"];
    }
    if([self templateId])
    {
        [result setValue:[self templateId] forKey:@"templateId"];
    }
    if([self templateParam])
    {
        [result setValue:[self templateParam] forKey:@"templateParam"];
    }
    if([self smsMessageSource])
    {
        [result setValue:[self smsMessageSource] forKey:@"smsMessageSource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pin = [dictionary objectForKey:@"pin"];
    self.emailSubject = [dictionary objectForKey:@"emailSubject"];
    self.emailContent = [dictionary objectForKey:@"emailContent"];
    self.notifyBusinessTypeEnum = [dictionary objectForKey:@"notifyBusinessTypeEnum"];
    self.templateId = [dictionary objectForKey:@"templateId"];
    self.templateParam = [dictionary objectForKey:@"templateParam"];
    self.smsMessageSource = [dictionary objectForKey:@"smsMessageSource"];
    return self;
}
 @end
@implementation VirtualMFADevice
-(id) initWithBase64Qr:(NSString*) base64Qr
      mFAInfos:(NSArray<MFAInfo*>*)mFAInfos { 
     self.base64Qr = base64Qr;               
     self.mFAInfos = mFAInfos;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self base64Qr])
    {
        [result setValue:[self base64Qr] forKey:@"base64Qr"];
    }
    if([self mFAInfos])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self mFAInfos] count]; i++) {
            MFAInfo* item = [[self mFAInfos] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"mFAInfos"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.base64Qr = [dictionary objectForKey:@"base64Qr"];
    NSArray* mFAInfosArray = [dictionary objectForKey:@"mFAInfos"];
    if(mFAInfosArray&&![mFAInfosArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [mFAInfosArray count];i++)
        {
            MFAInfo* item = [[MFAInfo alloc]initWithDic:[mFAInfosArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.mFAInfos = propertyArray;
    }
    return self;
}
 @end
@implementation RegionAzVo
-(id) initWithAlias:(NSString*) alias
      region:(NSString*)region
      visible:(NSNumber*)visible
      azStatusList:(NSArray<AzSaleStatusVo*>*)azStatusList { 
     self.alias = alias;               
     self.region = region;               
     self.visible = visible;               
     self.azStatusList = azStatusList;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self alias])
    {
        [result setValue:[self alias] forKey:@"alias"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self visible])
    {
        [result setValue:[self visible] forKey:@"visible"];
    }
    if([self azStatusList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self azStatusList] count]; i++) {
            AzSaleStatusVo* item = [[self azStatusList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"azStatusList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.alias = [dictionary objectForKey:@"alias"];
    self.region = [dictionary objectForKey:@"region"];
    self.visible = [dictionary objectForKey:@"visible"];
    NSArray* azStatusListArray = [dictionary objectForKey:@"azStatusList"];
    if(azStatusListArray&&![azStatusListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [azStatusListArray count];i++)
        {
            AzSaleStatusVo* item = [[AzSaleStatusVo alloc]initWithDic:[azStatusListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.azStatusList = propertyArray;
    }
    return self;
}
 @end
@implementation GlobalAzMappingVo
-(id) initWithAlias:(NSString*) alias
      region:(NSString*)region
      mapping:(NSArray<AzMappingVo*>*)mapping { 
     self.alias = alias;               
     self.region = region;               
     self.mapping = mapping;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self alias])
    {
        [result setValue:[self alias] forKey:@"alias"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self mapping])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self mapping] count]; i++) {
            AzMappingVo* item = [[self mapping] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"mapping"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.alias = [dictionary objectForKey:@"alias"];
    self.region = [dictionary objectForKey:@"region"];
    NSArray* mappingArray = [dictionary objectForKey:@"mapping"];
    if(mappingArray&&![mappingArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [mappingArray count];i++)
        {
            AzMappingVo* item = [[AzMappingVo alloc]initWithDic:[mappingArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.mapping = propertyArray;
    }
    return self;
}
 @end
@implementation PasswordPolicy
-(id) initWithLength:(NSNumber*) length
      age:(NSNumber*)age
      expirationOperation:(NSNumber*)expirationOperation
      reusePrevention:(NSNumber*)reusePrevention
      retryTimes:(NSNumber*)retryTimes
      validLoginDuration:(NSNumber*)validLoginDuration
      rule:(PasswordPolicyRule*)rule { 
     self.length = length;               
     self.age = age;               
     self.expirationOperation = expirationOperation;               
     self.reusePrevention = reusePrevention;               
     self.retryTimes = retryTimes;               
     self.validLoginDuration = validLoginDuration;               
     self.rule = rule;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self length])
    {
        [result setValue:[self length] forKey:@"length"];
    }
    if([self age])
    {
        [result setValue:[self age] forKey:@"age"];
    }
    if([self expirationOperation])
    {
        [result setValue:[self expirationOperation] forKey:@"expirationOperation"];
    }
    if([self reusePrevention])
    {
        [result setValue:[self reusePrevention] forKey:@"reusePrevention"];
    }
    if([self retryTimes])
    {
        [result setValue:[self retryTimes] forKey:@"retryTimes"];
    }
    if([self validLoginDuration])
    {
        [result setValue:[self validLoginDuration] forKey:@"validLoginDuration"];
    }
    if([self rule])
    {
        [result setValue:[[self rule] dictionary]forKey:@"rule"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.length = [dictionary objectForKey:@"length"];
    self.age = [dictionary objectForKey:@"age"];
    self.expirationOperation = [dictionary objectForKey:@"expirationOperation"];
    self.reusePrevention = [dictionary objectForKey:@"reusePrevention"];
    self.retryTimes = [dictionary objectForKey:@"retryTimes"];
    self.validLoginDuration = [dictionary objectForKey:@"validLoginDuration"];
    self.rule = [[PasswordPolicyRule alloc]initWithDic:[dictionary objectForKey:@"rule"]];
    return self;
}
 @end
@implementation PermissionDetail
-(id) initWithPermission:(NSString*) permission
      resource:(NSArray<Resource*>*)resource { 
     self.permission = permission;               
     self.resource = resource;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self permission])
    {
        [result setValue:[self permission] forKey:@"permission"];
    }
    if([self resource])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self resource] count]; i++) {
            Resource* item = [[self resource] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"resource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.permission = [dictionary objectForKey:@"permission"];
    NSArray* resourceArray = [dictionary objectForKey:@"resource"];
    if(resourceArray&&![resourceArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [resourceArray count];i++)
        {
            Resource* item = [[Resource alloc]initWithDic:[resourceArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.resource = propertyArray;
    }
    return self;
}
 @end
@implementation UpdatePermissionInfo
-(id) initWithName:(NSString*) name
      descriptionValue:(NSString*)descriptionValue
      content:(NSArray<PermissionDetail*>*)content { 
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.content = content;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self content])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self content] count]; i++) {
            PermissionDetail* item = [[self content] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"content"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    NSArray* contentArray = [dictionary objectForKey:@"content"];
    if(contentArray&&![contentArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [contentArray count];i++)
        {
            PermissionDetail* item = [[PermissionDetail alloc]initWithDic:[contentArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.content = propertyArray;
    }
    return self;
}
 @end
@implementation Permission
-(id) initWithId:(NSNumber*) idValue
      account:(NSString*)account
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      permissionType:(NSString*)permissionType
      version:(NSString*)version
      content:(NSString*)content
      permissionDetailList:(NSArray<PermissionDetail*>*)permissionDetailList { 
     self.idValue = idValue;               
     self.account = account;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.permissionType = permissionType;               
     self.version = version;               
     self.content = content;               
     self.permissionDetailList = permissionDetailList;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    if([self account])
    {
        [result setValue:[self account] forKey:@"account"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self permissionType])
    {
        [result setValue:[self permissionType] forKey:@"permissionType"];
    }
    if([self version])
    {
        [result setValue:[self version] forKey:@"version"];
    }
    if([self content])
    {
        [result setValue:[self content] forKey:@"content"];
    }
    if([self permissionDetailList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self permissionDetailList] count]; i++) {
            PermissionDetail* item = [[self permissionDetailList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"permissionDetailList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    self.account = [dictionary objectForKey:@"account"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.permissionType = [dictionary objectForKey:@"permissionType"];
    self.version = [dictionary objectForKey:@"version"];
    self.content = [dictionary objectForKey:@"content"];
    NSArray* permissionDetailListArray = [dictionary objectForKey:@"permissionDetailList"];
    if(permissionDetailListArray&&![permissionDetailListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [permissionDetailListArray count];i++)
        {
            PermissionDetail* item = [[PermissionDetail alloc]initWithDic:[permissionDetailListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.permissionDetailList = propertyArray;
    }
    return self;
}
 @end
@implementation UserResVo
-(id) initWithPin:(NSString*) pin
      cscPhone:(NSString*)cscPhone
      cscEmail:(NSString*)cscEmail
      createTime:(NSString*)createTime
      userType:(NSNumber*)userType
      companyName:(NSString*)companyName
      name:(NSString*)name
      arrearageTime:(NSString*)arrearageTime
      userTagObject:(Flags*)userTagObject
      attachment:(UserAttachment*)attachment { 
     self.pin = pin;               
     self.cscPhone = cscPhone;               
     self.cscEmail = cscEmail;               
     self.createTime = createTime;               
     self.userType = userType;               
     self.companyName = companyName;               
     self.name = name;               
     self.arrearageTime = arrearageTime;               
     self.userTagObject = userTagObject;               
     self.attachment = attachment;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self pin])
    {
        [result setValue:[self pin] forKey:@"pin"];
    }
    if([self cscPhone])
    {
        [result setValue:[self cscPhone] forKey:@"cscPhone"];
    }
    if([self cscEmail])
    {
        [result setValue:[self cscEmail] forKey:@"cscEmail"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self userType])
    {
        [result setValue:[self userType] forKey:@"userType"];
    }
    if([self companyName])
    {
        [result setValue:[self companyName] forKey:@"companyName"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self arrearageTime])
    {
        [result setValue:[self arrearageTime] forKey:@"arrearageTime"];
    }
    if([self userTagObject])
    {
        [result setValue:[[self userTagObject] dictionary]forKey:@"userTagObject"];
    }
    if([self attachment])
    {
        [result setValue:[[self attachment] dictionary]forKey:@"attachment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pin = [dictionary objectForKey:@"pin"];
    self.cscPhone = [dictionary objectForKey:@"cscPhone"];
    self.cscEmail = [dictionary objectForKey:@"cscEmail"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.userType = [dictionary objectForKey:@"userType"];
    self.companyName = [dictionary objectForKey:@"companyName"];
    self.name = [dictionary objectForKey:@"name"];
    self.arrearageTime = [dictionary objectForKey:@"arrearageTime"];
    self.userTagObject = [[Flags alloc]initWithDic:[dictionary objectForKey:@"userTagObject"]];
    self.attachment = [[UserAttachment alloc]initWithDic:[dictionary objectForKey:@"attachment"]];
    return self;
}
 @end
@implementation ConditionStatement
-(id) initWithConditionMappings:(NSArray<ConditionMappingVo*>*) conditionMappings { 
     self.conditionMappings = conditionMappings;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self conditionMappings])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self conditionMappings] count]; i++) {
            ConditionMappingVo* item = [[self conditionMappings] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"conditionMappings"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* conditionMappingsArray = [dictionary objectForKey:@"conditionMappings"];
    if(conditionMappingsArray&&![conditionMappingsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [conditionMappingsArray count];i++)
        {
            ConditionMappingVo* item = [[ConditionMappingVo alloc]initWithDic:[conditionMappingsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.conditionMappings = propertyArray;
    }
    return self;
}
 @end
@implementation ServiceDetail
-(id) initWithServiceName:(NSString*) serviceName
      apiList:(NSArray<APIInfo*>*)apiList
      resourceList:(NSArray<NSString*>*)resourceList { 
     self.serviceName = serviceName;               
     self.apiList = apiList;               
     self.resourceList = resourceList;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serviceName])
    {
        [result setValue:[self serviceName] forKey:@"serviceName"];
    }
    if([self apiList])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self apiList] count]; i++) {
            APIInfo* item = [[self apiList] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"apiList"];
    }
    if([self resourceList])
    {
        [result setValue:[self resourceList] forKey:@"resourceList"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serviceName = [dictionary objectForKey:@"serviceName"];
    NSArray* apiListArray = [dictionary objectForKey:@"apiList"];
    if(apiListArray&&![apiListArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [apiListArray count];i++)
        {
            APIInfo* item = [[APIInfo alloc]initWithDic:[apiListArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.apiList = propertyArray;
    }
    self.resourceList = [dictionary objectForKey:@"resourceList"];
    return self;
}
 @end
@implementation CreatePermissionInfo
-(id) initWithName:(NSString*) name
      descriptionValue:(NSString*)descriptionValue
      content:(NSArray<PermissionDetail*>*)content { 
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.content = content;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self content])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self content] count]; i++) {
            PermissionDetail* item = [[self content] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"content"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    NSArray* contentArray = [dictionary objectForKey:@"content"];
    if(contentArray&&![contentArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [contentArray count];i++)
        {
            PermissionDetail* item = [[PermissionDetail alloc]initWithDic:[contentArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.content = propertyArray;
    }
    return self;
}
 @end
@implementation BaseProductRegionVo
-(id) initWithServiceCode:(NSString*) serviceCode
      regionAzVos:(NSArray<RegionAzVo*>*)regionAzVos { 
     self.serviceCode = serviceCode;               
     self.regionAzVos = regionAzVos;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serviceCode])
    {
        [result setValue:[self serviceCode] forKey:@"serviceCode"];
    }
    if([self regionAzVos])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self regionAzVos] count]; i++) {
            RegionAzVo* item = [[self regionAzVos] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"regionAzVos"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serviceCode = [dictionary objectForKey:@"serviceCode"];
    NSArray* regionAzVosArray = [dictionary objectForKey:@"regionAzVos"];
    if(regionAzVosArray&&![regionAzVosArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [regionAzVosArray count];i++)
        {
            RegionAzVo* item = [[RegionAzVo alloc]initWithDic:[regionAzVosArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.regionAzVos = propertyArray;
    }
    return self;
}
 @end
 
 


