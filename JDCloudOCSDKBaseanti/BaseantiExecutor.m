
/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Anti-DDoS Basic APIs
DDoS 基础防护防护 IP、攻击记录相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>

#import <JDCloudOCSDKBaseanti/BaseantiExecutor.h>


/// 查询基础防护已防护公网 IP 安全信息, 支持 ipv4 和 ipv6
@implementation  BaseantiDescribeIpSafetyInfoExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/describeIpSafetyInfo";
    return self;
}
@end

/// 设置基础防护已防护公网 IP 的清洗阈值, 支持 ipv4 和 ipv6
@implementation  BaseantiSetIpCleanThresholdExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"POST";
    self.url = @"/regions/{regionId}/setIpCleanThreshold";
    return self;
}
@end

/// 查询多个公网 IP 的监控流量, 支持 ipv4 和 ipv6
@implementation  BaseantiDescribeIpMonitorFlowExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/describeIpMonitorFlow";
    return self;
}
@end

/// 查询基础防护已防护的公网 IP 的安全信息列表. 包括私有网络的弹性公网 IP(运营商级 NAT 保留地址除外), 云物理服务器的公网 IP 和弹性公网 IP. (已废弃, 建议使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-basic/api/describeelasticipresources&quot;&gt;describeElasticIpResources&lt;/a&gt;, &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-basic/api/describecpsipresources&quot;&gt;describeCpsIpResources&lt;/a&gt; 接口)&quot;
   /// 
@implementation  BaseantiDescribeIpResourcesExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/ipResources";
    return self;
}
@end

/// 攻击情况统计
@implementation  BaseantiDescribeAttackStatisticsExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/describeAttackStatistics";
    return self;
}
@end

/// 查询基础防护已防护的私有网络的弹性公网 IP 的安全信息. 包括私有网络的弹性公网 IP(运营商级 NAT 保留地址除外)
   /// 
@implementation  BaseantiDescribeElasticIpResourcesExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/elasticIpResources";
    return self;
}
@end

/// 查询基础防护已防护的托管区 IP 的安全信息
@implementation  BaseantiDescribeCcsIpResourcesExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/ccsIpResources";
    return self;
}
@end

/// 查询公网 IP 可设置清洗阈值范围, 支持 ipv4 和 ipv6
@implementation  BaseantiDescribeIpCleanThresholdRangeExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/describeIpCleanThresholdRange";
    return self;
}
@end

/// 查询各类型攻击次数
@implementation  BaseantiDescribeAttackTypeCountExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/describeAttackTypeCount";
    return self;
}
@end

/// 查询公网 IP 的攻击记录, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-basic/api/describeattacklogs&quot;&gt;describeAttackLogs&lt;/a&gt; 接口)
   /// 
@implementation  BaseantiDescribeIpResourceProtectInfoExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/ipResources/{ip}/protectInfo";
    return self;
}
@end

/// 查询基础防护已防护的云物理服务器公网 IP 的安全信息. 包括云物理服务器的公网 IP 和弹性公网 IP.
   /// 
@implementation  BaseantiDescribeCpsIpResourcesExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/cpsIpResources";
    return self;
}
@end

/// 设置基础防护已防护公网 IP 的清洗阈值, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-basic/api/setipcleanthreshold&quot;&gt;setIpCleanThreshold&lt;/a&gt; 接口)
   /// 
@implementation  BaseantiSetCleanThresholdExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"POST";
    self.url = @"/regions/{regionId}/ipResources/{ip}:setCleanThreshold";
    return self;
}
@end

/// 查询公网 IP 的 endTime 之前 15 分钟内监控流量, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-basic/api/describeipmonitorflow&quot;&gt;describeIpMonitorFlow&lt;/a&gt; 接口)
   /// 
@implementation  BaseantiDescribeIpResourceFlowExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/ipResources/{ip}/monitorFlow";
    return self;
}
@end

/// 查询公网 IP 安全信息, 仅支持 ipv4. (已废弃, 建议使用 &lt;a href&#x3D;&quot;http://docs.jdcloud.com/anti-ddos-basic/api/describeipsafetyinfo&quot;&gt;describeIpSafetyInfo&lt;/a&gt; 接口)
   /// 
@implementation  BaseantiDescribeIpResourceInfoExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/regions/{regionId}/ipResources/{ip}";
    return self;
}
@end

/// 查询攻击记录
@implementation  BaseantiDescribeAttackLogsExecutor

-(id) initWithJDCloudClient:(BaseantiClient*)JDCloudClient
{
    self.jdCloudClient = JDCloudClient;
    self.method = @"GET";
    self.url = @"/attacklog";
    return self;
}
@end
