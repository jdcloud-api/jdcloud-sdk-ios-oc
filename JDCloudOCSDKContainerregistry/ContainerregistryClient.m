 /* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

容器镜像仓库
容器镜像仓库服务

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#import <Foundation/Foundation.h>
#import <JDCloudOCSDKContainerregistry/ContainerregistryExecutor.h>

@implementation ContainerregistryClient

@synthesize userAgent = _userAgent;
@synthesize serviceName = _serviceName;
@synthesize version = _version;

-(void) addCustomerHeaderWithKey:(NSString*) key
                           value:(NSString*) value{
    if(![self customHeader])
    {
        self.customHeader = [[NSMutableDictionary alloc] init];
    }
    if(key && value)
    {
        [[self customHeader] setValue:value forKey:key];
    }
   
}

-(id)initWithGlobalConfig{
    if(![GlobalConfig credential])
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@"GlobalConfig credential not config" userInfo:nil];
        @throw e;
    }
    self.credential = [GlobalConfig credential];
    if(![GlobalConfig sdkEnvironment])
    {
        self.sdkEnvironment = [[SDKEnvironment alloc] initWithEndPoint:@"containerregistry.jdcloud-api.com"];
    }else
    {
        self.sdkEnvironment = [GlobalConfig sdkEnvironment];
    }
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 containerregistry  v1";
    _serviceName = @"containerregistry";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}

-(id)initWithCredential:(Credential*)credential
         sdkEnvironment:(SDKEnvironment*)sdkEnvironment
{
    if(!credential)
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@" credential can not null" userInfo:nil];
        @throw e;
    }else{
        self.credential = credential;
    }
    
    if(!sdkEnvironment)
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@" sdkEnvironment can not null" userInfo:nil];
        @throw e;
    }else{
        self.sdkEnvironment = sdkEnvironment;
    }
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 containerregistry  v1";
    _serviceName = @"containerregistry";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}

-(id)initWithCredential:(Credential*)credential
{
    if(!credential)
    {
        NSException *e = [SDKArgumentNullException exceptionWithName:@"ArgumentNullException" reason:@" credential can not null" userInfo:nil];
        @throw e;
    }else{
        self.credential = credential;
    }
    if(![GlobalConfig sdkEnvironment])
    {
        self.sdkEnvironment = [[SDKEnvironment alloc] initWithEndPoint:@"containerregistry.jdcloud-api.com"];
    }else
    {
        self.sdkEnvironment = [GlobalConfig sdkEnvironment];
    }
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 containerregistry  v1";
    _serviceName = @"containerregistry";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}

-(id)init{
    self.httpRequestProtocol = @"https";
    _userAgent = @"JdCloudOCSdk 0.0.1 containerregistry  v1";
    _serviceName = @"containerregistry";
    _version = @"v1";
    self.contentType = @"application/json";
    return self;
}


/**
createRepository sync request
@param createRepositoryRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRepositoryResponse` the request response data model
*/
-(NSDictionary*) createRepositorySyncWithRequest:(ContainerregistryCreateRepositoryRequest*) createRepositoryRequest
{
ContainerregistryCreateRepositoryExecutor* excutor = [[ContainerregistryCreateRepositoryExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createRepositoryRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCreateRepositoryResponse* response = [[ContainerregistryCreateRepositoryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createRepositoryResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createRepositoryAsyncWithRequest:(ContainerregistryCreateRepositoryRequest*) createRepositoryRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryCreateRepositoryResponse* _Nullable createRepositoryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryCreateRepositoryExecutor* excutor = [[ContainerregistryCreateRepositoryExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createRepositoryRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCreateRepositoryResponse* response = [[ContainerregistryCreateRepositoryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
checkRepositoryName sync request
@param checkRepositoryNameRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `checkRepositoryNameResponse` the request response data model
*/
-(NSDictionary*) checkRepositoryNameSyncWithRequest:(ContainerregistryCheckRepositoryNameRequest*) checkRepositoryNameRequest
{
ContainerregistryCheckRepositoryNameExecutor* excutor = [[ContainerregistryCheckRepositoryNameExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:checkRepositoryNameRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCheckRepositoryNameResponse* response = [[ContainerregistryCheckRepositoryNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"checkRepositoryNameResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)checkRepositoryNameAsyncWithRequest:(ContainerregistryCheckRepositoryNameRequest*) checkRepositoryNameRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryCheckRepositoryNameResponse* _Nullable checkRepositoryNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryCheckRepositoryNameExecutor* excutor = [[ContainerregistryCheckRepositoryNameExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:checkRepositoryNameRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCheckRepositoryNameResponse* response = [[ContainerregistryCheckRepositoryNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteRegistry sync request
@param deleteRegistryRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteRegistryResponse` the request response data model
*/
-(NSDictionary*) deleteRegistrySyncWithRequest:(ContainerregistryDeleteRegistryRequest*) deleteRegistryRequest
{
ContainerregistryDeleteRegistryExecutor* excutor = [[ContainerregistryDeleteRegistryExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteRegistryRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDeleteRegistryResponse* response = [[ContainerregistryDeleteRegistryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteRegistryResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteRegistryAsyncWithRequest:(ContainerregistryDeleteRegistryRequest*) deleteRegistryRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDeleteRegistryResponse* _Nullable deleteRegistryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDeleteRegistryExecutor* excutor = [[ContainerregistryDeleteRegistryExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteRegistryRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDeleteRegistryResponse* response = [[ContainerregistryDeleteRegistryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteRepository sync request
@param deleteRepositoryRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteRepositoryResponse` the request response data model
*/
-(NSDictionary*) deleteRepositorySyncWithRequest:(ContainerregistryDeleteRepositoryRequest*) deleteRepositoryRequest
{
ContainerregistryDeleteRepositoryExecutor* excutor = [[ContainerregistryDeleteRepositoryExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteRepositoryRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDeleteRepositoryResponse* response = [[ContainerregistryDeleteRepositoryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteRepositoryResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteRepositoryAsyncWithRequest:(ContainerregistryDeleteRepositoryRequest*) deleteRepositoryRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDeleteRepositoryResponse* _Nullable deleteRepositoryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDeleteRepositoryExecutor* excutor = [[ContainerregistryDeleteRepositoryExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteRepositoryRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDeleteRepositoryResponse* response = [[ContainerregistryDeleteRepositoryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeQuotas sync request
@param describeQuotasRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeQuotasResponse` the request response data model
*/
-(NSDictionary*) describeQuotasSyncWithRequest:(ContainerregistryDescribeQuotasRequest*) describeQuotasRequest
{
ContainerregistryDescribeQuotasExecutor* excutor = [[ContainerregistryDescribeQuotasExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeQuotasRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeQuotasResponse* response = [[ContainerregistryDescribeQuotasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeQuotasResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeQuotasAsyncWithRequest:(ContainerregistryDescribeQuotasRequest*) describeQuotasRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDescribeQuotasResponse* _Nullable describeQuotasResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDescribeQuotasExecutor* excutor = [[ContainerregistryDescribeQuotasExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeQuotasRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeQuotasResponse* response = [[ContainerregistryDescribeQuotasResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeImages sync request
@param describeImagesRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeImagesResponse` the request response data model
*/
-(NSDictionary*) describeImagesSyncWithRequest:(ContainerregistryDescribeImagesRequest*) describeImagesRequest
{
ContainerregistryDescribeImagesExecutor* excutor = [[ContainerregistryDescribeImagesExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeImagesRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeImagesResponse* response = [[ContainerregistryDescribeImagesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeImagesResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeImagesAsyncWithRequest:(ContainerregistryDescribeImagesRequest*) describeImagesRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDescribeImagesResponse* _Nullable describeImagesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDescribeImagesExecutor* excutor = [[ContainerregistryDescribeImagesExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeImagesRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeImagesResponse* response = [[ContainerregistryDescribeImagesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeRepositories sync request
@param describeRepositoriesRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRepositoriesResponse` the request response data model
*/
-(NSDictionary*) describeRepositoriesSyncWithRequest:(ContainerregistryDescribeRepositoriesRequest*) describeRepositoriesRequest
{
ContainerregistryDescribeRepositoriesExecutor* excutor = [[ContainerregistryDescribeRepositoriesExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeRepositoriesRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeRepositoriesResponse* response = [[ContainerregistryDescribeRepositoriesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeRepositoriesResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeRepositoriesAsyncWithRequest:(ContainerregistryDescribeRepositoriesRequest*) describeRepositoriesRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDescribeRepositoriesResponse* _Nullable describeRepositoriesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDescribeRepositoriesExecutor* excutor = [[ContainerregistryDescribeRepositoriesExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeRepositoriesRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeRepositoriesResponse* response = [[ContainerregistryDescribeRepositoriesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeRegistry sync request
@param describeRegistryRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRegistryResponse` the request response data model
*/
-(NSDictionary*) describeRegistrySyncWithRequest:(ContainerregistryDescribeRegistryRequest*) describeRegistryRequest
{
ContainerregistryDescribeRegistryExecutor* excutor = [[ContainerregistryDescribeRegistryExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeRegistryRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeRegistryResponse* response = [[ContainerregistryDescribeRegistryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeRegistryResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeRegistryAsyncWithRequest:(ContainerregistryDescribeRegistryRequest*) describeRegistryRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDescribeRegistryResponse* _Nullable describeRegistryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDescribeRegistryExecutor* excutor = [[ContainerregistryDescribeRegistryExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeRegistryRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeRegistryResponse* response = [[ContainerregistryDescribeRegistryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
checkRegistryName sync request
@param checkRegistryNameRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `checkRegistryNameResponse` the request response data model
*/
-(NSDictionary*) checkRegistryNameSyncWithRequest:(ContainerregistryCheckRegistryNameRequest*) checkRegistryNameRequest
{
ContainerregistryCheckRegistryNameExecutor* excutor = [[ContainerregistryCheckRegistryNameExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:checkRegistryNameRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCheckRegistryNameResponse* response = [[ContainerregistryCheckRegistryNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"checkRegistryNameResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)checkRegistryNameAsyncWithRequest:(ContainerregistryCheckRegistryNameRequest*) checkRegistryNameRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryCheckRegistryNameResponse* _Nullable checkRegistryNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryCheckRegistryNameExecutor* excutor = [[ContainerregistryCheckRegistryNameExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:checkRegistryNameRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCheckRegistryNameResponse* response = [[ContainerregistryCheckRegistryNameResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
createRegistry sync request
@param createRegistryRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createRegistryResponse` the request response data model
*/
-(NSDictionary*) createRegistrySyncWithRequest:(ContainerregistryCreateRegistryRequest*) createRegistryRequest
{
ContainerregistryCreateRegistryExecutor* excutor = [[ContainerregistryCreateRegistryExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:createRegistryRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCreateRegistryResponse* response = [[ContainerregistryCreateRegistryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"createRegistryResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)createRegistryAsyncWithRequest:(ContainerregistryCreateRegistryRequest*) createRegistryRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryCreateRegistryResponse* _Nullable createRegistryResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryCreateRegistryExecutor* excutor = [[ContainerregistryCreateRegistryExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:createRegistryRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryCreateRegistryResponse* response = [[ContainerregistryCreateRegistryResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
deleteImage sync request
@param deleteImageRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteImageResponse` the request response data model
*/
-(NSDictionary*) deleteImageSyncWithRequest:(ContainerregistryDeleteImageRequest*) deleteImageRequest
{
ContainerregistryDeleteImageExecutor* excutor = [[ContainerregistryDeleteImageExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:deleteImageRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDeleteImageResponse* response = [[ContainerregistryDeleteImageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"deleteImageResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)deleteImageAsyncWithRequest:(ContainerregistryDeleteImageRequest*) deleteImageRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDeleteImageResponse* _Nullable deleteImageResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDeleteImageExecutor* excutor = [[ContainerregistryDeleteImageExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:deleteImageRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDeleteImageResponse* response = [[ContainerregistryDeleteImageResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
getAuthorizationToken sync request
@param getAuthorizationTokenRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getAuthorizationTokenResponse` the request response data model
*/
-(NSDictionary*) getAuthorizationTokenSyncWithRequest:(ContainerregistryGetAuthorizationTokenRequest*) getAuthorizationTokenRequest
{
ContainerregistryGetAuthorizationTokenExecutor* excutor = [[ContainerregistryGetAuthorizationTokenExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:getAuthorizationTokenRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryGetAuthorizationTokenResponse* response = [[ContainerregistryGetAuthorizationTokenResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"getAuthorizationTokenResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)getAuthorizationTokenAsyncWithRequest:(ContainerregistryGetAuthorizationTokenRequest*) getAuthorizationTokenRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryGetAuthorizationTokenResponse* _Nullable getAuthorizationTokenResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryGetAuthorizationTokenExecutor* excutor = [[ContainerregistryGetAuthorizationTokenExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:getAuthorizationTokenRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryGetAuthorizationTokenResponse* response = [[ContainerregistryGetAuthorizationTokenResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeAuthorizationTokens sync request
@param describeAuthorizationTokensRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeAuthorizationTokensResponse` the request response data model
*/
-(NSDictionary*) describeAuthorizationTokensSyncWithRequest:(ContainerregistryDescribeAuthorizationTokensRequest*) describeAuthorizationTokensRequest
{
ContainerregistryDescribeAuthorizationTokensExecutor* excutor = [[ContainerregistryDescribeAuthorizationTokensExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeAuthorizationTokensRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeAuthorizationTokensResponse* response = [[ContainerregistryDescribeAuthorizationTokensResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeAuthorizationTokensResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeAuthorizationTokensAsyncWithRequest:(ContainerregistryDescribeAuthorizationTokensRequest*) describeAuthorizationTokensRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDescribeAuthorizationTokensResponse* _Nullable describeAuthorizationTokensResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDescribeAuthorizationTokensExecutor* excutor = [[ContainerregistryDescribeAuthorizationTokensExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeAuthorizationTokensRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeAuthorizationTokensResponse* response = [[ContainerregistryDescribeAuthorizationTokensResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
describeRegistries sync request
@param describeRegistriesRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRegistriesResponse` the request response data model
*/
-(NSDictionary*) describeRegistriesSyncWithRequest:(ContainerregistryDescribeRegistriesRequest*) describeRegistriesRequest
{
ContainerregistryDescribeRegistriesExecutor* excutor = [[ContainerregistryDescribeRegistriesExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:describeRegistriesRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeRegistriesResponse* response = [[ContainerregistryDescribeRegistriesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"describeRegistriesResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)describeRegistriesAsyncWithRequest:(ContainerregistryDescribeRegistriesRequest*) describeRegistriesRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryDescribeRegistriesResponse* _Nullable describeRegistriesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryDescribeRegistriesExecutor* excutor = [[ContainerregistryDescribeRegistriesExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:describeRegistriesRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryDescribeRegistriesResponse* response = [[ContainerregistryDescribeRegistriesResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}

/**
releaseAuthorizationToken sync request
@param releaseAuthorizationTokenRequest request param
@return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `releaseAuthorizationTokenResponse` the request response data model
*/
-(NSDictionary*) releaseAuthorizationTokenSyncWithRequest:(ContainerregistryReleaseAuthorizationTokenRequest*) releaseAuthorizationTokenRequest
{
ContainerregistryReleaseAuthorizationTokenExecutor* excutor = [[ContainerregistryReleaseAuthorizationTokenExecutor alloc] initWithJDCloudClient:self];
    NSDictionary* responseResult = [excutor executeSync:releaseAuthorizationTokenRequest];
    if(responseResult)
    {
        NSData * resultData = [[responseResult objectForKey:@"dataResult"] copy];
        if(resultData)
        {
            NSMutableDictionary* result = [[NSMutableDictionary alloc]initWithDictionary:responseResult];
            
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryReleaseAuthorizationTokenResponse* response = [[ContainerregistryReleaseAuthorizationTokenResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        [result setValue:response forKey:@"releaseAuthorizationTokenResponse"];
                        return result;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
    }
    return responseResult;
}


-(void)releaseAuthorizationTokenAsyncWithRequest:(ContainerregistryReleaseAuthorizationTokenRequest*) releaseAuthorizationTokenRequest
                       completionHandler:(void(^)(int statusCode,ContainerregistryReleaseAuthorizationTokenResponse* _Nullable releaseAuthorizationTokenResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
ContainerregistryReleaseAuthorizationTokenExecutor* excutor = [[ContainerregistryReleaseAuthorizationTokenExecutor alloc] initWithJDCloudClient:self];
    [excutor executeAsync:releaseAuthorizationTokenRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        if(!error&&responseData)
        {
            NSData * resultData = [responseData copy];
            NSError *jsonError;
            NSDictionary* allKeys = [NSJSONSerialization JSONObjectWithData:resultData options:0 error:&jsonError];
            if(!jsonError&& allKeys)
            {
                @try {
                    ContainerregistryReleaseAuthorizationTokenResponse* response = [[ContainerregistryReleaseAuthorizationTokenResponse alloc]initWithDic:allKeys];
                    if(response)
                    {
                        completionHandler(statusCode,response,responseData,error);
                        return;
                    }
                } @catch (NSException *exception) {
                    if([GlobalConfig isDebug]){
                        NSLog(@"json serialize response data error,info is %@",exception.reason);
                    }
                }
            }
        }
        completionHandler(statusCode,nil,responseData,error);
    }];
}


 /**
 containerregistry common sync request
 @param  jdcloudDataRequest request param
 @return key `statusCode` http request status code type is int
             `dataResult` the http request response data  type is NSData
             `requestError` the request error type is NSError
 */
 -(NSDictionary*) containerregistryCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                                   url:(NSString*) url
                                                method:(NSString*) method{
    CommonExecutor* excutor = [[CommonExecutor alloc] initWithJDCloudClient:self url:url method:method];
    NSDictionary* responseResult = [excutor executeDataSync:jdcloudDataRequest];
    return responseResult;
}

-(void)containerregistryCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                         url:(NSString*) url
                                      method:(NSString*) method
                           completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler
{
     CommonExecutor* excutor = [[CommonExecutor alloc] initWithJDCloudClient:self url:url method:method];
    
    [excutor executeDataAsync:jdcloudDataRequest completionHandler:^(int statusCode, NSData * _Nullable responseData, NSError * _Nullable error) {
        completionHandler(statusCode,responseData,error);
    }];
} 

@end
