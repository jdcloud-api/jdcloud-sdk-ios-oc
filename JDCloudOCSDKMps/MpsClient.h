/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

媒体处理 API
媒体处理相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef MpsClient_h
#define MpsClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKMps/MpsApiModel.h>

@interface MpsClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    createThumbnailTask sync request
    @param createThumbnailTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createThumbnailTaskResponse` the request response data model
    */
    -(NSDictionary*) createThumbnailTaskSyncWithRequest:(MpsCreateThumbnailTaskRequest*) createThumbnailTaskRequest;

    -(void)createThumbnailTaskAsyncWithRequest:(MpsCreateThumbnailTaskRequest*) createThumbnailTaskRequest
    completionHandler:(void(^)(int statusCode,MpsCreateThumbnailTaskResponse* _Nullable createThumbnailTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    listThumbnailTask sync request
    @param listThumbnailTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `listThumbnailTaskResponse` the request response data model
    */
    -(NSDictionary*) listThumbnailTaskSyncWithRequest:(MpsListThumbnailTaskRequest*) listThumbnailTaskRequest;

    -(void)listThumbnailTaskAsyncWithRequest:(MpsListThumbnailTaskRequest*) listThumbnailTaskRequest
    completionHandler:(void(^)(int statusCode,MpsListThumbnailTaskResponse* _Nullable listThumbnailTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteStyleDelimiter sync request
    @param deleteStyleDelimiterRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteStyleDelimiterResponse` the request response data model
    */
    -(NSDictionary*) deleteStyleDelimiterSyncWithRequest:(MpsDeleteStyleDelimiterRequest*) deleteStyleDelimiterRequest;

    -(void)deleteStyleDelimiterAsyncWithRequest:(MpsDeleteStyleDelimiterRequest*) deleteStyleDelimiterRequest
    completionHandler:(void(^)(int statusCode,MpsDeleteStyleDelimiterResponse* _Nullable deleteStyleDelimiterResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getNotification sync request
    @param getNotificationRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getNotificationResponse` the request response data model
    */
    -(NSDictionary*) getNotificationSyncWithRequest:(MpsGetNotificationRequest*) getNotificationRequest;

    -(void)getNotificationAsyncWithRequest:(MpsGetNotificationRequest*) getNotificationRequest
    completionHandler:(void(^)(int statusCode,MpsGetNotificationResponse* _Nullable getNotificationResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getThumbnailTask sync request
    @param getThumbnailTaskRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getThumbnailTaskResponse` the request response data model
    */
    -(NSDictionary*) getThumbnailTaskSyncWithRequest:(MpsGetThumbnailTaskRequest*) getThumbnailTaskRequest;

    -(void)getThumbnailTaskAsyncWithRequest:(MpsGetThumbnailTaskRequest*) getThumbnailTaskRequest
    completionHandler:(void(^)(int statusCode,MpsGetThumbnailTaskResponse* _Nullable getThumbnailTaskResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setNotification sync request
    @param setNotificationRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setNotificationResponse` the request response data model
    */
    -(NSDictionary*) setNotificationSyncWithRequest:(MpsSetNotificationRequest*) setNotificationRequest;

    -(void)setNotificationAsyncWithRequest:(MpsSetNotificationRequest*) setNotificationRequest
    completionHandler:(void(^)(int statusCode,MpsSetNotificationResponse* _Nullable setNotificationResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    setStyleDelimiter sync request
    @param setStyleDelimiterRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `setStyleDelimiterResponse` the request response data model
    */
    -(NSDictionary*) setStyleDelimiterSyncWithRequest:(MpsSetStyleDelimiterRequest*) setStyleDelimiterRequest;

    -(void)setStyleDelimiterAsyncWithRequest:(MpsSetStyleDelimiterRequest*) setStyleDelimiterRequest
    completionHandler:(void(^)(int statusCode,MpsSetStyleDelimiterResponse* _Nullable setStyleDelimiterResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getStyleDelimiter sync request
    @param getStyleDelimiterRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getStyleDelimiterResponse` the request response data model
    */
    -(NSDictionary*) getStyleDelimiterSyncWithRequest:(MpsGetStyleDelimiterRequest*) getStyleDelimiterRequest;

    -(void)getStyleDelimiterAsyncWithRequest:(MpsGetStyleDelimiterRequest*) getStyleDelimiterRequest
    completionHandler:(void(^)(int statusCode,MpsGetStyleDelimiterResponse* _Nullable getStyleDelimiterResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    mps common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) mpsCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)mpsCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* MpsClient_h */
