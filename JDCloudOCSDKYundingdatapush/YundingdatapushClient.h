/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

云鼎2.0数据推送 openApi
云鼎2.0数据推送 openApi 相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef YundingdatapushClient_h
#define YundingdatapushClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKYundingdatapush/YundingdatapushApiModel.h>

@interface YundingdatapushClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    addDatapushVender sync request
    @param addDatapushVenderRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `addDatapushVenderResponse` the request response data model
    */
    -(NSDictionary*) addDatapushVenderSyncWithRequest:(YundingdatapushAddDatapushVenderRequest*) addDatapushVenderRequest;

    -(void)addDatapushVenderAsyncWithRequest:(YundingdatapushAddDatapushVenderRequest*) addDatapushVenderRequest
    completionHandler:(void(^)(int statusCode,YundingdatapushAddDatapushVenderResponse* _Nullable addDatapushVenderResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeDatapushVenders sync request
    @param describeDatapushVendersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeDatapushVendersResponse` the request response data model
    */
    -(NSDictionary*) describeDatapushVendersSyncWithRequest:(YundingdatapushDescribeDatapushVendersRequest*) describeDatapushVendersRequest;

    -(void)describeDatapushVendersAsyncWithRequest:(YundingdatapushDescribeDatapushVendersRequest*) describeDatapushVendersRequest
    completionHandler:(void(^)(int statusCode,YundingdatapushDescribeDatapushVendersResponse* _Nullable describeDatapushVendersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeRdsInstances sync request
    @param describeRdsInstancesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRdsInstancesResponse` the request response data model
    */
    -(NSDictionary*) describeRdsInstancesSyncWithRequest:(YundingdatapushDescribeRdsInstancesRequest*) describeRdsInstancesRequest;

    -(void)describeRdsInstancesAsyncWithRequest:(YundingdatapushDescribeRdsInstancesRequest*) describeRdsInstancesRequest
    completionHandler:(void(^)(int statusCode,YundingdatapushDescribeRdsInstancesResponse* _Nullable describeRdsInstancesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteDatapushVender sync request
    @param deleteDatapushVenderRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteDatapushVenderResponse` the request response data model
    */
    -(NSDictionary*) deleteDatapushVenderSyncWithRequest:(YundingdatapushDeleteDatapushVenderRequest*) deleteDatapushVenderRequest;

    -(void)deleteDatapushVenderAsyncWithRequest:(YundingdatapushDeleteDatapushVenderRequest*) deleteDatapushVenderRequest
    completionHandler:(void(^)(int statusCode,YundingdatapushDeleteDatapushVenderResponse* _Nullable deleteDatapushVenderResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    yundingdatapush common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) yundingdatapushCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)yundingdatapushCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* YundingdatapushClient_h */
