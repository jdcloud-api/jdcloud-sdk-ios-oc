/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

JDCloud IAS
京东云联合登陆

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef IasClient_h
#define IasClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKIas/IasApiModel.h>

@interface IasClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    getApp sync request
    @param getAppRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getAppResponse` the request response data model
    */
    -(NSDictionary*) getAppSyncWithRequest:(IasGetAppRequest*) getAppRequest;

    -(void)getAppAsyncWithRequest:(IasGetAppRequest*) getAppRequest
    completionHandler:(void(^)(int statusCode,IasGetAppResponse* _Nullable getAppResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    state sync request
    @param stateRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `stateResponse` the request response data model
    */
    -(NSDictionary*) stateSyncWithRequest:(IasStateRequest*) stateRequest;

    -(void)stateAsyncWithRequest:(IasStateRequest*) stateRequest
    completionHandler:(void(^)(int statusCode,IasStateResponse* _Nullable stateResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createApp sync request
    @param createAppRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createAppResponse` the request response data model
    */
    -(NSDictionary*) createAppSyncWithRequest:(IasCreateAppRequest*) createAppRequest;

    -(void)createAppAsyncWithRequest:(IasCreateAppRequest*) createAppRequest
    completionHandler:(void(^)(int statusCode,IasCreateAppResponse* _Nullable createAppResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    getApps sync request
    @param getAppsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `getAppsResponse` the request response data model
    */
    -(NSDictionary*) getAppsSyncWithRequest:(IasGetAppsRequest*) getAppsRequest;

    -(void)getAppsAsyncWithRequest:(IasGetAppsRequest*) getAppsRequest
    completionHandler:(void(^)(int statusCode,IasGetAppsResponse* _Nullable getAppsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    updateApp sync request
    @param updateAppRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `updateAppResponse` the request response data model
    */
    -(NSDictionary*) updateAppSyncWithRequest:(IasUpdateAppRequest*) updateAppRequest;

    -(void)updateAppAsyncWithRequest:(IasUpdateAppRequest*) updateAppRequest
    completionHandler:(void(^)(int statusCode,IasUpdateAppResponse* _Nullable updateAppResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    appDetail sync request
    @param appDetailRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `appDetailResponse` the request response data model
    */
    -(NSDictionary*) appDetailSyncWithRequest:(IasAppDetailRequest*) appDetailRequest;

    -(void)appDetailAsyncWithRequest:(IasAppDetailRequest*) appDetailRequest
    completionHandler:(void(^)(int statusCode,IasAppDetailResponse* _Nullable appDetailResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteApp sync request
    @param deleteAppRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteAppResponse` the request response data model
    */
    -(NSDictionary*) deleteAppSyncWithRequest:(IasDeleteAppRequest*) deleteAppRequest;

    -(void)deleteAppAsyncWithRequest:(IasDeleteAppRequest*) deleteAppRequest
    completionHandler:(void(^)(int statusCode,IasDeleteAppResponse* _Nullable deleteAppResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    apps sync request
    @param appsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `appsResponse` the request response data model
    */
    -(NSDictionary*) appsSyncWithRequest:(IasAppsRequest*) appsRequest;

    -(void)appsAsyncWithRequest:(IasAppsRequest*) appsRequest
    completionHandler:(void(^)(int statusCode,IasAppsResponse* _Nullable appsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    ias common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) iasCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)iasCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* IasClient_h */
