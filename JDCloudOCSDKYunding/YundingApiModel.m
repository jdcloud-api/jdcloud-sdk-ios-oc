/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

yunding-vpc
云鼎-VPC相关接口

OpenAPI spec version: v2
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKYunding/YundingApiModel.h>


@implementation YundingUnassignSecondaryIpsResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation YundingAssignSecondaryIpsResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation YundingUnassignSecondaryIpsRequest
-(id) initWithRegion:(NSString *)regionId
secondaryIps:(NSArray<NSString*>*)secondaryIps
networkInterfaceId:(NSString*)networkInterfaceId { 
    self.regionId = regionId;
    self.secondaryIps = secondaryIps;
    self.networkInterfaceId = networkInterfaceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
secondaryIps:(NSArray<NSString*>*)secondaryIps
networkInterfaceId:(NSString*)networkInterfaceId { 
    self.regionId = regionId;
    self.version = version;
    self.secondaryIps = secondaryIps;
    self.networkInterfaceId = networkInterfaceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self secondaryIps])
    {
        [result setValue:[self secondaryIps] forKey:@"secondaryIps"];
    }
    if([self networkInterfaceId])
    {
        [result setValue:[self networkInterfaceId] forKey:@"networkInterfaceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.secondaryIps = [dictionary objectForKey:@"secondaryIps"];
    self.networkInterfaceId = [dictionary objectForKey:@"networkInterfaceId"];
    return self;
} 

@end
  
@implementation YundingAssignSecondaryIpsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
YundingAssignSecondaryIpsResult* result = [[YundingAssignSecondaryIpsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(YundingAssignSecondaryIpsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation YundingUnassignSecondaryIpsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
YundingUnassignSecondaryIpsResult* result = [[YundingUnassignSecondaryIpsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(YundingUnassignSecondaryIpsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation YundingAssignSecondaryIpsRequest
-(id) initWithRegion:(NSString *)regionId
force:(NSNumber*)force
secondaryIps:(NSArray<NSString*>*)secondaryIps
secondaryIpCount:(NSNumber*)secondaryIpCount
networkInterfaceId:(NSString*)networkInterfaceId { 
    self.regionId = regionId;
    self.force = force;
    self.secondaryIps = secondaryIps;
    self.secondaryIpCount = secondaryIpCount;
    self.networkInterfaceId = networkInterfaceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
force:(NSNumber*)force
secondaryIps:(NSArray<NSString*>*)secondaryIps
secondaryIpCount:(NSNumber*)secondaryIpCount
networkInterfaceId:(NSString*)networkInterfaceId { 
    self.regionId = regionId;
    self.version = version;
    self.force = force;
    self.secondaryIps = secondaryIps;
    self.secondaryIpCount = secondaryIpCount;
    self.networkInterfaceId = networkInterfaceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self force])
    {
        [result setValue:[self force] forKey:@"force"];
    }
    if([self secondaryIps])
    {
        [result setValue:[self secondaryIps] forKey:@"secondaryIps"];
    }
    if([self secondaryIpCount])
    {
        [result setValue:[self secondaryIpCount] forKey:@"secondaryIpCount"];
    }
    if([self networkInterfaceId])
    {
        [result setValue:[self networkInterfaceId] forKey:@"networkInterfaceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.force = [dictionary objectForKey:@"force"];
    self.secondaryIps = [dictionary objectForKey:@"secondaryIps"];
    self.secondaryIpCount = [dictionary objectForKey:@"secondaryIpCount"];
    self.networkInterfaceId = [dictionary objectForKey:@"networkInterfaceId"];
    return self;
} 

@end
@implementation YundingDeleteVmInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation YundingDeleteVmInstanceResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation YundingDeleteVmInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
YundingDeleteVmInstanceResult* result = [[YundingDeleteVmInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(YundingDeleteVmInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation YundingDeleteRdsDatabaseRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation YundingDeleteRdsDatabaseResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation YundingDeleteRdsDatabaseResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
YundingDeleteRdsDatabaseResult* result = [[YundingDeleteRdsDatabaseResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(YundingDeleteRdsDatabaseResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
