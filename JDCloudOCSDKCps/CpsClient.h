/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

云物理服务器
云物理服务器相关接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#ifndef CpsClient_h
#define CpsClient_h


#import <JDCloudOCSDKCore/JDCloudOCSDKCore.h>
#import <JDCloudOCSDKCps/CpsApiModel.h>

@interface CpsClient : NSObject<JDCloudClient>{
    @private
    NSString* _userAgent;
    NSString* _serviceName;
    NSString* _version;
    }

    @property (strong,readonly,nonatomic) NSString* userAgent;

    @property (strong,readonly,nonatomic) NSString* serviceName;

    @property (strong,readonly,nonatomic) NSString* version;

    @property (strong,nonatomic) NSString* contentType;

    @property (strong,nonatomic) Credential* credential;

    @property (strong,nonatomic) SDKEnvironment* sdkEnvironment;

    @property (strong,nonatomic) NSMutableDictionary* customHeader;

    @property  (strong,nonatomic) NSString* httpRequestProtocol;

    -(void) addCustomerHeaderWithKey:(NSString*) key
    value:(NSString*) value;

    -(id)initWithGlobalConfig;

    -(id)initWithCredential:(Credential*)credential
    sdkEnvironment:(SDKEnvironment*)sdkEnvironment;
    -(id)initWithCredential:(Credential*)credential;
    /**
    describeSubnet sync request
    @param describeSubnetRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeSubnetResponse` the request response data model
    */
    -(NSDictionary*) describeSubnetSyncWithRequest:(CpsDescribeSubnetRequest*) describeSubnetRequest;

    -(void)describeSubnetAsyncWithRequest:(CpsDescribeSubnetRequest*) describeSubnetRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeSubnetResponse* _Nullable describeSubnetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyListener sync request
    @param modifyListenerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyListenerResponse` the request response data model
    */
    -(NSDictionary*) modifyListenerSyncWithRequest:(CpsModifyListenerRequest*) modifyListenerRequest;

    -(void)modifyListenerAsyncWithRequest:(CpsModifyListenerRequest*) modifyListenerRequest
    completionHandler:(void(^)(int statusCode,CpsModifyListenerResponse* _Nullable modifyListenerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    associateElasticIpLB sync request
    @param associateElasticIpLBRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `associateElasticIpLBResponse` the request response data model
    */
    -(NSDictionary*) associateElasticIpLBSyncWithRequest:(CpsAssociateElasticIpLBRequest*) associateElasticIpLBRequest;

    -(void)associateElasticIpLBAsyncWithRequest:(CpsAssociateElasticIpLBRequest*) associateElasticIpLBRequest
    completionHandler:(void(^)(int statusCode,CpsAssociateElasticIpLBResponse* _Nullable associateElasticIpLBResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryListener sync request
    @param queryListenerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryListenerResponse` the request response data model
    */
    -(NSDictionary*) queryListenerSyncWithRequest:(CpsQueryListenerRequest*) queryListenerRequest;

    -(void)queryListenerAsyncWithRequest:(CpsQueryListenerRequest*) queryListenerRequest
    completionHandler:(void(^)(int statusCode,CpsQueryListenerResponse* _Nullable queryListenerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteVpc sync request
    @param deleteVpcRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteVpcResponse` the request response data model
    */
    -(NSDictionary*) deleteVpcSyncWithRequest:(CpsDeleteVpcRequest*) deleteVpcRequest;

    -(void)deleteVpcAsyncWithRequest:(CpsDeleteVpcRequest*) deleteVpcRequest
    completionHandler:(void(^)(int statusCode,CpsDeleteVpcResponse* _Nullable deleteVpcResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstanceStatus sync request
    @param describeInstanceStatusRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceStatusResponse` the request response data model
    */
    -(NSDictionary*) describeInstanceStatusSyncWithRequest:(CpsDescribeInstanceStatusRequest*) describeInstanceStatusRequest;

    -(void)describeInstanceStatusAsyncWithRequest:(CpsDescribeInstanceStatusRequest*) describeInstanceStatusRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeInstanceStatusResponse* _Nullable describeInstanceStatusResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    addServers sync request
    @param addServersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `addServersResponse` the request response data model
    */
    -(NSDictionary*) addServersSyncWithRequest:(CpsAddServersRequest*) addServersRequest;

    -(void)addServersAsyncWithRequest:(CpsAddServersRequest*) addServersRequest
    completionHandler:(void(^)(int statusCode,CpsAddServersResponse* _Nullable addServersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    reinstallInstance sync request
    @param reinstallInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `reinstallInstanceResponse` the request response data model
    */
    -(NSDictionary*) reinstallInstanceSyncWithRequest:(CpsReinstallInstanceRequest*) reinstallInstanceRequest;

    -(void)reinstallInstanceAsyncWithRequest:(CpsReinstallInstanceRequest*) reinstallInstanceRequest
    completionHandler:(void(^)(int statusCode,CpsReinstallInstanceResponse* _Nullable reinstallInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteServerGroup sync request
    @param deleteServerGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteServerGroupResponse` the request response data model
    */
    -(NSDictionary*) deleteServerGroupSyncWithRequest:(CpsDeleteServerGroupRequest*) deleteServerGroupRequest;

    -(void)deleteServerGroupAsyncWithRequest:(CpsDeleteServerGroupRequest*) deleteServerGroupRequest
    completionHandler:(void(^)(int statusCode,CpsDeleteServerGroupResponse* _Nullable deleteServerGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeDeviceRaids sync request
    @param describeDeviceRaidsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeDeviceRaidsResponse` the request response data model
    */
    -(NSDictionary*) describeDeviceRaidsSyncWithRequest:(CpsDescribeDeviceRaidsRequest*) describeDeviceRaidsRequest;

    -(void)describeDeviceRaidsAsyncWithRequest:(CpsDescribeDeviceRaidsRequest*) describeDeviceRaidsRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeDeviceRaidsResponse* _Nullable describeDeviceRaidsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disassociateElasticIpLB sync request
    @param disassociateElasticIpLBRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disassociateElasticIpLBResponse` the request response data model
    */
    -(NSDictionary*) disassociateElasticIpLBSyncWithRequest:(CpsDisassociateElasticIpLBRequest*) disassociateElasticIpLBRequest;

    -(void)disassociateElasticIpLBAsyncWithRequest:(CpsDisassociateElasticIpLBRequest*) disassociateElasticIpLBRequest
    completionHandler:(void(^)(int statusCode,CpsDisassociateElasticIpLBResponse* _Nullable disassociateElasticIpLBResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyVpc sync request
    @param modifyVpcRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyVpcResponse` the request response data model
    */
    -(NSDictionary*) modifyVpcSyncWithRequest:(CpsModifyVpcRequest*) modifyVpcRequest;

    -(void)modifyVpcAsyncWithRequest:(CpsModifyVpcRequest*) modifyVpcRequest
    completionHandler:(void(^)(int statusCode,CpsModifyVpcResponse* _Nullable modifyVpcResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLoadBalancer sync request
    @param queryLoadBalancerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLoadBalancerResponse` the request response data model
    */
    -(NSDictionary*) queryLoadBalancerSyncWithRequest:(CpsQueryLoadBalancerRequest*) queryLoadBalancerRequest;

    -(void)queryLoadBalancerAsyncWithRequest:(CpsQueryLoadBalancerRequest*) queryLoadBalancerRequest
    completionHandler:(void(^)(int statusCode,CpsQueryLoadBalancerResponse* _Nullable queryLoadBalancerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryServers sync request
    @param queryServersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryServersResponse` the request response data model
    */
    -(NSDictionary*) queryServersSyncWithRequest:(CpsQueryServersRequest*) queryServersRequest;

    -(void)queryServersAsyncWithRequest:(CpsQueryServersRequest*) queryServersRequest
    completionHandler:(void(^)(int statusCode,CpsQueryServersResponse* _Nullable queryServersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstanceName sync request
    @param describeInstanceNameRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceNameResponse` the request response data model
    */
    -(NSDictionary*) describeInstanceNameSyncWithRequest:(CpsDescribeInstanceNameRequest*) describeInstanceNameRequest;

    -(void)describeInstanceNameAsyncWithRequest:(CpsDescribeInstanceNameRequest*) describeInstanceNameRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeInstanceNameResponse* _Nullable describeInstanceNameResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifySubnet sync request
    @param modifySubnetRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifySubnetResponse` the request response data model
    */
    -(NSDictionary*) modifySubnetSyncWithRequest:(CpsModifySubnetRequest*) modifySubnetRequest;

    -(void)modifySubnetAsyncWithRequest:(CpsModifySubnetRequest*) modifySubnetRequest
    completionHandler:(void(^)(int statusCode,CpsModifySubnetResponse* _Nullable modifySubnetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeVpcs sync request
    @param describeVpcsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeVpcsResponse` the request response data model
    */
    -(NSDictionary*) describeVpcsSyncWithRequest:(CpsDescribeVpcsRequest*) describeVpcsRequest;

    -(void)describeVpcsAsyncWithRequest:(CpsDescribeVpcsRequest*) describeVpcsRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeVpcsResponse* _Nullable describeVpcsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryKeypair sync request
    @param queryKeypairRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryKeypairResponse` the request response data model
    */
    -(NSDictionary*) queryKeypairSyncWithRequest:(CpsQueryKeypairRequest*) queryKeypairRequest;

    -(void)queryKeypairAsyncWithRequest:(CpsQueryKeypairRequest*) queryKeypairRequest
    completionHandler:(void(^)(int statusCode,CpsQueryKeypairResponse* _Nullable queryKeypairResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstanceRaid sync request
    @param describeInstanceRaidRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceRaidResponse` the request response data model
    */
    -(NSDictionary*) describeInstanceRaidSyncWithRequest:(CpsDescribeInstanceRaidRequest*) describeInstanceRaidRequest;

    -(void)describeInstanceRaidAsyncWithRequest:(CpsDescribeInstanceRaidRequest*) describeInstanceRaidRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeInstanceRaidResponse* _Nullable describeInstanceRaidResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeRegiones sync request
    @param describeRegionesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeRegionesResponse` the request response data model
    */
    -(NSDictionary*) describeRegionesSyncWithRequest:(CpsDescribeRegionesRequest*) describeRegionesRequest;

    -(void)describeRegionesAsyncWithRequest:(CpsDescribeRegionesRequest*) describeRegionesRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeRegionesResponse* _Nullable describeRegionesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryLoadBalancers sync request
    @param queryLoadBalancersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryLoadBalancersResponse` the request response data model
    */
    -(NSDictionary*) queryLoadBalancersSyncWithRequest:(CpsQueryLoadBalancersRequest*) queryLoadBalancersRequest;

    -(void)queryLoadBalancersAsyncWithRequest:(CpsQueryLoadBalancersRequest*) queryLoadBalancersRequest
    completionHandler:(void(^)(int statusCode,CpsQueryLoadBalancersResponse* _Nullable queryLoadBalancersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyServerGroup sync request
    @param modifyServerGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyServerGroupResponse` the request response data model
    */
    -(NSDictionary*) modifyServerGroupSyncWithRequest:(CpsModifyServerGroupRequest*) modifyServerGroupRequest;

    -(void)modifyServerGroupAsyncWithRequest:(CpsModifyServerGroupRequest*) modifyServerGroupRequest
    completionHandler:(void(^)(int statusCode,CpsModifyServerGroupResponse* _Nullable modifyServerGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyInstance sync request
    @param modifyInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyInstanceResponse` the request response data model
    */
    -(NSDictionary*) modifyInstanceSyncWithRequest:(CpsModifyInstanceRequest*) modifyInstanceRequest;

    -(void)modifyInstanceAsyncWithRequest:(CpsModifyInstanceRequest*) modifyInstanceRequest
    completionHandler:(void(^)(int statusCode,CpsModifyInstanceResponse* _Nullable modifyInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryKeypairs sync request
    @param queryKeypairsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryKeypairsResponse` the request response data model
    */
    -(NSDictionary*) queryKeypairsSyncWithRequest:(CpsQueryKeypairsRequest*) queryKeypairsRequest;

    -(void)queryKeypairsAsyncWithRequest:(CpsQueryKeypairsRequest*) queryKeypairsRequest
    completionHandler:(void(^)(int statusCode,CpsQueryKeypairsResponse* _Nullable queryKeypairsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeDeviceTypes sync request
    @param describeDeviceTypesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeDeviceTypesResponse` the request response data model
    */
    -(NSDictionary*) describeDeviceTypesSyncWithRequest:(CpsDescribeDeviceTypesRequest*) describeDeviceTypesRequest;

    -(void)describeDeviceTypesAsyncWithRequest:(CpsDescribeDeviceTypesRequest*) describeDeviceTypesRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeDeviceTypesResponse* _Nullable describeDeviceTypesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    disassociateElasticIp sync request
    @param disassociateElasticIpRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `disassociateElasticIpResponse` the request response data model
    */
    -(NSDictionary*) disassociateElasticIpSyncWithRequest:(CpsDisassociateElasticIpRequest*) disassociateElasticIpRequest;

    -(void)disassociateElasticIpAsyncWithRequest:(CpsDisassociateElasticIpRequest*) disassociateElasticIpRequest
    completionHandler:(void(^)(int statusCode,CpsDisassociateElasticIpResponse* _Nullable disassociateElasticIpResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeElasticIp sync request
    @param describeElasticIpRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeElasticIpResponse` the request response data model
    */
    -(NSDictionary*) describeElasticIpSyncWithRequest:(CpsDescribeElasticIpRequest*) describeElasticIpRequest;

    -(void)describeElasticIpAsyncWithRequest:(CpsDescribeElasticIpRequest*) describeElasticIpRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeElasticIpResponse* _Nullable describeElasticIpResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryRouteTables sync request
    @param queryRouteTablesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryRouteTablesResponse` the request response data model
    */
    -(NSDictionary*) queryRouteTablesSyncWithRequest:(CpsQueryRouteTablesRequest*) queryRouteTablesRequest;

    -(void)queryRouteTablesAsyncWithRequest:(CpsQueryRouteTablesRequest*) queryRouteTablesRequest
    completionHandler:(void(^)(int statusCode,CpsQueryRouteTablesResponse* _Nullable queryRouteTablesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyLoadBalancer sync request
    @param modifyLoadBalancerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyLoadBalancerResponse` the request response data model
    */
    -(NSDictionary*) modifyLoadBalancerSyncWithRequest:(CpsModifyLoadBalancerRequest*) modifyLoadBalancerRequest;

    -(void)modifyLoadBalancerAsyncWithRequest:(CpsModifyLoadBalancerRequest*) modifyLoadBalancerRequest
    completionHandler:(void(^)(int statusCode,CpsModifyLoadBalancerResponse* _Nullable modifyLoadBalancerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    startLoadBalancer sync request
    @param startLoadBalancerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `startLoadBalancerResponse` the request response data model
    */
    -(NSDictionary*) startLoadBalancerSyncWithRequest:(CpsStartLoadBalancerRequest*) startLoadBalancerRequest;

    -(void)startLoadBalancerAsyncWithRequest:(CpsStartLoadBalancerRequest*) startLoadBalancerRequest
    completionHandler:(void(^)(int statusCode,CpsStartLoadBalancerResponse* _Nullable startLoadBalancerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    stopLoadBalancer sync request
    @param stopLoadBalancerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `stopLoadBalancerResponse` the request response data model
    */
    -(NSDictionary*) stopLoadBalancerSyncWithRequest:(CpsStopLoadBalancerRequest*) stopLoadBalancerRequest;

    -(void)stopLoadBalancerAsyncWithRequest:(CpsStopLoadBalancerRequest*) stopLoadBalancerRequest
    completionHandler:(void(^)(int statusCode,CpsStopLoadBalancerResponse* _Nullable stopLoadBalancerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstance sync request
    @param describeInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceResponse` the request response data model
    */
    -(NSDictionary*) describeInstanceSyncWithRequest:(CpsDescribeInstanceRequest*) describeInstanceRequest;

    -(void)describeInstanceAsyncWithRequest:(CpsDescribeInstanceRequest*) describeInstanceRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeInstanceResponse* _Nullable describeInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyBandwidth sync request
    @param modifyBandwidthRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyBandwidthResponse` the request response data model
    */
    -(NSDictionary*) modifyBandwidthSyncWithRequest:(CpsModifyBandwidthRequest*) modifyBandwidthRequest;

    -(void)modifyBandwidthAsyncWithRequest:(CpsModifyBandwidthRequest*) modifyBandwidthRequest
    completionHandler:(void(^)(int statusCode,CpsModifyBandwidthResponse* _Nullable modifyBandwidthResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryServerGroups sync request
    @param queryServerGroupsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryServerGroupsResponse` the request response data model
    */
    -(NSDictionary*) queryServerGroupsSyncWithRequest:(CpsQueryServerGroupsRequest*) queryServerGroupsRequest;

    -(void)queryServerGroupsAsyncWithRequest:(CpsQueryServerGroupsRequest*) queryServerGroupsRequest
    completionHandler:(void(^)(int statusCode,CpsQueryServerGroupsResponse* _Nullable queryServerGroupsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstanceMonitorInfo sync request
    @param describeInstanceMonitorInfoRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstanceMonitorInfoResponse` the request response data model
    */
    -(NSDictionary*) describeInstanceMonitorInfoSyncWithRequest:(CpsDescribeInstanceMonitorInfoRequest*) describeInstanceMonitorInfoRequest;

    -(void)describeInstanceMonitorInfoAsyncWithRequest:(CpsDescribeInstanceMonitorInfoRequest*) describeInstanceMonitorInfoRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeInstanceMonitorInfoResponse* _Nullable describeInstanceMonitorInfoResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createInstances sync request
    @param createInstancesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createInstancesResponse` the request response data model
    */
    -(NSDictionary*) createInstancesSyncWithRequest:(CpsCreateInstancesRequest*) createInstancesRequest;

    -(void)createInstancesAsyncWithRequest:(CpsCreateInstancesRequest*) createInstancesRequest
    completionHandler:(void(^)(int statusCode,CpsCreateInstancesResponse* _Nullable createInstancesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    resetPassword sync request
    @param resetPasswordRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `resetPasswordResponse` the request response data model
    */
    -(NSDictionary*) resetPasswordSyncWithRequest:(CpsResetPasswordRequest*) resetPasswordRequest;

    -(void)resetPasswordAsyncWithRequest:(CpsResetPasswordRequest*) resetPasswordRequest
    completionHandler:(void(^)(int statusCode,CpsResetPasswordResponse* _Nullable resetPasswordResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    associateElasticIp sync request
    @param associateElasticIpRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `associateElasticIpResponse` the request response data model
    */
    -(NSDictionary*) associateElasticIpSyncWithRequest:(CpsAssociateElasticIpRequest*) associateElasticIpRequest;

    -(void)associateElasticIpAsyncWithRequest:(CpsAssociateElasticIpRequest*) associateElasticIpRequest
    completionHandler:(void(^)(int statusCode,CpsAssociateElasticIpResponse* _Nullable associateElasticIpResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    stopInstance sync request
    @param stopInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `stopInstanceResponse` the request response data model
    */
    -(NSDictionary*) stopInstanceSyncWithRequest:(CpsStopInstanceRequest*) stopInstanceRequest;

    -(void)stopInstanceAsyncWithRequest:(CpsStopInstanceRequest*) stopInstanceRequest
    completionHandler:(void(^)(int statusCode,CpsStopInstanceResponse* _Nullable stopInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeVpc sync request
    @param describeVpcRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeVpcResponse` the request response data model
    */
    -(NSDictionary*) describeVpcSyncWithRequest:(CpsDescribeVpcRequest*) describeVpcRequest;

    -(void)describeVpcAsyncWithRequest:(CpsDescribeVpcRequest*) describeVpcRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeVpcResponse* _Nullable describeVpcResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeSubnets sync request
    @param describeSubnetsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeSubnetsResponse` the request response data model
    */
    -(NSDictionary*) describeSubnetsSyncWithRequest:(CpsDescribeSubnetsRequest*) describeSubnetsRequest;

    -(void)describeSubnetsAsyncWithRequest:(CpsDescribeSubnetsRequest*) describeSubnetsRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeSubnetsResponse* _Nullable describeSubnetsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryRouteTable sync request
    @param queryRouteTableRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryRouteTableResponse` the request response data model
    */
    -(NSDictionary*) queryRouteTableSyncWithRequest:(CpsQueryRouteTableRequest*) queryRouteTableRequest;

    -(void)queryRouteTableAsyncWithRequest:(CpsQueryRouteTableRequest*) queryRouteTableRequest
    completionHandler:(void(^)(int statusCode,CpsQueryRouteTableResponse* _Nullable queryRouteTableResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteListener sync request
    @param deleteListenerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteListenerResponse` the request response data model
    */
    -(NSDictionary*) deleteListenerSyncWithRequest:(CpsDeleteListenerRequest*) deleteListenerRequest;

    -(void)deleteListenerAsyncWithRequest:(CpsDeleteListenerRequest*) deleteListenerRequest
    completionHandler:(void(^)(int statusCode,CpsDeleteListenerResponse* _Nullable deleteListenerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    applyElasticIps sync request
    @param applyElasticIpsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `applyElasticIpsResponse` the request response data model
    */
    -(NSDictionary*) applyElasticIpsSyncWithRequest:(CpsApplyElasticIpsRequest*) applyElasticIpsRequest;

    -(void)applyElasticIpsAsyncWithRequest:(CpsApplyElasticIpsRequest*) applyElasticIpsRequest
    completionHandler:(void(^)(int statusCode,CpsApplyElasticIpsResponse* _Nullable applyElasticIpsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createKeypairs sync request
    @param createKeypairsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createKeypairsResponse` the request response data model
    */
    -(NSDictionary*) createKeypairsSyncWithRequest:(CpsCreateKeypairsRequest*) createKeypairsRequest;

    -(void)createKeypairsAsyncWithRequest:(CpsCreateKeypairsRequest*) createKeypairsRequest
    completionHandler:(void(^)(int statusCode,CpsCreateKeypairsResponse* _Nullable createKeypairsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    removeServer sync request
    @param removeServerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `removeServerResponse` the request response data model
    */
    -(NSDictionary*) removeServerSyncWithRequest:(CpsRemoveServerRequest*) removeServerRequest;

    -(void)removeServerAsyncWithRequest:(CpsRemoveServerRequest*) removeServerRequest
    completionHandler:(void(^)(int statusCode,CpsRemoveServerResponse* _Nullable removeServerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    importKeypairs sync request
    @param importKeypairsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `importKeypairsResponse` the request response data model
    */
    -(NSDictionary*) importKeypairsSyncWithRequest:(CpsImportKeypairsRequest*) importKeypairsRequest;

    -(void)importKeypairsAsyncWithRequest:(CpsImportKeypairsRequest*) importKeypairsRequest
    completionHandler:(void(^)(int statusCode,CpsImportKeypairsResponse* _Nullable importKeypairsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createServerGroup sync request
    @param createServerGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createServerGroupResponse` the request response data model
    */
    -(NSDictionary*) createServerGroupSyncWithRequest:(CpsCreateServerGroupRequest*) createServerGroupRequest;

    -(void)createServerGroupAsyncWithRequest:(CpsCreateServerGroupRequest*) createServerGroupRequest
    completionHandler:(void(^)(int statusCode,CpsCreateServerGroupResponse* _Nullable createServerGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    startListener sync request
    @param startListenerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `startListenerResponse` the request response data model
    */
    -(NSDictionary*) startListenerSyncWithRequest:(CpsStartListenerRequest*) startListenerRequest;

    -(void)startListenerAsyncWithRequest:(CpsStartListenerRequest*) startListenerRequest
    completionHandler:(void(^)(int statusCode,CpsStartListenerResponse* _Nullable startListenerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryCPSLBRegions sync request
    @param queryCPSLBRegionsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryCPSLBRegionsResponse` the request response data model
    */
    -(NSDictionary*) queryCPSLBRegionsSyncWithRequest:(CpsQueryCPSLBRegionsRequest*) queryCPSLBRegionsRequest;

    -(void)queryCPSLBRegionsAsyncWithRequest:(CpsQueryCPSLBRegionsRequest*) queryCPSLBRegionsRequest
    completionHandler:(void(^)(int statusCode,CpsQueryCPSLBRegionsResponse* _Nullable queryCPSLBRegionsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryServerGroup sync request
    @param queryServerGroupRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryServerGroupResponse` the request response data model
    */
    -(NSDictionary*) queryServerGroupSyncWithRequest:(CpsQueryServerGroupRequest*) queryServerGroupRequest;

    -(void)queryServerGroupAsyncWithRequest:(CpsQueryServerGroupRequest*) queryServerGroupRequest
    completionHandler:(void(^)(int statusCode,CpsQueryServerGroupResponse* _Nullable queryServerGroupResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    startInstance sync request
    @param startInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `startInstanceResponse` the request response data model
    */
    -(NSDictionary*) startInstanceSyncWithRequest:(CpsStartInstanceRequest*) startInstanceRequest;

    -(void)startInstanceAsyncWithRequest:(CpsStartInstanceRequest*) startInstanceRequest
    completionHandler:(void(^)(int statusCode,CpsStartInstanceResponse* _Nullable startInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createSubnet sync request
    @param createSubnetRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createSubnetResponse` the request response data model
    */
    -(NSDictionary*) createSubnetSyncWithRequest:(CpsCreateSubnetRequest*) createSubnetRequest;

    -(void)createSubnetAsyncWithRequest:(CpsCreateSubnetRequest*) createSubnetRequest
    completionHandler:(void(^)(int statusCode,CpsCreateSubnetResponse* _Nullable createSubnetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    restartInstance sync request
    @param restartInstanceRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `restartInstanceResponse` the request response data model
    */
    -(NSDictionary*) restartInstanceSyncWithRequest:(CpsRestartInstanceRequest*) restartInstanceRequest;

    -(void)restartInstanceAsyncWithRequest:(CpsRestartInstanceRequest*) restartInstanceRequest
    completionHandler:(void(^)(int statusCode,CpsRestartInstanceResponse* _Nullable restartInstanceResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeElasticIps sync request
    @param describeElasticIpsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeElasticIpsResponse` the request response data model
    */
    -(NSDictionary*) describeElasticIpsSyncWithRequest:(CpsDescribeElasticIpsRequest*) describeElasticIpsRequest;

    -(void)describeElasticIpsAsyncWithRequest:(CpsDescribeElasticIpsRequest*) describeElasticIpsRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeElasticIpsResponse* _Nullable describeElasticIpsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeOS sync request
    @param describeOSRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeOSResponse` the request response data model
    */
    -(NSDictionary*) describeOSSyncWithRequest:(CpsDescribeOSRequest*) describeOSRequest;

    -(void)describeOSAsyncWithRequest:(CpsDescribeOSRequest*) describeOSRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeOSResponse* _Nullable describeOSResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createListener sync request
    @param createListenerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createListenerResponse` the request response data model
    */
    -(NSDictionary*) createListenerSyncWithRequest:(CpsCreateListenerRequest*) createListenerRequest;

    -(void)createListenerAsyncWithRequest:(CpsCreateListenerRequest*) createListenerRequest
    completionHandler:(void(^)(int statusCode,CpsCreateListenerResponse* _Nullable createListenerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyElasticIpBandwidth sync request
    @param modifyElasticIpBandwidthRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyElasticIpBandwidthResponse` the request response data model
    */
    -(NSDictionary*) modifyElasticIpBandwidthSyncWithRequest:(CpsModifyElasticIpBandwidthRequest*) modifyElasticIpBandwidthRequest;

    -(void)modifyElasticIpBandwidthAsyncWithRequest:(CpsModifyElasticIpBandwidthRequest*) modifyElasticIpBandwidthRequest
    completionHandler:(void(^)(int statusCode,CpsModifyElasticIpBandwidthResponse* _Nullable modifyElasticIpBandwidthResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    queryListeners sync request
    @param queryListenersRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `queryListenersResponse` the request response data model
    */
    -(NSDictionary*) queryListenersSyncWithRequest:(CpsQueryListenersRequest*) queryListenersRequest;

    -(void)queryListenersAsyncWithRequest:(CpsQueryListenersRequest*) queryListenersRequest
    completionHandler:(void(^)(int statusCode,CpsQueryListenersResponse* _Nullable queryListenersResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    modifyServer sync request
    @param modifyServerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `modifyServerResponse` the request response data model
    */
    -(NSDictionary*) modifyServerSyncWithRequest:(CpsModifyServerRequest*) modifyServerRequest;

    -(void)modifyServerAsyncWithRequest:(CpsModifyServerRequest*) modifyServerRequest
    completionHandler:(void(^)(int statusCode,CpsModifyServerResponse* _Nullable modifyServerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeInstances sync request
    @param describeInstancesRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeInstancesResponse` the request response data model
    */
    -(NSDictionary*) describeInstancesSyncWithRequest:(CpsDescribeInstancesRequest*) describeInstancesRequest;

    -(void)describeInstancesAsyncWithRequest:(CpsDescribeInstancesRequest*) describeInstancesRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeInstancesResponse* _Nullable describeInstancesResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createLoadBalancer sync request
    @param createLoadBalancerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createLoadBalancerResponse` the request response data model
    */
    -(NSDictionary*) createLoadBalancerSyncWithRequest:(CpsCreateLoadBalancerRequest*) createLoadBalancerRequest;

    -(void)createLoadBalancerAsyncWithRequest:(CpsCreateLoadBalancerRequest*) createLoadBalancerRequest
    completionHandler:(void(^)(int statusCode,CpsCreateLoadBalancerResponse* _Nullable createLoadBalancerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    createVpc sync request
    @param createVpcRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `createVpcResponse` the request response data model
    */
    -(NSDictionary*) createVpcSyncWithRequest:(CpsCreateVpcRequest*) createVpcRequest;

    -(void)createVpcAsyncWithRequest:(CpsCreateVpcRequest*) createVpcRequest
    completionHandler:(void(^)(int statusCode,CpsCreateVpcResponse* _Nullable createVpcResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteKeypairs sync request
    @param deleteKeypairsRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteKeypairsResponse` the request response data model
    */
    -(NSDictionary*) deleteKeypairsSyncWithRequest:(CpsDeleteKeypairsRequest*) deleteKeypairsRequest;

    -(void)deleteKeypairsAsyncWithRequest:(CpsDeleteKeypairsRequest*) deleteKeypairsRequest
    completionHandler:(void(^)(int statusCode,CpsDeleteKeypairsResponse* _Nullable deleteKeypairsResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    stopListener sync request
    @param stopListenerRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `stopListenerResponse` the request response data model
    */
    -(NSDictionary*) stopListenerSyncWithRequest:(CpsStopListenerRequest*) stopListenerRequest;

    -(void)stopListenerAsyncWithRequest:(CpsStopListenerRequest*) stopListenerRequest
    completionHandler:(void(^)(int statusCode,CpsStopListenerResponse* _Nullable stopListenerResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    deleteSubnet sync request
    @param deleteSubnetRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `deleteSubnetResponse` the request response data model
    */
    -(NSDictionary*) deleteSubnetSyncWithRequest:(CpsDeleteSubnetRequest*) deleteSubnetRequest;

    -(void)deleteSubnetAsyncWithRequest:(CpsDeleteSubnetRequest*) deleteSubnetRequest
    completionHandler:(void(^)(int statusCode,CpsDeleteSubnetResponse* _Nullable deleteSubnetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;
    /**
    describeBasicSubnet sync request
    @param describeBasicSubnetRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
            `describeBasicSubnetResponse` the request response data model
    */
    -(NSDictionary*) describeBasicSubnetSyncWithRequest:(CpsDescribeBasicSubnetRequest*) describeBasicSubnetRequest;

    -(void)describeBasicSubnetAsyncWithRequest:(CpsDescribeBasicSubnetRequest*) describeBasicSubnetRequest
    completionHandler:(void(^)(int statusCode,CpsDescribeBasicSubnetResponse* _Nullable describeBasicSubnetResponse, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    /**
    cps common sync request
    @param  jdcloudDataRequest request param
    @return key `statusCode` http request status code type is int
            `dataResult` the http request response data  type is NSData
            `requestError` the request error type is NSError
    */
    -(NSDictionary*) cpsCommonSyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                           url:(NSString*) url
                                        method:(NSString*) method;

    -(void)cpsCommonAsyncWithRequest:(JDCloudDataRequest*) jdcloudDataRequest
                                  url:(NSString*) url
                               method:(NSString*) method
                    completionHandler:(void(^)(int statusCode, NSData* _Nullable responseData,NSError * _Nullable error))completionHandler;

    @end


    #endif /* CpsClient_h */
