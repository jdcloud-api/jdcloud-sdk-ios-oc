/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

云物理服务器
云物理服务器地域操作相关的接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKCps/CpsApiModel.h>


@implementation CpsQueryRouteTablesResult
-(id) initWithRouteTables:(NSArray<RouteTable*>*) routeTables
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.routeTables = routeTables;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self routeTables])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self routeTables] count]; i++) {
            RouteTable* item = [[self routeTables] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"routeTables"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* routeTablesArray = [dictionary objectForKey:@"routeTables"];
    if(routeTablesArray&&![routeTablesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [routeTablesArray count];i++)
        {
            RouteTable* item = [[RouteTable alloc]initWithDic:[routeTablesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.routeTables = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation CpsQueryRouteTableResult
-(id) initWithRouteTable:(RouteTable*) routeTable { 
    self.routeTable = routeTable;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self routeTable])
    {
        [result setValue:[[self routeTable] dictionary]forKey:@"routeTable"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.routeTable = [[RouteTable alloc]initWithDic:[dictionary objectForKey:@"routeTable"]];
    return self;
} 

@end
@implementation CpsQueryRouteTableRequest
-(id) initWithRegion:(NSString *)regionId
routeTableId:(NSString*)routeTableId { 
    self.regionId = regionId;
    self.routeTableId = routeTableId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
routeTableId:(NSString*)routeTableId { 
    self.regionId = regionId;
    self.version = version;
    self.routeTableId = routeTableId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self routeTableId])
    {
        [result setValue:[self routeTableId] forKey:@"routeTableId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.routeTableId = [dictionary objectForKey:@"routeTableId"];
    return self;
} 

@end
  
@implementation CpsQueryRouteTablesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryRouteTablesResult* result = [[CpsQueryRouteTablesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryRouteTablesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsQueryRouteTableResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryRouteTableResult* result = [[CpsQueryRouteTableResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryRouteTableResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsQueryRouteTablesRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
vpcId:(NSString*)vpcId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.vpcId = vpcId;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
vpcId:(NSString*)vpcId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.vpcId = vpcId;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation CpsDeleteListenerResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsDeleteListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDeleteListenerResult* result = [[CpsDeleteListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDeleteListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsCreateListenerRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
loadBalancerSpec:(ListenerSpec*)loadBalancerSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.loadBalancerSpec = loadBalancerSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
loadBalancerSpec:(ListenerSpec*)loadBalancerSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.loadBalancerSpec = loadBalancerSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self loadBalancerSpec])
    {
        [result setValue:[[self loadBalancerSpec] dictionary]forKey:@"loadBalancerSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.loadBalancerSpec = [[ListenerSpec alloc]initWithDic:[dictionary objectForKey:@"loadBalancerSpec"]];
    return self;
} 

@end
@implementation CpsModifyListenerResult
-(id) initWithLoadBalancer:(Listener*) loadBalancer { 
    self.loadBalancer = loadBalancer;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancer])
    {
        [result setValue:[[self loadBalancer] dictionary]forKey:@"loadBalancer"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancer = [[Listener alloc]initWithDic:[dictionary objectForKey:@"loadBalancer"]];
    return self;
} 

@end
@implementation CpsQueryListenerRequest
-(id) initWithRegion:(NSString *)regionId
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.listenerId = listenerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.version = version;
    self.listenerId = listenerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    return self;
} 

@end
@implementation CpsCreateListenerResult
-(id) initWithListenerId:(NSString*) listenerId { 
    self.listenerId = listenerId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    return self;
} 

@end
  
@implementation CpsCreateListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateListenerResult* result = [[CpsCreateListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsModifyListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyListenerResult* result = [[CpsModifyListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsQueryListenerResult
-(id) initWithListener:(Listener*) listener { 
    self.listener = listener;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self listener])
    {
        [result setValue:[[self listener] dictionary]forKey:@"listener"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listener = [[Listener alloc]initWithDic:[dictionary objectForKey:@"listener"]];
    return self;
} 

@end
@implementation CpsDeleteListenerRequest
-(id) initWithRegion:(NSString *)regionId
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.listenerId = listenerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.version = version;
    self.listenerId = listenerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    return self;
} 

@end
@implementation CpsStartListenerResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsStartListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsStartListenerResult* result = [[CpsStartListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsStartListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsQueryListenersResult
-(id) initWithListeners:(NSArray<Listener*>*) listeners
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.listeners = listeners;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self listeners])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self listeners] count]; i++) {
            Listener* item = [[self listeners] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"listeners"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* listenersArray = [dictionary objectForKey:@"listeners"];
    if(listenersArray&&![listenersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [listenersArray count];i++)
        {
            Listener* item = [[Listener alloc]initWithDic:[listenersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.listeners = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation CpsModifyListenerRequest
-(id) initWithRegion:(NSString *)regionId
algorithm:(NSString*)algorithm
stickySession:(NSString*)stickySession
realIp:(NSString*)realIp
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
healthCheck:(NSString*)healthCheck
healthCheckTimeout:(NSNumber*)healthCheckTimeout
healthCheckInterval:(NSNumber*)healthCheckInterval
healthyThreshold:(NSNumber*)healthyThreshold
unhealthyThreshold:(NSNumber*)unhealthyThreshold
serverGroupId:(NSString*)serverGroupId
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.algorithm = algorithm;
    self.stickySession = stickySession;
    self.realIp = realIp;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.healthCheck = healthCheck;
    self.healthCheckTimeout = healthCheckTimeout;
    self.healthCheckInterval = healthCheckInterval;
    self.healthyThreshold = healthyThreshold;
    self.unhealthyThreshold = unhealthyThreshold;
    self.serverGroupId = serverGroupId;
    self.listenerId = listenerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
algorithm:(NSString*)algorithm
stickySession:(NSString*)stickySession
realIp:(NSString*)realIp
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
healthCheck:(NSString*)healthCheck
healthCheckTimeout:(NSNumber*)healthCheckTimeout
healthCheckInterval:(NSNumber*)healthCheckInterval
healthyThreshold:(NSNumber*)healthyThreshold
unhealthyThreshold:(NSNumber*)unhealthyThreshold
serverGroupId:(NSString*)serverGroupId
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.version = version;
    self.algorithm = algorithm;
    self.stickySession = stickySession;
    self.realIp = realIp;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.healthCheck = healthCheck;
    self.healthCheckTimeout = healthCheckTimeout;
    self.healthCheckInterval = healthCheckInterval;
    self.healthyThreshold = healthyThreshold;
    self.unhealthyThreshold = unhealthyThreshold;
    self.serverGroupId = serverGroupId;
    self.listenerId = listenerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self algorithm])
    {
        [result setValue:[self algorithm] forKey:@"algorithm"];
    }
    if([self stickySession])
    {
        [result setValue:[self stickySession] forKey:@"stickySession"];
    }
    if([self realIp])
    {
        [result setValue:[self realIp] forKey:@"realIp"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self healthCheck])
    {
        [result setValue:[self healthCheck] forKey:@"healthCheck"];
    }
    if([self healthCheckTimeout])
    {
        [result setValue:[self healthCheckTimeout] forKey:@"healthCheckTimeout"];
    }
    if([self healthCheckInterval])
    {
        [result setValue:[self healthCheckInterval] forKey:@"healthCheckInterval"];
    }
    if([self healthyThreshold])
    {
        [result setValue:[self healthyThreshold] forKey:@"healthyThreshold"];
    }
    if([self unhealthyThreshold])
    {
        [result setValue:[self unhealthyThreshold] forKey:@"unhealthyThreshold"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.algorithm = [dictionary objectForKey:@"algorithm"];
    self.stickySession = [dictionary objectForKey:@"stickySession"];
    self.realIp = [dictionary objectForKey:@"realIp"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.healthCheck = [dictionary objectForKey:@"healthCheck"];
    self.healthCheckTimeout = [dictionary objectForKey:@"healthCheckTimeout"];
    self.healthCheckInterval = [dictionary objectForKey:@"healthCheckInterval"];
    self.healthyThreshold = [dictionary objectForKey:@"healthyThreshold"];
    self.unhealthyThreshold = [dictionary objectForKey:@"unhealthyThreshold"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    return self;
} 

@end
@implementation CpsStopListenerRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.listenerId = listenerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.listenerId = listenerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    return self;
} 

@end
@implementation CpsStartListenerRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.listenerId = listenerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
listenerId:(NSString*)listenerId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.listenerId = listenerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    return self;
} 

@end
@implementation CpsQueryListenersRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
loadBalancerId:(NSString*)loadBalancerId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.loadBalancerId = loadBalancerId;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
loadBalancerId:(NSString*)loadBalancerId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.loadBalancerId = loadBalancerId;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation CpsQueryListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryListenerResult* result = [[CpsQueryListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsQueryListenersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryListenersResult* result = [[CpsQueryListenersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryListenersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsStopListenerResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsStopListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsStopListenerResult* result = [[CpsStopListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsStopListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsAddServersResult
-(id) initWithServerIds:(NSArray<NSString*>*) serverIds { 
    self.serverIds = serverIds;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serverIds])
    {
        [result setValue:[self serverIds] forKey:@"serverIds"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverIds = [dictionary objectForKey:@"serverIds"];
    return self;
} 

@end
@implementation CpsModifyServerResult
-(id) initWithServerId:(NSString*) serverId
        instanceId:(NSString*)instanceId
        privateIp:(NSString*)privateIp
        port:(NSNumber*)port
        weight:(NSNumber*)weight { 
    self.serverId = serverId;               
    self.instanceId = instanceId;               
    self.privateIp = privateIp;               
    self.port = port;               
    self.weight = weight;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serverId])
    {
        [result setValue:[self serverId] forKey:@"serverId"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self privateIp])
    {
        [result setValue:[self privateIp] forKey:@"privateIp"];
    }
    if([self port])
    {
        [result setValue:[self port] forKey:@"port"];
    }
    if([self weight])
    {
        [result setValue:[self weight] forKey:@"weight"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverId = [dictionary objectForKey:@"serverId"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.privateIp = [dictionary objectForKey:@"privateIp"];
    self.port = [dictionary objectForKey:@"port"];
    self.weight = [dictionary objectForKey:@"weight"];
    return self;
} 

@end
  
@implementation CpsModifyServerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyServerResult* result = [[CpsModifyServerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyServerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsRemoveServerResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsRemoveServerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsRemoveServerResult* result = [[CpsRemoveServerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsRemoveServerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsModifyServerRequest
-(id) initWithRegion:(NSString *)regionId
weight:(NSNumber*)weight
serverGroupId:(NSString*)serverGroupId
serverId:(NSString*)serverId { 
    self.regionId = regionId;
    self.weight = weight;
    self.serverGroupId = serverGroupId;
    self.serverId = serverId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
weight:(NSNumber*)weight
serverGroupId:(NSString*)serverGroupId
serverId:(NSString*)serverId { 
    self.regionId = regionId;
    self.version = version;
    self.weight = weight;
    self.serverGroupId = serverGroupId;
    self.serverId = serverId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self weight])
    {
        [result setValue:[self weight] forKey:@"weight"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    if([self serverId])
    {
        [result setValue:[self serverId] forKey:@"serverId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.weight = [dictionary objectForKey:@"weight"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    self.serverId = [dictionary objectForKey:@"serverId"];
    return self;
} 

@end
@implementation CpsRemoveServerRequest
-(id) initWithRegion:(NSString *)regionId
serverGroupId:(NSString*)serverGroupId
serverId:(NSString*)serverId { 
    self.regionId = regionId;
    self.serverGroupId = serverGroupId;
    self.serverId = serverId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
serverGroupId:(NSString*)serverGroupId
serverId:(NSString*)serverId { 
    self.regionId = regionId;
    self.version = version;
    self.serverGroupId = serverGroupId;
    self.serverId = serverId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    if([self serverId])
    {
        [result setValue:[self serverId] forKey:@"serverId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    self.serverId = [dictionary objectForKey:@"serverId"];
    return self;
} 

@end
@implementation CpsQueryServersRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
listenerId:(NSString*)listenerId
filters:(NSArray<Filter*>*)filters
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.listenerId = listenerId;
    self.filters = filters;
    self.serverGroupId = serverGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
listenerId:(NSString*)listenerId
filters:(NSArray<Filter*>*)filters
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.listenerId = listenerId;
    self.filters = filters;
    self.serverGroupId = serverGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
} 

@end
@implementation CpsQueryServersResult
-(id) initWithServers:(NSArray<Server*>*) servers
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.servers = servers;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self servers])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self servers] count]; i++) {
            Server* item = [[self servers] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"servers"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* serversArray = [dictionary objectForKey:@"servers"];
    if(serversArray&&![serversArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [serversArray count];i++)
        {
            Server* item = [[Server alloc]initWithDic:[serversArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.servers = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation CpsAddServersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsAddServersResult* result = [[CpsAddServersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsAddServersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsAddServersRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
serverSpec:(NSArray<ServerSpec*>*)serverSpec
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.serverSpec = serverSpec;
    self.serverGroupId = serverGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
serverSpec:(NSArray<ServerSpec*>*)serverSpec
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.serverSpec = serverSpec;
    self.serverGroupId = serverGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self serverSpec])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self serverSpec] count]; i++) {
            ServerSpec* item = [[self serverSpec] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"serverSpec"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    NSArray* serverSpecArray = [dictionary objectForKey:@"serverSpec"];
    if(serverSpecArray&&![serverSpecArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [serverSpecArray count];i++)
        {
            ServerSpec* item = [[ServerSpec alloc]initWithDic:[serverSpecArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.serverSpec = propertyArray;
    }
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
} 

@end
  
@implementation CpsQueryServersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryServersResult* result = [[CpsQueryServersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryServersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsCreateKeypairsResult
-(id) initWithKeypairId:(NSString*) keypairId
        region:(NSString*)region
        name:(NSString*)name
        publicKey:(NSString*)publicKey
        fingerPrint:(NSString*)fingerPrint
        createTime:(NSString*)createTime
        updateTime:(NSString*)updateTime
        privateKey:(NSString*)privateKey { 
    self.keypairId = keypairId;               
    self.region = region;               
    self.name = name;               
    self.publicKey = publicKey;               
    self.fingerPrint = fingerPrint;               
    self.createTime = createTime;               
    self.updateTime = updateTime;               
    self.privateKey = privateKey;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self publicKey])
    {
        [result setValue:[self publicKey] forKey:@"publicKey"];
    }
    if([self fingerPrint])
    {
        [result setValue:[self fingerPrint] forKey:@"fingerPrint"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    if([self privateKey])
    {
        [result setValue:[self privateKey] forKey:@"privateKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    self.region = [dictionary objectForKey:@"region"];
    self.name = [dictionary objectForKey:@"name"];
    self.publicKey = [dictionary objectForKey:@"publicKey"];
    self.fingerPrint = [dictionary objectForKey:@"fingerPrint"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    self.privateKey = [dictionary objectForKey:@"privateKey"];
    return self;
} 

@end
  
@implementation CpsCreateKeypairsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateKeypairsResult* result = [[CpsCreateKeypairsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateKeypairsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsQueryKeypairResult
-(id) initWithServer:(Keypair*) server { 
    self.server = server;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self server])
    {
        [result setValue:[[self server] dictionary]forKey:@"server"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.server = [[Keypair alloc]initWithDic:[dictionary objectForKey:@"server"]];
    return self;
} 

@end
  
@implementation CpsQueryKeypairResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryKeypairResult* result = [[CpsQueryKeypairResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryKeypairResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDeleteKeypairsResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsQueryKeypairsResult
-(id) initWithServers:(NSArray<Keypair*>*) servers
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.servers = servers;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self servers])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self servers] count]; i++) {
            Keypair* item = [[self servers] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"servers"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* serversArray = [dictionary objectForKey:@"servers"];
    if(serversArray&&![serversArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [serversArray count];i++)
        {
            Keypair* item = [[Keypair alloc]initWithDic:[serversArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.servers = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation CpsQueryKeypairsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryKeypairsResult* result = [[CpsQueryKeypairsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryKeypairsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsImportKeypairsRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
name:(NSString*)name
publicKey:(NSString*)publicKey { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.name = name;
    self.publicKey = publicKey;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
name:(NSString*)name
publicKey:(NSString*)publicKey { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.name = name;
    self.publicKey = publicKey;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self publicKey])
    {
        [result setValue:[self publicKey] forKey:@"publicKey"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.name = [dictionary objectForKey:@"name"];
    self.publicKey = [dictionary objectForKey:@"publicKey"];
    return self;
} 

@end
@implementation CpsCreateKeypairsRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
name:(NSString*)name { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation CpsQueryKeypairsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation CpsQueryKeypairRequest
-(id) initWithRegion:(NSString *)regionId
keypairId:(NSString*)keypairId { 
    self.regionId = regionId;
    self.keypairId = keypairId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
keypairId:(NSString*)keypairId { 
    self.regionId = regionId;
    self.version = version;
    self.keypairId = keypairId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    return self;
} 

@end
@implementation CpsDeleteKeypairsRequest
-(id) initWithRegion:(NSString *)regionId
keypairId:(NSString*)keypairId { 
    self.regionId = regionId;
    self.keypairId = keypairId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
keypairId:(NSString*)keypairId { 
    self.regionId = regionId;
    self.version = version;
    self.keypairId = keypairId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    return self;
} 

@end
@implementation CpsImportKeypairsResult
-(id) initWithKeypairId:(NSString*) keypairId
        region:(NSString*)region
        name:(NSString*)name
        publicKey:(NSString*)publicKey
        fingerPrint:(NSString*)fingerPrint
        createTime:(NSString*)createTime
        updateTime:(NSString*)updateTime { 
    self.keypairId = keypairId;               
    self.region = region;               
    self.name = name;               
    self.publicKey = publicKey;               
    self.fingerPrint = fingerPrint;               
    self.createTime = createTime;               
    self.updateTime = updateTime;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self publicKey])
    {
        [result setValue:[self publicKey] forKey:@"publicKey"];
    }
    if([self fingerPrint])
    {
        [result setValue:[self fingerPrint] forKey:@"fingerPrint"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    self.region = [dictionary objectForKey:@"region"];
    self.name = [dictionary objectForKey:@"name"];
    self.publicKey = [dictionary objectForKey:@"publicKey"];
    self.fingerPrint = [dictionary objectForKey:@"fingerPrint"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
} 

@end
  
@implementation CpsDeleteKeypairsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDeleteKeypairsResult* result = [[CpsDeleteKeypairsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDeleteKeypairsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsImportKeypairsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsImportKeypairsResult* result = [[CpsImportKeypairsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsImportKeypairsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeBasicSubnetRequest
-(id) initWithRegion:(NSString *)regionId
az:(NSString*)az { 
    self.regionId = regionId;
    self.az = az;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
az:(NSString*)az { 
    self.regionId = regionId;
    self.version = version;
    self.az = az;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    return self;
} 

@end
@implementation CpsDescribeBasicSubnetResult
-(id) initWithSubnet:(Subnet*) subnet { 
    self.subnet = subnet;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnet])
    {
        [result setValue:[[self subnet] dictionary]forKey:@"subnet"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnet = [[Subnet alloc]initWithDic:[dictionary objectForKey:@"subnet"]];
    return self;
} 

@end
@implementation CpsModifySubnetResult
-(id) initWithSubnet:(Subnet*) subnet { 
    self.subnet = subnet;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnet])
    {
        [result setValue:[[self subnet] dictionary]forKey:@"subnet"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnet = [[Subnet alloc]initWithDic:[dictionary objectForKey:@"subnet"]];
    return self;
} 

@end
@implementation CpsCreateSubnetResult
-(id) initWithSubnetId:(NSString*) subnetId { 
    self.subnetId = subnetId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    return self;
} 

@end
  
@implementation CpsCreateSubnetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateSubnetResult* result = [[CpsCreateSubnetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateSubnetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsDescribeBasicSubnetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeBasicSubnetResult* result = [[CpsDescribeBasicSubnetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeBasicSubnetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeSubnetsResult
-(id) initWithSubnets:(NSArray<Subnet*>*) subnets
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.subnets = subnets;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnets])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self subnets] count]; i++) {
            Subnet* item = [[self subnets] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"subnets"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* subnetsArray = [dictionary objectForKey:@"subnets"];
    if(subnetsArray&&![subnetsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [subnetsArray count];i++)
        {
            Subnet* item = [[Subnet alloc]initWithDic:[subnetsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.subnets = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation CpsDescribeSubnetsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeSubnetsResult* result = [[CpsDescribeSubnetsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeSubnetsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsCreateSubnetRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
subnetSpec:(SubnetSpec*)subnetSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.subnetSpec = subnetSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
subnetSpec:(SubnetSpec*)subnetSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.subnetSpec = subnetSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self subnetSpec])
    {
        [result setValue:[[self subnetSpec] dictionary]forKey:@"subnetSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.subnetSpec = [[SubnetSpec alloc]initWithDic:[dictionary objectForKey:@"subnetSpec"]];
    return self;
} 

@end
@implementation CpsDescribeSubnetResult
-(id) initWithSubnet:(Subnet*) subnet { 
    self.subnet = subnet;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnet])
    {
        [result setValue:[[self subnet] dictionary]forKey:@"subnet"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnet = [[Subnet alloc]initWithDic:[dictionary objectForKey:@"subnet"]];
    return self;
} 

@end
  
@implementation CpsDescribeSubnetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeSubnetResult* result = [[CpsDescribeSubnetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeSubnetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDeleteSubnetRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
subnetId:(NSString*)subnetId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.subnetId = subnetId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
subnetId:(NSString*)subnetId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.subnetId = subnetId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    return self;
} 

@end
@implementation CpsDescribeSubnetsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
az:(NSString*)az
name:(NSString*)name
vpcId:(NSString*)vpcId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.az = az;
    self.name = name;
    self.vpcId = vpcId;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
az:(NSString*)az
name:(NSString*)name
vpcId:(NSString*)vpcId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.az = az;
    self.name = name;
    self.vpcId = vpcId;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.az = [dictionary objectForKey:@"az"];
    self.name = [dictionary objectForKey:@"name"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation CpsDeleteSubnetResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsDeleteSubnetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDeleteSubnetResult* result = [[CpsDeleteSubnetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDeleteSubnetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeSubnetRequest
-(id) initWithRegion:(NSString *)regionId
subnetId:(NSString*)subnetId { 
    self.regionId = regionId;
    self.subnetId = subnetId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
subnetId:(NSString*)subnetId { 
    self.regionId = regionId;
    self.version = version;
    self.subnetId = subnetId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    return self;
} 

@end
@implementation CpsModifySubnetRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
subnetId:(NSString*)subnetId { 
    self.regionId = regionId;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.subnetId = subnetId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
subnetId:(NSString*)subnetId { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.subnetId = subnetId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    return self;
} 

@end
  
@implementation CpsModifySubnetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifySubnetResult* result = [[CpsModifySubnetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifySubnetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeElasticIpsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
status:(NSString*)status
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.status = status;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
status:(NSString*)status
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.status = status;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.status = [dictionary objectForKey:@"status"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation CpsModifyElasticIpBandwidthResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsModifyElasticIpBandwidthResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyElasticIpBandwidthResult* result = [[CpsModifyElasticIpBandwidthResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyElasticIpBandwidthResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsApplyElasticIpsResult
-(id) initWithElasticIpIds:(NSArray<NSString*>*) elasticIpIds { 
    self.elasticIpIds = elasticIpIds;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self elasticIpIds])
    {
        [result setValue:[self elasticIpIds] forKey:@"elasticIpIds"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.elasticIpIds = [dictionary objectForKey:@"elasticIpIds"];
    return self;
} 

@end
  
@implementation CpsApplyElasticIpsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsApplyElasticIpsResult* result = [[CpsApplyElasticIpsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsApplyElasticIpsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeElasticIpResult
-(id) initWithElasticIp:(ElasticIp*) elasticIp { 
    self.elasticIp = elasticIp;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self elasticIp])
    {
        [result setValue:[[self elasticIp] dictionary]forKey:@"elasticIp"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.elasticIp = [[ElasticIp alloc]initWithDic:[dictionary objectForKey:@"elasticIp"]];
    return self;
} 

@end
@implementation CpsApplyElasticIpsRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
elasticIpSpec:(ElasticIpSpec*)elasticIpSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.elasticIpSpec = elasticIpSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
elasticIpSpec:(ElasticIpSpec*)elasticIpSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.elasticIpSpec = elasticIpSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self elasticIpSpec])
    {
        [result setValue:[[self elasticIpSpec] dictionary]forKey:@"elasticIpSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.elasticIpSpec = [[ElasticIpSpec alloc]initWithDic:[dictionary objectForKey:@"elasticIpSpec"]];
    return self;
} 

@end
  
@implementation CpsDescribeElasticIpResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeElasticIpResult* result = [[CpsDescribeElasticIpResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeElasticIpResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeElasticIpsResult
-(id) initWithElasticIps:(NSArray<ElasticIp*>*) elasticIps
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.elasticIps = elasticIps;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self elasticIps])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self elasticIps] count]; i++) {
            ElasticIp* item = [[self elasticIps] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"elasticIps"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* elasticIpsArray = [dictionary objectForKey:@"elasticIps"];
    if(elasticIpsArray&&![elasticIpsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [elasticIpsArray count];i++)
        {
            ElasticIp* item = [[ElasticIp alloc]initWithDic:[elasticIpsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.elasticIps = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation CpsDescribeElasticIpsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeElasticIpsResult* result = [[CpsDescribeElasticIpsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeElasticIpsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsModifyElasticIpBandwidthRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
bandwidth:(NSNumber*)bandwidth
elasticIpId:(NSString*)elasticIpId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.bandwidth = bandwidth;
    self.elasticIpId = elasticIpId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
bandwidth:(NSNumber*)bandwidth
elasticIpId:(NSString*)elasticIpId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.bandwidth = bandwidth;
    self.elasticIpId = elasticIpId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    return self;
} 

@end
@implementation CpsDescribeElasticIpRequest
-(id) initWithRegion:(NSString *)regionId
elasticIpId:(NSString*)elasticIpId { 
    self.regionId = regionId;
    self.elasticIpId = elasticIpId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
elasticIpId:(NSString*)elasticIpId { 
    self.regionId = regionId;
    self.version = version;
    self.elasticIpId = elasticIpId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    return self;
} 

@end
@implementation CpsDeleteServerGroupRequest
-(id) initWithRegion:(NSString *)regionId
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.serverGroupId = serverGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.serverGroupId = serverGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
} 

@end
@implementation CpsCreateServerGroupResult
-(id) initWithServerGroupId:(NSString*) serverGroupId { 
    self.serverGroupId = serverGroupId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
} 

@end
@implementation CpsQueryServerGroupsResult
-(id) initWithServers:(NSArray<ServerGroup*>*) servers
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.servers = servers;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self servers])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self servers] count]; i++) {
            ServerGroup* item = [[self servers] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"servers"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* serversArray = [dictionary objectForKey:@"servers"];
    if(serversArray&&![serversArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [serversArray count];i++)
        {
            ServerGroup* item = [[ServerGroup alloc]initWithDic:[serversArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.servers = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation CpsQueryServerGroupsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryServerGroupsResult* result = [[CpsQueryServerGroupsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryServerGroupsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDeleteServerGroupResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsModifyServerGroupResult
-(id) initWithLoadBalancerId:(NSString*) loadBalancerId
        serverGroupId:(NSString*)serverGroupId
        name:(NSString*)name { 
    self.loadBalancerId = loadBalancerId;               
    self.serverGroupId = serverGroupId;               
    self.name = name;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation CpsCreateServerGroupRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
serverGroupSpec:(ServerGroupSpec*)serverGroupSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.serverGroupSpec = serverGroupSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
serverGroupSpec:(ServerGroupSpec*)serverGroupSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.serverGroupSpec = serverGroupSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self serverGroupSpec])
    {
        [result setValue:[[self serverGroupSpec] dictionary]forKey:@"serverGroupSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.serverGroupSpec = [[ServerGroupSpec alloc]initWithDic:[dictionary objectForKey:@"serverGroupSpec"]];
    return self;
} 

@end
@implementation CpsQueryServerGroupRequest
-(id) initWithRegion:(NSString *)regionId
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.serverGroupId = serverGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.serverGroupId = serverGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
} 

@end
@implementation CpsQueryServerGroupResult
-(id) initWithServerGroup:(ServerGroup*) serverGroup { 
    self.serverGroup = serverGroup;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serverGroup])
    {
        [result setValue:[[self serverGroup] dictionary]forKey:@"serverGroup"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverGroup = [[ServerGroup alloc]initWithDic:[dictionary objectForKey:@"serverGroup"]];
    return self;
} 

@end
  
@implementation CpsQueryServerGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryServerGroupResult* result = [[CpsQueryServerGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryServerGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsModifyServerGroupRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.name = name;
    self.serverGroupId = serverGroupId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
serverGroupId:(NSString*)serverGroupId { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.serverGroupId = serverGroupId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
} 

@end
@implementation CpsQueryServerGroupsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
loadBalancerId:(NSString*)loadBalancerId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.loadBalancerId = loadBalancerId;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
loadBalancerId:(NSString*)loadBalancerId
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.loadBalancerId = loadBalancerId;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation CpsCreateServerGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateServerGroupResult* result = [[CpsCreateServerGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateServerGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsModifyServerGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyServerGroupResult* result = [[CpsModifyServerGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyServerGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsDeleteServerGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDeleteServerGroupResult* result = [[CpsDeleteServerGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDeleteServerGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsResetPasswordResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsResetPasswordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsResetPasswordResult* result = [[CpsResetPasswordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsResetPasswordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeDeviceRaidsRequest
-(id) initWithRegion:(NSString *)regionId
deviceType:(NSString*)deviceType
volumeType:(NSString*)volumeType { 
    self.regionId = regionId;
    self.deviceType = deviceType;
    self.volumeType = volumeType;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
deviceType:(NSString*)deviceType
volumeType:(NSString*)volumeType { 
    self.regionId = regionId;
    self.version = version;
    self.deviceType = deviceType;
    self.volumeType = volumeType;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    if([self volumeType])
    {
        [result setValue:[self volumeType] forKey:@"volumeType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    self.volumeType = [dictionary objectForKey:@"volumeType"];
    return self;
} 

@end
@implementation CpsModifyBandwidthResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsModifyBandwidthResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyBandwidthResult* result = [[CpsModifyBandwidthResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyBandwidthResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeInstanceStatusResult
-(id) initWithCpus:(NSNumber*) cpus
        mems:(NSNumber*)mems
        disks:(NSNumber*)disks
        nics:(NSNumber*)nics { 
    self.cpus = cpus;               
    self.mems = mems;               
    self.disks = disks;               
    self.nics = nics;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self cpus])
    {
        [result setValue:[self cpus] forKey:@"cpus"];
    }
    if([self mems])
    {
        [result setValue:[self mems] forKey:@"mems"];
    }
    if([self disks])
    {
        [result setValue:[self disks] forKey:@"disks"];
    }
    if([self nics])
    {
        [result setValue:[self nics] forKey:@"nics"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cpus = [dictionary objectForKey:@"cpus"];
    self.mems = [dictionary objectForKey:@"mems"];
    self.disks = [dictionary objectForKey:@"disks"];
    self.nics = [dictionary objectForKey:@"nics"];
    return self;
} 

@end
  
@implementation CpsDescribeInstanceStatusResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeInstanceStatusResult* result = [[CpsDescribeInstanceStatusResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeInstanceStatusResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsReinstallInstanceResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsCreateInstancesResult
-(id) initWithInstanceIds:(NSArray<NSString*>*) instanceIds { 
    self.instanceIds = instanceIds;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceIds])
    {
        [result setValue:[self instanceIds] forKey:@"instanceIds"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceIds = [dictionary objectForKey:@"instanceIds"];
    return self;
} 

@end
  
@implementation CpsCreateInstancesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateInstancesResult* result = [[CpsCreateInstancesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateInstancesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeOSRequest
-(id) initWithRegion:(NSString *)regionId
deviceType:(NSString*)deviceType
osType:(NSString*)osType { 
    self.regionId = regionId;
    self.deviceType = deviceType;
    self.osType = osType;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
deviceType:(NSString*)deviceType
osType:(NSString*)osType { 
    self.regionId = regionId;
    self.version = version;
    self.deviceType = deviceType;
    self.osType = osType;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    if([self osType])
    {
        [result setValue:[self osType] forKey:@"osType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    self.osType = [dictionary objectForKey:@"osType"];
    return self;
} 

@end
@implementation CpsStartInstanceResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsStartInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsStartInstanceResult* result = [[CpsStartInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsStartInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeInstanceRaidResult
-(id) initWithSysRaidTypeId:(NSString*) sysRaidTypeId
        sysRaidType:(NSString*)sysRaidType
        dataRaidTypeId:(NSString*)dataRaidTypeId
        dataRaidType:(NSString*)dataRaidType { 
    self.sysRaidTypeId = sysRaidTypeId;               
    self.sysRaidType = sysRaidType;               
    self.dataRaidTypeId = dataRaidTypeId;               
    self.dataRaidType = dataRaidType;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self sysRaidTypeId])
    {
        [result setValue:[self sysRaidTypeId] forKey:@"sysRaidTypeId"];
    }
    if([self sysRaidType])
    {
        [result setValue:[self sysRaidType] forKey:@"sysRaidType"];
    }
    if([self dataRaidTypeId])
    {
        [result setValue:[self dataRaidTypeId] forKey:@"dataRaidTypeId"];
    }
    if([self dataRaidType])
    {
        [result setValue:[self dataRaidType] forKey:@"dataRaidType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.sysRaidTypeId = [dictionary objectForKey:@"sysRaidTypeId"];
    self.sysRaidType = [dictionary objectForKey:@"sysRaidType"];
    self.dataRaidTypeId = [dictionary objectForKey:@"dataRaidTypeId"];
    self.dataRaidType = [dictionary objectForKey:@"dataRaidType"];
    return self;
} 

@end
@implementation CpsModifyInstanceRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsDescribeDeviceTypesRequest
-(id) initWithRegion:(NSString *)regionId
az:(NSString*)az { 
    self.regionId = regionId;
    self.az = az;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
az:(NSString*)az { 
    self.regionId = regionId;
    self.version = version;
    self.az = az;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    return self;
} 

@end
  
@implementation CpsDescribeInstanceRaidResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeInstanceRaidResult* result = [[CpsDescribeInstanceRaidResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeInstanceRaidResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsModifyBandwidthRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
bandwidth:(NSNumber*)bandwidth
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.bandwidth = bandwidth;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
bandwidth:(NSNumber*)bandwidth
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.bandwidth = bandwidth;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsStopInstanceResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsStopInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsStopInstanceResult* result = [[CpsStopInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsStopInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeInstanceMonitorInfoRequest
-(id) initWithRegion:(NSString *)regionId
startTime:(NSNumber*)startTime
endTime:(NSNumber*)endTime
metrics:(NSArray<NSString*>*)metrics
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.startTime = startTime;
    self.endTime = endTime;
    self.metrics = metrics;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
startTime:(NSNumber*)startTime
endTime:(NSNumber*)endTime
metrics:(NSArray<NSString*>*)metrics
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.startTime = startTime;
    self.endTime = endTime;
    self.metrics = metrics;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self startTime])
    {
        [result setValue:[self startTime] forKey:@"startTime"];
    }
    if([self endTime])
    {
        [result setValue:[self endTime] forKey:@"endTime"];
    }
    if([self metrics])
    {
        [result setValue:[self metrics] forKey:@"metrics"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.startTime = [dictionary objectForKey:@"startTime"];
    self.endTime = [dictionary objectForKey:@"endTime"];
    self.metrics = [dictionary objectForKey:@"metrics"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsDescribeInstanceRaidRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsRestartInstanceRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
  
@implementation CpsReinstallInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsReinstallInstanceResult* result = [[CpsReinstallInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsReinstallInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeDeviceTypesResult
-(id) initWithDeviceTypes:(NSArray<DeviceType*>*) deviceTypes { 
    self.deviceTypes = deviceTypes;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deviceTypes])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self deviceTypes] count]; i++) {
            DeviceType* item = [[self deviceTypes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"deviceTypes"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* deviceTypesArray = [dictionary objectForKey:@"deviceTypes"];
    if(deviceTypesArray&&![deviceTypesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [deviceTypesArray count];i++)
        {
            DeviceType* item = [[DeviceType alloc]initWithDic:[deviceTypesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.deviceTypes = propertyArray;
    }
    return self;
} 

@end
@implementation CpsDescribeDeviceRaidsResult
-(id) initWithRaids:(NSArray<Raid*>*) raids { 
    self.raids = raids;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self raids])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self raids] count]; i++) {
            Raid* item = [[self raids] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"raids"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* raidsArray = [dictionary objectForKey:@"raids"];
    if(raidsArray&&![raidsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [raidsArray count];i++)
        {
            Raid* item = [[Raid alloc]initWithDic:[raidsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.raids = propertyArray;
    }
    return self;
} 

@end
  
@implementation CpsDescribeDeviceRaidsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeDeviceRaidsResult* result = [[CpsDescribeDeviceRaidsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeDeviceRaidsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsDescribeDeviceTypesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeDeviceTypesResult* result = [[CpsDescribeDeviceTypesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeDeviceTypesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsAssociateElasticIpResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsAssociateElasticIpResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsAssociateElasticIpResult* result = [[CpsAssociateElasticIpResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsAssociateElasticIpResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeInstancesRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
az:(NSString*)az
name:(NSString*)name
networkType:(NSString*)networkType
deviceType:(NSString*)deviceType
subnetId:(NSString*)subnetId
keypairId:(NSString*)keypairId
enableInternet:(NSString*)enableInternet
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.az = az;
    self.name = name;
    self.networkType = networkType;
    self.deviceType = deviceType;
    self.subnetId = subnetId;
    self.keypairId = keypairId;
    self.enableInternet = enableInternet;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
az:(NSString*)az
name:(NSString*)name
networkType:(NSString*)networkType
deviceType:(NSString*)deviceType
subnetId:(NSString*)subnetId
keypairId:(NSString*)keypairId
enableInternet:(NSString*)enableInternet
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.az = az;
    self.name = name;
    self.networkType = networkType;
    self.deviceType = deviceType;
    self.subnetId = subnetId;
    self.keypairId = keypairId;
    self.enableInternet = enableInternet;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self networkType])
    {
        [result setValue:[self networkType] forKey:@"networkType"];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    if([self enableInternet])
    {
        [result setValue:[self enableInternet] forKey:@"enableInternet"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.az = [dictionary objectForKey:@"az"];
    self.name = [dictionary objectForKey:@"name"];
    self.networkType = [dictionary objectForKey:@"networkType"];
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    self.enableInternet = [dictionary objectForKey:@"enableInternet"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation CpsCreateInstancesRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
instanceSpec:(InstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.instanceSpec = instanceSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
instanceSpec:(InstanceSpec*)instanceSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.instanceSpec = instanceSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self instanceSpec])
    {
        [result setValue:[[self instanceSpec] dictionary]forKey:@"instanceSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.instanceSpec = [[InstanceSpec alloc]initWithDic:[dictionary objectForKey:@"instanceSpec"]];
    return self;
} 

@end
@implementation CpsDescribeInstanceNameResult
-(id) initWithName:(NSString*) name { 
    self.name = name;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
  
@implementation CpsDescribeInstanceNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeInstanceNameResult* result = [[CpsDescribeInstanceNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeInstanceNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDisassociateElasticIpRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsResetPasswordRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
password:(NSString*)password
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.password = password;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
password:(NSString*)password
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.password = password;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.password = [dictionary objectForKey:@"password"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsDescribeInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsModifyInstanceResult
-(id) initWithName:(NSString*) name
        descriptionValue:(NSString*)descriptionValue { 
    self.name = name;               
    self.descriptionValue = descriptionValue;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
} 

@end
@implementation CpsStopInstanceRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsDescribeInstanceMonitorInfoResult
-(id) initWithMetricDatas:(MetricData*) metricDatas { 
    self.metricDatas = metricDatas;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self metricDatas])
    {
        [result setValue:[[self metricDatas] dictionary]forKey:@"metricDatas"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.metricDatas = [[MetricData alloc]initWithDic:[dictionary objectForKey:@"metricDatas"]];
    return self;
} 

@end
  
@implementation CpsDescribeInstanceMonitorInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeInstanceMonitorInfoResult* result = [[CpsDescribeInstanceMonitorInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeInstanceMonitorInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsStartInstanceRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsReinstallInstanceRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
instanceSpec:(ReinstallInstanceSpec*)instanceSpec
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.instanceSpec = instanceSpec;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
instanceSpec:(ReinstallInstanceSpec*)instanceSpec
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.instanceSpec = instanceSpec;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self instanceSpec])
    {
        [result setValue:[[self instanceSpec] dictionary]forKey:@"instanceSpec"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.instanceSpec = [[ReinstallInstanceSpec alloc]initWithDic:[dictionary objectForKey:@"instanceSpec"]];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsDescribeInstancesResult
-(id) initWithInstances:(NSArray<Instance*>*) instances
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.instances = instances;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instances])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self instances] count]; i++) {
            Instance* item = [[self instances] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"instances"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* instancesArray = [dictionary objectForKey:@"instances"];
    if(instancesArray&&![instancesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [instancesArray count];i++)
        {
            Instance* item = [[Instance alloc]initWithDic:[instancesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.instances = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation CpsDescribeOSResult
-(id) initWithOss:(NSArray<Os*>*) oss { 
    self.oss = oss;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self oss])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self oss] count]; i++) {
            Os* item = [[self oss] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"oss"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* ossArray = [dictionary objectForKey:@"oss"];
    if(ossArray&&![ossArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [ossArray count];i++)
        {
            Os* item = [[Os alloc]initWithDic:[ossArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.oss = propertyArray;
    }
    return self;
} 

@end
@implementation CpsDescribeInstanceResult
-(id) initWithInstance:(Instance*) instance { 
    self.instance = instance;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instance])
    {
        [result setValue:[[self instance] dictionary]forKey:@"instance"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instance = [[Instance alloc]initWithDic:[dictionary objectForKey:@"instance"]];
    return self;
} 

@end
@implementation CpsAssociateElasticIpRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
  
@implementation CpsDescribeOSResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeOSResult* result = [[CpsDescribeOSResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeOSResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsModifyInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyInstanceResult* result = [[CpsModifyInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsDescribeInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeInstanceResult* result = [[CpsDescribeInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsRestartInstanceResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsRestartInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsRestartInstanceResult* result = [[CpsRestartInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsRestartInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeInstanceNameRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
@implementation CpsDisassociateElasticIpResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsDescribeInstanceStatusRequest
-(id) initWithRegion:(NSString *)regionId
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.instanceId = instanceId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instanceId:(NSString*)instanceId { 
    self.regionId = regionId;
    self.version = version;
    self.instanceId = instanceId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    return self;
} 

@end
  
@implementation CpsDisassociateElasticIpResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDisassociateElasticIpResult* result = [[CpsDisassociateElasticIpResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDisassociateElasticIpResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsDescribeInstancesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeInstancesResult* result = [[CpsDescribeInstancesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeInstancesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsCreateLoadBalancerRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
loadBalancerSpec:(LoadBalancerSpec*)loadBalancerSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.loadBalancerSpec = loadBalancerSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
loadBalancerSpec:(LoadBalancerSpec*)loadBalancerSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.loadBalancerSpec = loadBalancerSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self loadBalancerSpec])
    {
        [result setValue:[[self loadBalancerSpec] dictionary]forKey:@"loadBalancerSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.loadBalancerSpec = [[LoadBalancerSpec alloc]initWithDic:[dictionary objectForKey:@"loadBalancerSpec"]];
    return self;
} 

@end
@implementation CpsDisassociateElasticIpLBResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsCreateLoadBalancerResult
-(id) initWithLoadBalancerId:(NSString*) loadBalancerId { 
    self.loadBalancerId = loadBalancerId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
  
@implementation CpsCreateLoadBalancerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateLoadBalancerResult* result = [[CpsCreateLoadBalancerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateLoadBalancerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsModifyLoadBalancerResult
-(id) initWithLoadBalancer:(LoadBalancer*) loadBalancer { 
    self.loadBalancer = loadBalancer;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancer])
    {
        [result setValue:[[self loadBalancer] dictionary]forKey:@"loadBalancer"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancer = [[LoadBalancer alloc]initWithDic:[dictionary objectForKey:@"loadBalancer"]];
    return self;
} 

@end
@implementation CpsQueryLoadBalancerResult
-(id) initWithLoadBalancer:(LoadBalancer*) loadBalancer { 
    self.loadBalancer = loadBalancer;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancer])
    {
        [result setValue:[[self loadBalancer] dictionary]forKey:@"loadBalancer"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancer = [[LoadBalancer alloc]initWithDic:[dictionary objectForKey:@"loadBalancer"]];
    return self;
} 

@end
  
@implementation CpsQueryLoadBalancerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryLoadBalancerResult* result = [[CpsQueryLoadBalancerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryLoadBalancerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsStopLoadBalancerResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsAssociateElasticIpLBRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.loadBalancerId = loadBalancerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.loadBalancerId = loadBalancerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
  
@implementation CpsStopLoadBalancerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsStopLoadBalancerResult* result = [[CpsStopLoadBalancerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsStopLoadBalancerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsStartLoadBalancerResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsStartLoadBalancerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsStartLoadBalancerResult* result = [[CpsStartLoadBalancerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsStartLoadBalancerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsAssociateElasticIpLBResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
@implementation CpsDisassociateElasticIpLBRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.loadBalancerId = loadBalancerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
elasticIpId:(NSString*)elasticIpId
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.elasticIpId = elasticIpId;
    self.loadBalancerId = loadBalancerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
  
@implementation CpsModifyLoadBalancerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyLoadBalancerResult* result = [[CpsModifyLoadBalancerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyLoadBalancerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsQueryLoadBalancerRequest
-(id) initWithRegion:(NSString *)regionId
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.loadBalancerId = loadBalancerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.version = version;
    self.loadBalancerId = loadBalancerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
@implementation CpsStartLoadBalancerRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.loadBalancerId = loadBalancerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.loadBalancerId = loadBalancerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
@implementation CpsStopLoadBalancerRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.loadBalancerId = loadBalancerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.loadBalancerId = loadBalancerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
@implementation CpsQueryLoadBalancersResult
-(id) initWithLoadBalancers:(NSArray<LoadBalancer*>*) loadBalancers
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.loadBalancers = loadBalancers;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancers])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self loadBalancers] count]; i++) {
            LoadBalancer* item = [[self loadBalancers] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"loadBalancers"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* loadBalancersArray = [dictionary objectForKey:@"loadBalancers"];
    if(loadBalancersArray&&![loadBalancersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [loadBalancersArray count];i++)
        {
            LoadBalancer* item = [[LoadBalancer alloc]initWithDic:[loadBalancersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.loadBalancers = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
@implementation CpsQueryLoadBalancersRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
status:(NSString*)status
name:(NSString*)name
vpcId:(NSString*)vpcId
bindEip:(NSNumber*)bindEip
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.status = status;
    self.name = name;
    self.vpcId = vpcId;
    self.bindEip = bindEip;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
status:(NSString*)status
name:(NSString*)name
vpcId:(NSString*)vpcId
bindEip:(NSNumber*)bindEip
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.status = status;
    self.name = name;
    self.vpcId = vpcId;
    self.bindEip = bindEip;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self bindEip])
    {
        [result setValue:[self bindEip] forKey:@"bindEip"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.status = [dictionary objectForKey:@"status"];
    self.name = [dictionary objectForKey:@"name"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.bindEip = [dictionary objectForKey:@"bindEip"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
  
@implementation CpsAssociateElasticIpLBResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsAssociateElasticIpLBResult* result = [[CpsAssociateElasticIpLBResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsAssociateElasticIpLBResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsDisassociateElasticIpLBResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDisassociateElasticIpLBResult* result = [[CpsDisassociateElasticIpLBResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDisassociateElasticIpLBResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation CpsQueryLoadBalancersResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryLoadBalancersResult* result = [[CpsQueryLoadBalancersResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryLoadBalancersResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsModifyLoadBalancerRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.loadBalancerId = loadBalancerId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
loadBalancerId:(NSString*)loadBalancerId { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.loadBalancerId = loadBalancerId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    return self;
} 

@end
@implementation CpsDescribeVpcsRequest
-(id) initWithRegion:(NSString *)regionId
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.filters = filters;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
pageNumber:(NSNumber*)pageNumber
pageSize:(NSNumber*)pageSize
name:(NSString*)name
filters:(NSArray<Filter*>*)filters { 
    self.regionId = regionId;
    self.version = version;
    self.pageNumber = pageNumber;
    self.pageSize = pageSize;
    self.name = name;
    self.filters = filters;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self filters])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self filters] count]; i++) {
            Filter* item = [[self filters] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"filters"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.name = [dictionary objectForKey:@"name"];
    NSArray* filtersArray = [dictionary objectForKey:@"filters"];
    if(filtersArray&&![filtersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filtersArray count];i++)
        {
            Filter* item = [[Filter alloc]initWithDic:[filtersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.filters = propertyArray;
    }
    return self;
} 

@end
@implementation CpsModifyVpcResult
-(id) initWithVpc:(Vpc*) vpc { 
    self.vpc = vpc;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vpc])
    {
        [result setValue:[[self vpc] dictionary]forKey:@"vpc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vpc = [[Vpc alloc]initWithDic:[dictionary objectForKey:@"vpc"]];
    return self;
} 

@end
@implementation CpsModifyVpcRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
vpcId:(NSString*)vpcId { 
    self.regionId = regionId;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.vpcId = vpcId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name
descriptionValue:(NSString*)descriptionValue
vpcId:(NSString*)vpcId { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    self.descriptionValue = descriptionValue;
    self.vpcId = vpcId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    return self;
} 

@end
@implementation CpsCreateVpcResult
-(id) initWithVpcId:(NSString*) vpcId { 
    self.vpcId = vpcId;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    return self;
} 

@end
  
@implementation CpsCreateVpcResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsCreateVpcResult* result = [[CpsCreateVpcResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsCreateVpcResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeVpcResult
-(id) initWithVpc:(Vpc*) vpc { 
    self.vpc = vpc;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vpc])
    {
        [result setValue:[[self vpc] dictionary]forKey:@"vpc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vpc = [[Vpc alloc]initWithDic:[dictionary objectForKey:@"vpc"]];
    return self;
} 

@end
  
@implementation CpsDescribeVpcResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeVpcResult* result = [[CpsDescribeVpcResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeVpcResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsCreateVpcRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
vpcSpec:(VpcSpec*)vpcSpec { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.vpcSpec = vpcSpec;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
vpcSpec:(VpcSpec*)vpcSpec { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.vpcSpec = vpcSpec;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self vpcSpec])
    {
        [result setValue:[[self vpcSpec] dictionary]forKey:@"vpcSpec"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.vpcSpec = [[VpcSpec alloc]initWithDic:[dictionary objectForKey:@"vpcSpec"]];
    return self;
} 

@end
@implementation CpsDescribeVpcRequest
-(id) initWithRegion:(NSString *)regionId
vpcId:(NSString*)vpcId { 
    self.regionId = regionId;
    self.vpcId = vpcId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
vpcId:(NSString*)vpcId { 
    self.regionId = regionId;
    self.version = version;
    self.vpcId = vpcId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    return self;
} 

@end
  
@implementation CpsModifyVpcResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsModifyVpcResult* result = [[CpsModifyVpcResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsModifyVpcResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDeleteVpcRequest
-(id) initWithRegion:(NSString *)regionId
clientToken:(NSString*)clientToken
vpcId:(NSString*)vpcId { 
    self.regionId = regionId;
    self.clientToken = clientToken;
    self.vpcId = vpcId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
clientToken:(NSString*)clientToken
vpcId:(NSString*)vpcId { 
    self.regionId = regionId;
    self.version = version;
    self.clientToken = clientToken;
    self.vpcId = vpcId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self clientToken])
    {
        [result setValue:[self clientToken] forKey:@"clientToken"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.clientToken = [dictionary objectForKey:@"clientToken"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    return self;
} 

@end
@implementation CpsDeleteVpcResult
-(id) initWithSuccess:(NSNumber*) success { 
    self.success = success;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self success])
    {
        [result setValue:[self success] forKey:@"success"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.success = [dictionary objectForKey:@"success"];
    return self;
} 

@end
  
@implementation CpsDeleteVpcResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDeleteVpcResult* result = [[CpsDeleteVpcResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDeleteVpcResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeVpcsResult
-(id) initWithVpcs:(NSArray<Vpc*>*) vpcs
        pageNumber:(NSNumber*)pageNumber
        pageSize:(NSNumber*)pageSize
        totalCount:(NSNumber*)totalCount { 
    self.vpcs = vpcs;               
    self.pageNumber = pageNumber;               
    self.pageSize = pageSize;               
    self.totalCount = totalCount;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vpcs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self vpcs] count]; i++) {
            Vpc* item = [[self vpcs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"vpcs"];
    }
    if([self pageNumber])
    {
        [result setValue:[self pageNumber] forKey:@"pageNumber"];
    }
    if([self pageSize])
    {
        [result setValue:[self pageSize] forKey:@"pageSize"];
    }
    if([self totalCount])
    {
        [result setValue:[self totalCount] forKey:@"totalCount"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* vpcsArray = [dictionary objectForKey:@"vpcs"];
    if(vpcsArray&&![vpcsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [vpcsArray count];i++)
        {
            Vpc* item = [[Vpc alloc]initWithDic:[vpcsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.vpcs = propertyArray;
    }
    self.pageNumber = [dictionary objectForKey:@"pageNumber"];
    self.pageSize = [dictionary objectForKey:@"pageSize"];
    self.totalCount = [dictionary objectForKey:@"totalCount"];
    return self;
} 

@end
  
@implementation CpsDescribeVpcsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeVpcsResult* result = [[CpsDescribeVpcsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeVpcsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsQueryCPSLBRegionsResult
-(id) initWithRegions:(NSArray<Region*>*) regions { 
    self.regions = regions;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self regions])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self regions] count]; i++) {
            Region* item = [[self regions] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"regions"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* regionsArray = [dictionary objectForKey:@"regions"];
    if(regionsArray&&![regionsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [regionsArray count];i++)
        {
            Region* item = [[Region alloc]initWithDic:[regionsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.regions = propertyArray;
    }
    return self;
} 

@end
  
@implementation CpsQueryCPSLBRegionsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsQueryCPSLBRegionsResult* result = [[CpsQueryCPSLBRegionsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsQueryCPSLBRegionsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation CpsDescribeRegionesRequest
-(id) initWithRegion:(NSString *)regionId
networkType:(NSString*)networkType { 
    self.regionId = regionId;
    self.networkType = networkType;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
networkType:(NSString*)networkType { 
    self.regionId = regionId;
    self.version = version;
    self.networkType = networkType;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self networkType])
    {
        [result setValue:[self networkType] forKey:@"networkType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.networkType = [dictionary objectForKey:@"networkType"];
    return self;
} 

@end
@implementation CpsQueryCPSLBRegionsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation CpsDescribeRegionesResult
-(id) initWithRegions:(NSArray<Region*>*) regions { 
    self.regions = regions;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self regions])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self regions] count]; i++) {
            Region* item = [[self regions] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"regions"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* regionsArray = [dictionary objectForKey:@"regions"];
    if(regionsArray&&![regionsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [regionsArray count];i++)
        {
            Region* item = [[Region alloc]initWithDic:[regionsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.regions = propertyArray;
    }
    return self;
} 

@end
  
@implementation CpsDescribeRegionesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
CpsDescribeRegionesResult* result = [[CpsDescribeRegionesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(CpsDescribeRegionesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
 
