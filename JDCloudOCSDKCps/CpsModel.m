 /* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.





Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/


#import <Foundation/Foundation.h>
#import <JDCloudOCSDKCps/CpsModel.h>

@implementation Route
-(id) initWithDestinationCidr:(NSString*) destinationCidr
      nextHopType:(NSString*)nextHopType
      nextHop:(NSString*)nextHop { 
     self.destinationCidr = destinationCidr;               
     self.nextHopType = nextHopType;               
     self.nextHop = nextHop;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self destinationCidr])
    {
        [result setValue:[self destinationCidr] forKey:@"destinationCidr"];
    }
    if([self nextHopType])
    {
        [result setValue:[self nextHopType] forKey:@"nextHopType"];
    }
    if([self nextHop])
    {
        [result setValue:[self nextHop] forKey:@"nextHop"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.destinationCidr = [dictionary objectForKey:@"destinationCidr"];
    self.nextHopType = [dictionary objectForKey:@"nextHopType"];
    self.nextHop = [dictionary objectForKey:@"nextHop"];
    return self;
}
 @end
@implementation RouteTable
-(id) initWithRouteTableId:(NSString*) routeTableId
      region:(NSString*)region
      vpcId:(NSString*)vpcId
      name:(NSString*)name
      createTime:(NSString*)createTime
      routes:(NSArray<Route*>*)routes { 
     self.routeTableId = routeTableId;               
     self.region = region;               
     self.vpcId = vpcId;               
     self.name = name;               
     self.createTime = createTime;               
     self.routes = routes;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self routeTableId])
    {
        [result setValue:[self routeTableId] forKey:@"routeTableId"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self routes])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self routes] count]; i++) {
            Route* item = [[self routes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"routes"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.routeTableId = [dictionary objectForKey:@"routeTableId"];
    self.region = [dictionary objectForKey:@"region"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.name = [dictionary objectForKey:@"name"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    NSArray* routesArray = [dictionary objectForKey:@"routes"];
    if(routesArray&&![routesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [routesArray count];i++)
        {
            Route* item = [[Route alloc]initWithDic:[routesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.routes = propertyArray;
    }
    return self;
}
 @end
@implementation MetricInfo
-(id) initWithCalculateUnit:(NSString*) calculateUnit
      metirc:(NSString*)metirc
      metricName:(NSString*)metricName
      aggregator:(NSString*)aggregator
      period:(NSString*)period { 
     self.calculateUnit = calculateUnit;               
     self.metirc = metirc;               
     self.metricName = metricName;               
     self.aggregator = aggregator;               
     self.period = period;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self calculateUnit])
    {
        [result setValue:[self calculateUnit] forKey:@"calculateUnit"];
    }
    if([self metirc])
    {
        [result setValue:[self metirc] forKey:@"metirc"];
    }
    if([self metricName])
    {
        [result setValue:[self metricName] forKey:@"metricName"];
    }
    if([self aggregator])
    {
        [result setValue:[self aggregator] forKey:@"aggregator"];
    }
    if([self period])
    {
        [result setValue:[self period] forKey:@"period"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.calculateUnit = [dictionary objectForKey:@"calculateUnit"];
    self.metirc = [dictionary objectForKey:@"metirc"];
    self.metricName = [dictionary objectForKey:@"metricName"];
    self.aggregator = [dictionary objectForKey:@"aggregator"];
    self.period = [dictionary objectForKey:@"period"];
    return self;
}
 @end
@implementation Listener
-(id) initWithListenerId:(NSString*) listenerId
      loadBalancerId:(NSString*)loadBalancerId
      protocol:(NSString*)protocol
      port:(NSNumber*)port
      algorithm:(NSString*)algorithm
      stickySession:(NSString*)stickySession
      realIp:(NSString*)realIp
      status:(NSString*)status
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      healthCheck:(NSString*)healthCheck
      healthCheckTimeout:(NSNumber*)healthCheckTimeout
      healthCheckInterval:(NSNumber*)healthCheckInterval
      healthyThreshold:(NSNumber*)healthyThreshold
      unhealthyThreshold:(NSNumber*)unhealthyThreshold
      healthCheckIp:(NSString*)healthCheckIp
      serverGroupId:(NSString*)serverGroupId { 
     self.listenerId = listenerId;               
     self.loadBalancerId = loadBalancerId;               
     self.protocol = protocol;               
     self.port = port;               
     self.algorithm = algorithm;               
     self.stickySession = stickySession;               
     self.realIp = realIp;               
     self.status = status;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.healthCheck = healthCheck;               
     self.healthCheckTimeout = healthCheckTimeout;               
     self.healthCheckInterval = healthCheckInterval;               
     self.healthyThreshold = healthyThreshold;               
     self.unhealthyThreshold = unhealthyThreshold;               
     self.healthCheckIp = healthCheckIp;               
     self.serverGroupId = serverGroupId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self listenerId])
    {
        [result setValue:[self listenerId] forKey:@"listenerId"];
    }
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self protocol])
    {
        [result setValue:[self protocol] forKey:@"protocol"];
    }
    if([self port])
    {
        [result setValue:[self port] forKey:@"port"];
    }
    if([self algorithm])
    {
        [result setValue:[self algorithm] forKey:@"algorithm"];
    }
    if([self stickySession])
    {
        [result setValue:[self stickySession] forKey:@"stickySession"];
    }
    if([self realIp])
    {
        [result setValue:[self realIp] forKey:@"realIp"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self healthCheck])
    {
        [result setValue:[self healthCheck] forKey:@"healthCheck"];
    }
    if([self healthCheckTimeout])
    {
        [result setValue:[self healthCheckTimeout] forKey:@"healthCheckTimeout"];
    }
    if([self healthCheckInterval])
    {
        [result setValue:[self healthCheckInterval] forKey:@"healthCheckInterval"];
    }
    if([self healthyThreshold])
    {
        [result setValue:[self healthyThreshold] forKey:@"healthyThreshold"];
    }
    if([self unhealthyThreshold])
    {
        [result setValue:[self unhealthyThreshold] forKey:@"unhealthyThreshold"];
    }
    if([self healthCheckIp])
    {
        [result setValue:[self healthCheckIp] forKey:@"healthCheckIp"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerId = [dictionary objectForKey:@"listenerId"];
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    self.protocol = [dictionary objectForKey:@"protocol"];
    self.port = [dictionary objectForKey:@"port"];
    self.algorithm = [dictionary objectForKey:@"algorithm"];
    self.stickySession = [dictionary objectForKey:@"stickySession"];
    self.realIp = [dictionary objectForKey:@"realIp"];
    self.status = [dictionary objectForKey:@"status"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.healthCheck = [dictionary objectForKey:@"healthCheck"];
    self.healthCheckTimeout = [dictionary objectForKey:@"healthCheckTimeout"];
    self.healthCheckInterval = [dictionary objectForKey:@"healthCheckInterval"];
    self.healthyThreshold = [dictionary objectForKey:@"healthyThreshold"];
    self.unhealthyThreshold = [dictionary objectForKey:@"unhealthyThreshold"];
    self.healthCheckIp = [dictionary objectForKey:@"healthCheckIp"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
}
 @end
@implementation Server
-(id) initWithServerId:(NSString*) serverId
      instanceType:(NSString*)instanceType
      instanceName:(NSString*)instanceName
      instanceId:(NSString*)instanceId
      az:(NSString*)az
      privateIp:(NSString*)privateIp
      port:(NSNumber*)port
      weight:(NSNumber*)weight
      status:(NSString*)status
      healthyStatus:(NSString*)healthyStatus { 
     self.serverId = serverId;               
     self.instanceType = instanceType;               
     self.instanceName = instanceName;               
     self.instanceId = instanceId;               
     self.az = az;               
     self.privateIp = privateIp;               
     self.port = port;               
     self.weight = weight;               
     self.status = status;               
     self.healthyStatus = healthyStatus;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self serverId])
    {
        [result setValue:[self serverId] forKey:@"serverId"];
    }
    if([self instanceType])
    {
        [result setValue:[self instanceType] forKey:@"instanceType"];
    }
    if([self instanceName])
    {
        [result setValue:[self instanceName] forKey:@"instanceName"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self privateIp])
    {
        [result setValue:[self privateIp] forKey:@"privateIp"];
    }
    if([self port])
    {
        [result setValue:[self port] forKey:@"port"];
    }
    if([self weight])
    {
        [result setValue:[self weight] forKey:@"weight"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self healthyStatus])
    {
        [result setValue:[self healthyStatus] forKey:@"healthyStatus"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.serverId = [dictionary objectForKey:@"serverId"];
    self.instanceType = [dictionary objectForKey:@"instanceType"];
    self.instanceName = [dictionary objectForKey:@"instanceName"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.az = [dictionary objectForKey:@"az"];
    self.privateIp = [dictionary objectForKey:@"privateIp"];
    self.port = [dictionary objectForKey:@"port"];
    self.weight = [dictionary objectForKey:@"weight"];
    self.status = [dictionary objectForKey:@"status"];
    self.healthyStatus = [dictionary objectForKey:@"healthyStatus"];
    return self;
}
 @end
@implementation Os
-(id) initWithOsTypeId:(NSString*) osTypeId
      osName:(NSString*)osName
      osType:(NSString*)osType
      osVersion:(NSString*)osVersion
      deviceType:(NSString*)deviceType { 
     self.osTypeId = osTypeId;               
     self.osName = osName;               
     self.osType = osType;               
     self.osVersion = osVersion;               
     self.deviceType = deviceType;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self osTypeId])
    {
        [result setValue:[self osTypeId] forKey:@"osTypeId"];
    }
    if([self osName])
    {
        [result setValue:[self osName] forKey:@"osName"];
    }
    if([self osType])
    {
        [result setValue:[self osType] forKey:@"osType"];
    }
    if([self osVersion])
    {
        [result setValue:[self osVersion] forKey:@"osVersion"];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.osTypeId = [dictionary objectForKey:@"osTypeId"];
    self.osName = [dictionary objectForKey:@"osName"];
    self.osType = [dictionary objectForKey:@"osType"];
    self.osVersion = [dictionary objectForKey:@"osVersion"];
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    return self;
}
 @end
@implementation MetricTag
-(id) initWithTagKey:(NSString*) tagKey
      tagValue:(NSString*)tagValue { 
     self.tagKey = tagKey;               
     self.tagValue = tagValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self tagKey])
    {
        [result setValue:[self tagKey] forKey:@"tagKey"];
    }
    if([self tagValue])
    {
        [result setValue:[self tagValue] forKey:@"tagValue"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.tagKey = [dictionary objectForKey:@"tagKey"];
    self.tagValue = [dictionary objectForKey:@"tagValue"];
    return self;
}
 @end
@implementation SubnetSpec
-(id) initWithAz:(NSString*) az
      vpcId:(NSString*)vpcId
      cidr:(NSString*)cidr
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue { 
     self.az = az;               
     self.vpcId = vpcId;               
     self.cidr = cidr;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self cidr])
    {
        [result setValue:[self cidr] forKey:@"cidr"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.cidr = [dictionary objectForKey:@"cidr"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
}
 @end
@implementation ServerGroupSpec
-(id) initWithLoadBalancerId:(NSString*) loadBalancerId
      name:(NSString*)name { 
     self.loadBalancerId = loadBalancerId;               
     self.name = name;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    self.name = [dictionary objectForKey:@"name"];
    return self;
}
 @end
@implementation ListenerSpec
-(id) initWithLoadBalancerId:(NSString*) loadBalancerId
      protocol:(NSString*)protocol
      port:(NSNumber*)port
      algorithm:(NSString*)algorithm
      stickySession:(NSString*)stickySession
      realIp:(NSString*)realIp
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      healthCheck:(NSString*)healthCheck
      healthCheckTimeout:(NSNumber*)healthCheckTimeout
      healthCheckInterval:(NSNumber*)healthCheckInterval
      healthyThreshold:(NSNumber*)healthyThreshold
      unhealthyThreshold:(NSNumber*)unhealthyThreshold
      serverGroupId:(NSString*)serverGroupId { 
     self.loadBalancerId = loadBalancerId;               
     self.protocol = protocol;               
     self.port = port;               
     self.algorithm = algorithm;               
     self.stickySession = stickySession;               
     self.realIp = realIp;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.healthCheck = healthCheck;               
     self.healthCheckTimeout = healthCheckTimeout;               
     self.healthCheckInterval = healthCheckInterval;               
     self.healthyThreshold = healthyThreshold;               
     self.unhealthyThreshold = unhealthyThreshold;               
     self.serverGroupId = serverGroupId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self protocol])
    {
        [result setValue:[self protocol] forKey:@"protocol"];
    }
    if([self port])
    {
        [result setValue:[self port] forKey:@"port"];
    }
    if([self algorithm])
    {
        [result setValue:[self algorithm] forKey:@"algorithm"];
    }
    if([self stickySession])
    {
        [result setValue:[self stickySession] forKey:@"stickySession"];
    }
    if([self realIp])
    {
        [result setValue:[self realIp] forKey:@"realIp"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self healthCheck])
    {
        [result setValue:[self healthCheck] forKey:@"healthCheck"];
    }
    if([self healthCheckTimeout])
    {
        [result setValue:[self healthCheckTimeout] forKey:@"healthCheckTimeout"];
    }
    if([self healthCheckInterval])
    {
        [result setValue:[self healthCheckInterval] forKey:@"healthCheckInterval"];
    }
    if([self healthyThreshold])
    {
        [result setValue:[self healthyThreshold] forKey:@"healthyThreshold"];
    }
    if([self unhealthyThreshold])
    {
        [result setValue:[self unhealthyThreshold] forKey:@"unhealthyThreshold"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    self.protocol = [dictionary objectForKey:@"protocol"];
    self.port = [dictionary objectForKey:@"port"];
    self.algorithm = [dictionary objectForKey:@"algorithm"];
    self.stickySession = [dictionary objectForKey:@"stickySession"];
    self.realIp = [dictionary objectForKey:@"realIp"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.healthCheck = [dictionary objectForKey:@"healthCheck"];
    self.healthCheckTimeout = [dictionary objectForKey:@"healthCheckTimeout"];
    self.healthCheckInterval = [dictionary objectForKey:@"healthCheckInterval"];
    self.healthyThreshold = [dictionary objectForKey:@"healthyThreshold"];
    self.unhealthyThreshold = [dictionary objectForKey:@"unhealthyThreshold"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    return self;
}
 @end
@implementation MetricValue
-(id) initWithTimestamp:(NSNumber*) timestamp
      value:(NSString*)value { 
     self.timestamp = timestamp;               
     self.value = value;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self timestamp])
    {
        [result setValue:[self timestamp] forKey:@"timestamp"];
    }
    if([self value])
    {
        [result setValue:[self value] forKey:@"value"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.timestamp = [dictionary objectForKey:@"timestamp"];
    self.value = [dictionary objectForKey:@"value"];
    return self;
}
 @end
@implementation ServerSpec
-(id) initWithInstanceId:(NSString*) instanceId
      port:(NSNumber*)port
      weight:(NSNumber*)weight { 
     self.instanceId = instanceId;               
     self.port = port;               
     self.weight = weight;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self port])
    {
        [result setValue:[self port] forKey:@"port"];
    }
    if([self weight])
    {
        [result setValue:[self weight] forKey:@"weight"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.port = [dictionary objectForKey:@"port"];
    self.weight = [dictionary objectForKey:@"weight"];
    return self;
}
 @end
@implementation ReinstallInstanceSpec
-(id) initWithAz:(NSString*) az
      imageType:(NSString*)imageType
      osTypeId:(NSString*)osTypeId
      sysRaidTypeId:(NSString*)sysRaidTypeId
      keepData:(NSString*)keepData
      dataRaidTypeId:(NSString*)dataRaidTypeId
      password:(NSString*)password
      hostname:(NSString*)hostname
      userData:(NSString*)userData
      keypairId:(NSString*)keypairId { 
     self.az = az;               
     self.imageType = imageType;               
     self.osTypeId = osTypeId;               
     self.sysRaidTypeId = sysRaidTypeId;               
     self.keepData = keepData;               
     self.dataRaidTypeId = dataRaidTypeId;               
     self.password = password;               
     self.hostname = hostname;               
     self.userData = userData;               
     self.keypairId = keypairId;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self imageType])
    {
        [result setValue:[self imageType] forKey:@"imageType"];
    }
    if([self osTypeId])
    {
        [result setValue:[self osTypeId] forKey:@"osTypeId"];
    }
    if([self sysRaidTypeId])
    {
        [result setValue:[self sysRaidTypeId] forKey:@"sysRaidTypeId"];
    }
    if([self keepData])
    {
        [result setValue:[self keepData] forKey:@"keepData"];
    }
    if([self dataRaidTypeId])
    {
        [result setValue:[self dataRaidTypeId] forKey:@"dataRaidTypeId"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self hostname])
    {
        [result setValue:[self hostname] forKey:@"hostname"];
    }
    if([self userData])
    {
        [result setValue:[self userData] forKey:@"userData"];
    }
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    self.imageType = [dictionary objectForKey:@"imageType"];
    self.osTypeId = [dictionary objectForKey:@"osTypeId"];
    self.sysRaidTypeId = [dictionary objectForKey:@"sysRaidTypeId"];
    self.keepData = [dictionary objectForKey:@"keepData"];
    self.dataRaidTypeId = [dictionary objectForKey:@"dataRaidTypeId"];
    self.password = [dictionary objectForKey:@"password"];
    self.hostname = [dictionary objectForKey:@"hostname"];
    self.userData = [dictionary objectForKey:@"userData"];
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    return self;
}
 @end
@implementation Subnet
-(id) initWithRegion:(NSString*) region
      az:(NSString*)az
      subnetId:(NSString*)subnetId
      name:(NSString*)name
      cidr:(NSString*)cidr
      vpcId:(NSString*)vpcId
      vpcName:(NSString*)vpcName
      availableIpCount:(NSNumber*)availableIpCount
      totalIpCount:(NSNumber*)totalIpCount
      networkType:(NSString*)networkType
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime { 
     self.region = region;               
     self.az = az;               
     self.subnetId = subnetId;               
     self.name = name;               
     self.cidr = cidr;               
     self.vpcId = vpcId;               
     self.vpcName = vpcName;               
     self.availableIpCount = availableIpCount;               
     self.totalIpCount = totalIpCount;               
     self.networkType = networkType;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self cidr])
    {
        [result setValue:[self cidr] forKey:@"cidr"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self vpcName])
    {
        [result setValue:[self vpcName] forKey:@"vpcName"];
    }
    if([self availableIpCount])
    {
        [result setValue:[self availableIpCount] forKey:@"availableIpCount"];
    }
    if([self totalIpCount])
    {
        [result setValue:[self totalIpCount] forKey:@"totalIpCount"];
    }
    if([self networkType])
    {
        [result setValue:[self networkType] forKey:@"networkType"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.region = [dictionary objectForKey:@"region"];
    self.az = [dictionary objectForKey:@"az"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    self.name = [dictionary objectForKey:@"name"];
    self.cidr = [dictionary objectForKey:@"cidr"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.vpcName = [dictionary objectForKey:@"vpcName"];
    self.availableIpCount = [dictionary objectForKey:@"availableIpCount"];
    self.totalIpCount = [dictionary objectForKey:@"totalIpCount"];
    self.networkType = [dictionary objectForKey:@"networkType"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    return self;
}
 @end
@implementation ElasticIp
-(id) initWithRegion:(NSString*) region
      elasticIpId:(NSString*)elasticIpId
      elasticIpValue:(NSString*)elasticIpValue
      bandwidth:(NSNumber*)bandwidth
      lineType:(NSString*)lineType
      status:(NSString*)status
      instanceType:(NSString*)instanceType
      instanceId:(NSString*)instanceId
      createTime:(NSString*)createTime
      charge:(Charge*)charge { 
     self.region = region;               
     self.elasticIpId = elasticIpId;               
     self.elasticIpValue = elasticIpValue;               
     self.bandwidth = bandwidth;               
     self.lineType = lineType;               
     self.status = status;               
     self.instanceType = instanceType;               
     self.instanceId = instanceId;               
     self.createTime = createTime;               
     self.charge = charge;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self elasticIpValue])
    {
        [result setValue:[self elasticIpValue] forKey:@"elasticIp"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self lineType])
    {
        [result setValue:[self lineType] forKey:@"lineType"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self instanceType])
    {
        [result setValue:[self instanceType] forKey:@"instanceType"];
    }
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self charge])
    {
        [result setValue:[[self charge] dictionary]forKey:@"charge"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.region = [dictionary objectForKey:@"region"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.elasticIpValue = [dictionary objectForKey:@"elasticIp"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.lineType = [dictionary objectForKey:@"lineType"];
    self.status = [dictionary objectForKey:@"status"];
    self.instanceType = [dictionary objectForKey:@"instanceType"];
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.charge = [[Charge alloc]initWithDic:[dictionary objectForKey:@"charge"]];
    return self;
}
 @end
@implementation ServerGroup
-(id) initWithLoadBalancerId:(NSString*) loadBalancerId
      serverGroupId:(NSString*)serverGroupId
      name:(NSString*)name { 
     self.loadBalancerId = loadBalancerId;               
     self.serverGroupId = serverGroupId;               
     self.name = name;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self serverGroupId])
    {
        [result setValue:[self serverGroupId] forKey:@"serverGroupId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    self.serverGroupId = [dictionary objectForKey:@"serverGroupId"];
    self.name = [dictionary objectForKey:@"name"];
    return self;
}
 @end
@implementation Az
-(id) initWithRegion:(NSString*) region
      azValue:(NSString*)azValue
      azName:(NSString*)azName { 
     self.region = region;               
     self.azValue = azValue;               
     self.azName = azName;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self azValue])
    {
        [result setValue:[self azValue] forKey:@"az"];
    }
    if([self azName])
    {
        [result setValue:[self azName] forKey:@"azName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.region = [dictionary objectForKey:@"region"];
    self.azValue = [dictionary objectForKey:@"az"];
    self.azName = [dictionary objectForKey:@"azName"];
    return self;
}
 @end
@implementation ElasticIpSpec
-(id) initWithBandwidth:(NSNumber*) bandwidth
      count:(NSNumber*)count
      charge:(ChargeSpec*)charge { 
     self.bandwidth = bandwidth;               
     self.count = count;               
     self.charge = charge;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self count])
    {
        [result setValue:[self count] forKey:@"count"];
    }
    if([self charge])
    {
        [result setValue:[[self charge] dictionary]forKey:@"charge"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.count = [dictionary objectForKey:@"count"];
    self.charge = [[ChargeSpec alloc]initWithDic:[dictionary objectForKey:@"charge"]];
    return self;
}
 @end
@implementation Keypair
-(id) initWithKeypairId:(NSString*) keypairId
      region:(NSString*)region
      name:(NSString*)name
      publicKey:(NSString*)publicKey
      fingerPrint:(NSString*)fingerPrint
      createTime:(NSString*)createTime
      updateTime:(NSString*)updateTime { 
     self.keypairId = keypairId;               
     self.region = region;               
     self.name = name;               
     self.publicKey = publicKey;               
     self.fingerPrint = fingerPrint;               
     self.createTime = createTime;               
     self.updateTime = updateTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self publicKey])
    {
        [result setValue:[self publicKey] forKey:@"publicKey"];
    }
    if([self fingerPrint])
    {
        [result setValue:[self fingerPrint] forKey:@"fingerPrint"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self updateTime])
    {
        [result setValue:[self updateTime] forKey:@"updateTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    self.region = [dictionary objectForKey:@"region"];
    self.name = [dictionary objectForKey:@"name"];
    self.publicKey = [dictionary objectForKey:@"publicKey"];
    self.fingerPrint = [dictionary objectForKey:@"fingerPrint"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.updateTime = [dictionary objectForKey:@"updateTime"];
    return self;
}
 @end
@implementation LoadBalancerSpec
-(id) initWithNetType:(NSString*) netType
      ipAddressType:(NSString*)ipAddressType
      vpcId:(NSString*)vpcId
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      applyElasticIp:(NSNumber*)applyElasticIp
      bandwidth:(NSNumber*)bandwidth
      charge:(ChargeSpec*)charge { 
     self.netType = netType;               
     self.ipAddressType = ipAddressType;               
     self.vpcId = vpcId;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.applyElasticIp = applyElasticIp;               
     self.bandwidth = bandwidth;               
     self.charge = charge;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self netType])
    {
        [result setValue:[self netType] forKey:@"netType"];
    }
    if([self ipAddressType])
    {
        [result setValue:[self ipAddressType] forKey:@"ipAddressType"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self applyElasticIp])
    {
        [result setValue:[self applyElasticIp] forKey:@"applyElasticIp"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self charge])
    {
        [result setValue:[[self charge] dictionary]forKey:@"charge"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.netType = [dictionary objectForKey:@"netType"];
    self.ipAddressType = [dictionary objectForKey:@"ipAddressType"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.applyElasticIp = [dictionary objectForKey:@"applyElasticIp"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.charge = [[ChargeSpec alloc]initWithDic:[dictionary objectForKey:@"charge"]];
    return self;
}
 @end
@implementation Raid
-(id) initWithVolumeType:(NSString*) volumeType
      volumeDetail:(NSString*)volumeDetail
      raidTypeId:(NSString*)raidTypeId
      raidType:(NSString*)raidType
      deviceType:(NSString*)deviceType
      descriptionValue:(NSString*)descriptionValue { 
     self.volumeType = volumeType;               
     self.volumeDetail = volumeDetail;               
     self.raidTypeId = raidTypeId;               
     self.raidType = raidType;               
     self.deviceType = deviceType;               
     self.descriptionValue = descriptionValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self volumeType])
    {
        [result setValue:[self volumeType] forKey:@"volumeType"];
    }
    if([self volumeDetail])
    {
        [result setValue:[self volumeDetail] forKey:@"volumeDetail"];
    }
    if([self raidTypeId])
    {
        [result setValue:[self raidTypeId] forKey:@"raidTypeId"];
    }
    if([self raidType])
    {
        [result setValue:[self raidType] forKey:@"raidType"];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.volumeType = [dictionary objectForKey:@"volumeType"];
    self.volumeDetail = [dictionary objectForKey:@"volumeDetail"];
    self.raidTypeId = [dictionary objectForKey:@"raidTypeId"];
    self.raidType = [dictionary objectForKey:@"raidType"];
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
}
 @end
@implementation Instance
-(id) initWithInstanceId:(NSString*) instanceId
      region:(NSString*)region
      az:(NSString*)az
      deviceType:(NSString*)deviceType
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      status:(NSString*)status
      enableInternet:(NSString*)enableInternet
      enableIpv6:(NSString*)enableIpv6
      bandwidth:(NSNumber*)bandwidth
      imageType:(NSString*)imageType
      osTypeId:(NSString*)osTypeId
      osName:(NSString*)osName
      osType:(NSString*)osType
      osVersion:(NSString*)osVersion
      sysRaidTypeId:(NSString*)sysRaidTypeId
      sysRaidType:(NSString*)sysRaidType
      dataRaidTypeId:(NSString*)dataRaidTypeId
      dataRaidType:(NSString*)dataRaidType
      networkType:(NSString*)networkType
      vpcId:(NSString*)vpcId
      vpcName:(NSString*)vpcName
      subnetId:(NSString*)subnetId
      subnetName:(NSString*)subnetName
      privateIp:(NSString*)privateIp
      lineType:(NSString*)lineType
      elasticIpId:(NSString*)elasticIpId
      publicIp:(NSString*)publicIp
      publicIpv6:(NSString*)publicIpv6
      keypairId:(NSString*)keypairId
      agentStatus:(NSString*)agentStatus
      charge:(Charge*)charge { 
     self.instanceId = instanceId;               
     self.region = region;               
     self.az = az;               
     self.deviceType = deviceType;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.status = status;               
     self.enableInternet = enableInternet;               
     self.enableIpv6 = enableIpv6;               
     self.bandwidth = bandwidth;               
     self.imageType = imageType;               
     self.osTypeId = osTypeId;               
     self.osName = osName;               
     self.osType = osType;               
     self.osVersion = osVersion;               
     self.sysRaidTypeId = sysRaidTypeId;               
     self.sysRaidType = sysRaidType;               
     self.dataRaidTypeId = dataRaidTypeId;               
     self.dataRaidType = dataRaidType;               
     self.networkType = networkType;               
     self.vpcId = vpcId;               
     self.vpcName = vpcName;               
     self.subnetId = subnetId;               
     self.subnetName = subnetName;               
     self.privateIp = privateIp;               
     self.lineType = lineType;               
     self.elasticIpId = elasticIpId;               
     self.publicIp = publicIp;               
     self.publicIpv6 = publicIpv6;               
     self.keypairId = keypairId;               
     self.agentStatus = agentStatus;               
     self.charge = charge;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceId])
    {
        [result setValue:[self instanceId] forKey:@"instanceId"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self enableInternet])
    {
        [result setValue:[self enableInternet] forKey:@"enableInternet"];
    }
    if([self enableIpv6])
    {
        [result setValue:[self enableIpv6] forKey:@"enableIpv6"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self imageType])
    {
        [result setValue:[self imageType] forKey:@"imageType"];
    }
    if([self osTypeId])
    {
        [result setValue:[self osTypeId] forKey:@"osTypeId"];
    }
    if([self osName])
    {
        [result setValue:[self osName] forKey:@"osName"];
    }
    if([self osType])
    {
        [result setValue:[self osType] forKey:@"osType"];
    }
    if([self osVersion])
    {
        [result setValue:[self osVersion] forKey:@"osVersion"];
    }
    if([self sysRaidTypeId])
    {
        [result setValue:[self sysRaidTypeId] forKey:@"sysRaidTypeId"];
    }
    if([self sysRaidType])
    {
        [result setValue:[self sysRaidType] forKey:@"sysRaidType"];
    }
    if([self dataRaidTypeId])
    {
        [result setValue:[self dataRaidTypeId] forKey:@"dataRaidTypeId"];
    }
    if([self dataRaidType])
    {
        [result setValue:[self dataRaidType] forKey:@"dataRaidType"];
    }
    if([self networkType])
    {
        [result setValue:[self networkType] forKey:@"networkType"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self vpcName])
    {
        [result setValue:[self vpcName] forKey:@"vpcName"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    if([self subnetName])
    {
        [result setValue:[self subnetName] forKey:@"subnetName"];
    }
    if([self privateIp])
    {
        [result setValue:[self privateIp] forKey:@"privateIp"];
    }
    if([self lineType])
    {
        [result setValue:[self lineType] forKey:@"lineType"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self publicIp])
    {
        [result setValue:[self publicIp] forKey:@"publicIp"];
    }
    if([self publicIpv6])
    {
        [result setValue:[self publicIpv6] forKey:@"publicIpv6"];
    }
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    if([self agentStatus])
    {
        [result setValue:[self agentStatus] forKey:@"agentStatus"];
    }
    if([self charge])
    {
        [result setValue:[[self charge] dictionary]forKey:@"charge"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instanceId = [dictionary objectForKey:@"instanceId"];
    self.region = [dictionary objectForKey:@"region"];
    self.az = [dictionary objectForKey:@"az"];
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.status = [dictionary objectForKey:@"status"];
    self.enableInternet = [dictionary objectForKey:@"enableInternet"];
    self.enableIpv6 = [dictionary objectForKey:@"enableIpv6"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.imageType = [dictionary objectForKey:@"imageType"];
    self.osTypeId = [dictionary objectForKey:@"osTypeId"];
    self.osName = [dictionary objectForKey:@"osName"];
    self.osType = [dictionary objectForKey:@"osType"];
    self.osVersion = [dictionary objectForKey:@"osVersion"];
    self.sysRaidTypeId = [dictionary objectForKey:@"sysRaidTypeId"];
    self.sysRaidType = [dictionary objectForKey:@"sysRaidType"];
    self.dataRaidTypeId = [dictionary objectForKey:@"dataRaidTypeId"];
    self.dataRaidType = [dictionary objectForKey:@"dataRaidType"];
    self.networkType = [dictionary objectForKey:@"networkType"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.vpcName = [dictionary objectForKey:@"vpcName"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    self.subnetName = [dictionary objectForKey:@"subnetName"];
    self.privateIp = [dictionary objectForKey:@"privateIp"];
    self.lineType = [dictionary objectForKey:@"lineType"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.publicIp = [dictionary objectForKey:@"publicIp"];
    self.publicIpv6 = [dictionary objectForKey:@"publicIpv6"];
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    self.agentStatus = [dictionary objectForKey:@"agentStatus"];
    self.charge = [[Charge alloc]initWithDic:[dictionary objectForKey:@"charge"]];
    return self;
}
 @end
@implementation RenewalResource
-(id) initWithResourceId:(NSString*) resourceId
      resourceName:(NSString*)resourceName
      remark:(NSString*)remark
      bind:(NSArray<RenewalResource*>*)bind { 
     self.resourceId = resourceId;               
     self.resourceName = resourceName;               
     self.remark = remark;               
     self.bind = bind;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self resourceId])
    {
        [result setValue:[self resourceId] forKey:@"resourceId"];
    }
    if([self resourceName])
    {
        [result setValue:[self resourceName] forKey:@"resourceName"];
    }
    if([self remark])
    {
        [result setValue:[self remark] forKey:@"remark"];
    }
    if([self bind])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self bind] count]; i++) {
            RenewalResource* item = [[self bind] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"bind"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.resourceId = [dictionary objectForKey:@"resourceId"];
    self.resourceName = [dictionary objectForKey:@"resourceName"];
    self.remark = [dictionary objectForKey:@"remark"];
    NSArray* bindArray = [dictionary objectForKey:@"bind"];
    if(bindArray&&![bindArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bindArray count];i++)
        {
            RenewalResource* item = [[RenewalResource alloc]initWithDic:[bindArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.bind = propertyArray;
    }
    return self;
}
 @end
@implementation LoadBalancer
-(id) initWithLoadBalancerId:(NSString*) loadBalancerId
      region:(NSString*)region
      ipAddressType:(NSString*)ipAddressType
      netType:(NSString*)netType
      vpcId:(NSString*)vpcId
      elasticIpId:(NSString*)elasticIpId
      publicIp:(NSString*)publicIp
      bandwidth:(NSNumber*)bandwidth
      status:(NSString*)status
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime
      charge:(Charge*)charge { 
     self.loadBalancerId = loadBalancerId;               
     self.region = region;               
     self.ipAddressType = ipAddressType;               
     self.netType = netType;               
     self.vpcId = vpcId;               
     self.elasticIpId = elasticIpId;               
     self.publicIp = publicIp;               
     self.bandwidth = bandwidth;               
     self.status = status;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
     self.charge = charge;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self loadBalancerId])
    {
        [result setValue:[self loadBalancerId] forKey:@"loadBalancerId"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self ipAddressType])
    {
        [result setValue:[self ipAddressType] forKey:@"ipAddressType"];
    }
    if([self netType])
    {
        [result setValue:[self netType] forKey:@"netType"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self elasticIpId])
    {
        [result setValue:[self elasticIpId] forKey:@"elasticIpId"];
    }
    if([self publicIp])
    {
        [result setValue:[self publicIp] forKey:@"publicIp"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self status])
    {
        [result setValue:[self status] forKey:@"status"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    if([self charge])
    {
        [result setValue:[[self charge] dictionary]forKey:@"charge"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.loadBalancerId = [dictionary objectForKey:@"loadBalancerId"];
    self.region = [dictionary objectForKey:@"region"];
    self.ipAddressType = [dictionary objectForKey:@"ipAddressType"];
    self.netType = [dictionary objectForKey:@"netType"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.elasticIpId = [dictionary objectForKey:@"elasticIpId"];
    self.publicIp = [dictionary objectForKey:@"publicIp"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.status = [dictionary objectForKey:@"status"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    self.charge = [[Charge alloc]initWithDic:[dictionary objectForKey:@"charge"]];
    return self;
}
 @end
@implementation VpcSpec
-(id) initWithCidr:(NSString*) cidr
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue { 
     self.cidr = cidr;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self cidr])
    {
        [result setValue:[self cidr] forKey:@"cidr"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cidr = [dictionary objectForKey:@"cidr"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    return self;
}
 @end
@implementation DeviceType
-(id) initWithDeviceTypeValue:(NSString*) deviceTypeValue
      name:(NSString*)name
      family:(NSString*)family
      region:(NSString*)region
      cpuConcise:(NSString*)cpuConcise
      cpuDetail:(NSString*)cpuDetail
      memConcise:(NSString*)memConcise
      memDetail:(NSString*)memDetail
      ifConcise:(NSString*)ifConcise
      ifDetail:(NSString*)ifDetail
      gpuConcise:(NSString*)gpuConcise
      gpuDetail:(NSString*)gpuDetail
      systemDiskAmount:(NSNumber*)systemDiskAmount
      systemDiskSize:(NSNumber*)systemDiskSize
      systemDiskModel:(NSString*)systemDiskModel
      dataDiskAmount:(NSNumber*)dataDiskAmount
      dataDiskSize:(NSNumber*)dataDiskSize
      dataDiskModel:(NSString*)dataDiskModel
      isSoldOut:(NSNumber*)isSoldOut { 
     self.deviceTypeValue = deviceTypeValue;               
     self.name = name;               
     self.family = family;               
     self.region = region;               
     self.cpuConcise = cpuConcise;               
     self.cpuDetail = cpuDetail;               
     self.memConcise = memConcise;               
     self.memDetail = memDetail;               
     self.ifConcise = ifConcise;               
     self.ifDetail = ifDetail;               
     self.gpuConcise = gpuConcise;               
     self.gpuDetail = gpuDetail;               
     self.systemDiskAmount = systemDiskAmount;               
     self.systemDiskSize = systemDiskSize;               
     self.systemDiskModel = systemDiskModel;               
     self.dataDiskAmount = dataDiskAmount;               
     self.dataDiskSize = dataDiskSize;               
     self.dataDiskModel = dataDiskModel;               
     self.isSoldOut = isSoldOut;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deviceTypeValue])
    {
        [result setValue:[self deviceTypeValue] forKey:@"deviceType"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self family])
    {
        [result setValue:[self family] forKey:@"family"];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self cpuConcise])
    {
        [result setValue:[self cpuConcise] forKey:@"cpuConcise"];
    }
    if([self cpuDetail])
    {
        [result setValue:[self cpuDetail] forKey:@"cpuDetail"];
    }
    if([self memConcise])
    {
        [result setValue:[self memConcise] forKey:@"memConcise"];
    }
    if([self memDetail])
    {
        [result setValue:[self memDetail] forKey:@"memDetail"];
    }
    if([self ifConcise])
    {
        [result setValue:[self ifConcise] forKey:@"ifConcise"];
    }
    if([self ifDetail])
    {
        [result setValue:[self ifDetail] forKey:@"ifDetail"];
    }
    if([self gpuConcise])
    {
        [result setValue:[self gpuConcise] forKey:@"gpuConcise"];
    }
    if([self gpuDetail])
    {
        [result setValue:[self gpuDetail] forKey:@"gpuDetail"];
    }
    if([self systemDiskAmount])
    {
        [result setValue:[self systemDiskAmount] forKey:@"systemDiskAmount"];
    }
    if([self systemDiskSize])
    {
        [result setValue:[self systemDiskSize] forKey:@"systemDiskSize"];
    }
    if([self systemDiskModel])
    {
        [result setValue:[self systemDiskModel] forKey:@"systemDiskModel"];
    }
    if([self dataDiskAmount])
    {
        [result setValue:[self dataDiskAmount] forKey:@"dataDiskAmount"];
    }
    if([self dataDiskSize])
    {
        [result setValue:[self dataDiskSize] forKey:@"dataDiskSize"];
    }
    if([self dataDiskModel])
    {
        [result setValue:[self dataDiskModel] forKey:@"dataDiskModel"];
    }
    if([self isSoldOut])
    {
        [result setValue:[self isSoldOut] forKey:@"isSoldOut"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deviceTypeValue = [dictionary objectForKey:@"deviceType"];
    self.name = [dictionary objectForKey:@"name"];
    self.family = [dictionary objectForKey:@"family"];
    self.region = [dictionary objectForKey:@"region"];
    self.cpuConcise = [dictionary objectForKey:@"cpuConcise"];
    self.cpuDetail = [dictionary objectForKey:@"cpuDetail"];
    self.memConcise = [dictionary objectForKey:@"memConcise"];
    self.memDetail = [dictionary objectForKey:@"memDetail"];
    self.ifConcise = [dictionary objectForKey:@"ifConcise"];
    self.ifDetail = [dictionary objectForKey:@"ifDetail"];
    self.gpuConcise = [dictionary objectForKey:@"gpuConcise"];
    self.gpuDetail = [dictionary objectForKey:@"gpuDetail"];
    self.systemDiskAmount = [dictionary objectForKey:@"systemDiskAmount"];
    self.systemDiskSize = [dictionary objectForKey:@"systemDiskSize"];
    self.systemDiskModel = [dictionary objectForKey:@"systemDiskModel"];
    self.dataDiskAmount = [dictionary objectForKey:@"dataDiskAmount"];
    self.dataDiskSize = [dictionary objectForKey:@"dataDiskSize"];
    self.dataDiskModel = [dictionary objectForKey:@"dataDiskModel"];
    self.isSoldOut = [dictionary objectForKey:@"isSoldOut"];
    return self;
}
 @end
@implementation Vpc
-(id) initWithRegion:(NSString*) region
      vpcId:(NSString*)vpcId
      name:(NSString*)name
      cidr:(NSString*)cidr
      descriptionValue:(NSString*)descriptionValue
      createTime:(NSString*)createTime { 
     self.region = region;               
     self.vpcId = vpcId;               
     self.name = name;               
     self.cidr = cidr;               
     self.descriptionValue = descriptionValue;               
     self.createTime = createTime;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    if([self vpcId])
    {
        [result setValue:[self vpcId] forKey:@"vpcId"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self cidr])
    {
        [result setValue:[self cidr] forKey:@"cidr"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self createTime])
    {
        [result setValue:[self createTime] forKey:@"createTime"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.region = [dictionary objectForKey:@"region"];
    self.vpcId = [dictionary objectForKey:@"vpcId"];
    self.name = [dictionary objectForKey:@"name"];
    self.cidr = [dictionary objectForKey:@"cidr"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.createTime = [dictionary objectForKey:@"createTime"];
    return self;
}
 @end
@implementation Region
-(id) initWithRegionValue:(NSString*) regionValue
      regionName:(NSString*)regionName
      azs:(NSArray<Az*>*)azs { 
     self.regionValue = regionValue;               
     self.regionName = regionName;               
     self.azs = azs;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self regionValue])
    {
        [result setValue:[self regionValue] forKey:@"region"];
    }
    if([self regionName])
    {
        [result setValue:[self regionName] forKey:@"regionName"];
    }
    if([self azs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self azs] count]; i++) {
            Az* item = [[self azs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"azs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.regionValue = [dictionary objectForKey:@"region"];
    self.regionName = [dictionary objectForKey:@"regionName"];
    NSArray* azsArray = [dictionary objectForKey:@"azs"];
    if(azsArray&&![azsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [azsArray count];i++)
        {
            Az* item = [[Az alloc]initWithDic:[azsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.azs = propertyArray;
    }
    return self;
}
 @end
@implementation InstanceSpec
-(id) initWithAz:(NSString*) az
      deviceType:(NSString*)deviceType
      hostname:(NSString*)hostname
      imageType:(NSString*)imageType
      osTypeId:(NSString*)osTypeId
      sysRaidTypeId:(NSString*)sysRaidTypeId
      dataRaidTypeId:(NSString*)dataRaidTypeId
      subnetId:(NSString*)subnetId
      enableInternet:(NSString*)enableInternet
      enableIpv6:(NSString*)enableIpv6
      networkType:(NSString*)networkType
      cidr:(NSString*)cidr
      privateIp:(NSString*)privateIp
      lineType:(NSString*)lineType
      bandwidth:(NSNumber*)bandwidth
      name:(NSString*)name
      descriptionValue:(NSString*)descriptionValue
      password:(NSString*)password
      count:(NSNumber*)count
      userData:(NSString*)userData
      keypairId:(NSString*)keypairId
      charge:(ChargeSpec*)charge { 
     self.az = az;               
     self.deviceType = deviceType;               
     self.hostname = hostname;               
     self.imageType = imageType;               
     self.osTypeId = osTypeId;               
     self.sysRaidTypeId = sysRaidTypeId;               
     self.dataRaidTypeId = dataRaidTypeId;               
     self.subnetId = subnetId;               
     self.enableInternet = enableInternet;               
     self.enableIpv6 = enableIpv6;               
     self.networkType = networkType;               
     self.cidr = cidr;               
     self.privateIp = privateIp;               
     self.lineType = lineType;               
     self.bandwidth = bandwidth;               
     self.name = name;               
     self.descriptionValue = descriptionValue;               
     self.password = password;               
     self.count = count;               
     self.userData = userData;               
     self.keypairId = keypairId;               
     self.charge = charge;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    if([self deviceType])
    {
        [result setValue:[self deviceType] forKey:@"deviceType"];
    }
    if([self hostname])
    {
        [result setValue:[self hostname] forKey:@"hostname"];
    }
    if([self imageType])
    {
        [result setValue:[self imageType] forKey:@"imageType"];
    }
    if([self osTypeId])
    {
        [result setValue:[self osTypeId] forKey:@"osTypeId"];
    }
    if([self sysRaidTypeId])
    {
        [result setValue:[self sysRaidTypeId] forKey:@"sysRaidTypeId"];
    }
    if([self dataRaidTypeId])
    {
        [result setValue:[self dataRaidTypeId] forKey:@"dataRaidTypeId"];
    }
    if([self subnetId])
    {
        [result setValue:[self subnetId] forKey:@"subnetId"];
    }
    if([self enableInternet])
    {
        [result setValue:[self enableInternet] forKey:@"enableInternet"];
    }
    if([self enableIpv6])
    {
        [result setValue:[self enableIpv6] forKey:@"enableIpv6"];
    }
    if([self networkType])
    {
        [result setValue:[self networkType] forKey:@"networkType"];
    }
    if([self cidr])
    {
        [result setValue:[self cidr] forKey:@"cidr"];
    }
    if([self privateIp])
    {
        [result setValue:[self privateIp] forKey:@"privateIp"];
    }
    if([self lineType])
    {
        [result setValue:[self lineType] forKey:@"lineType"];
    }
    if([self bandwidth])
    {
        [result setValue:[self bandwidth] forKey:@"bandwidth"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    if([self descriptionValue])
    {
        [result setValue:[self descriptionValue] forKey:@"description"];
    }
    if([self password])
    {
        [result setValue:[self password] forKey:@"password"];
    }
    if([self count])
    {
        [result setValue:[self count] forKey:@"count"];
    }
    if([self userData])
    {
        [result setValue:[self userData] forKey:@"userData"];
    }
    if([self keypairId])
    {
        [result setValue:[self keypairId] forKey:@"keypairId"];
    }
    if([self charge])
    {
        [result setValue:[[self charge] dictionary]forKey:@"charge"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    self.deviceType = [dictionary objectForKey:@"deviceType"];
    self.hostname = [dictionary objectForKey:@"hostname"];
    self.imageType = [dictionary objectForKey:@"imageType"];
    self.osTypeId = [dictionary objectForKey:@"osTypeId"];
    self.sysRaidTypeId = [dictionary objectForKey:@"sysRaidTypeId"];
    self.dataRaidTypeId = [dictionary objectForKey:@"dataRaidTypeId"];
    self.subnetId = [dictionary objectForKey:@"subnetId"];
    self.enableInternet = [dictionary objectForKey:@"enableInternet"];
    self.enableIpv6 = [dictionary objectForKey:@"enableIpv6"];
    self.networkType = [dictionary objectForKey:@"networkType"];
    self.cidr = [dictionary objectForKey:@"cidr"];
    self.privateIp = [dictionary objectForKey:@"privateIp"];
    self.lineType = [dictionary objectForKey:@"lineType"];
    self.bandwidth = [dictionary objectForKey:@"bandwidth"];
    self.name = [dictionary objectForKey:@"name"];
    self.descriptionValue = [dictionary objectForKey:@"description"];
    self.password = [dictionary objectForKey:@"password"];
    self.count = [dictionary objectForKey:@"count"];
    self.userData = [dictionary objectForKey:@"userData"];
    self.keypairId = [dictionary objectForKey:@"keypairId"];
    self.charge = [[ChargeSpec alloc]initWithDic:[dictionary objectForKey:@"charge"]];
    return self;
}
 @end
@implementation MetricData
-(id) initWithData:(NSArray<MetricValue*>*) data
      tags:(NSArray<MetricTag*>*)tags
      metric:(MetricInfo*)metric { 
     self.data = data;               
     self.tags = tags;               
     self.metric = metric;               
    return self;
}

-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self data])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self data] count]; i++) {
            MetricValue* item = [[self data] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"data"];
    }
    if([self tags])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self tags] count]; i++) {
            MetricTag* item = [[self tags] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"tags"];
    }
    if([self metric])
    {
        [result setValue:[[self metric] dictionary]forKey:@"metric"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dataArray = [dictionary objectForKey:@"data"];
    if(dataArray&&![dataArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dataArray count];i++)
        {
            MetricValue* item = [[MetricValue alloc]initWithDic:[dataArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.data = propertyArray;
    }
    NSArray* tagsArray = [dictionary objectForKey:@"tags"];
    if(tagsArray&&![tagsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [tagsArray count];i++)
        {
            MetricTag* item = [[MetricTag alloc]initWithDic:[tagsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.tags = propertyArray;
    }
    self.metric = [[MetricInfo alloc]initWithDic:[dictionary objectForKey:@"metric"]];
    return self;
}
 @end
 
 


