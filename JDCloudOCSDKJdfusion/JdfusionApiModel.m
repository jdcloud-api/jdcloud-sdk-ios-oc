/* Copyright 2018 JDCLOUD.COM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Rds-Database
与RDS数据库相关的接口

OpenAPI spec version: v1
Contact: 

NOTE: This class is auto generated by the jdcloud code generator program.
*/

#import <Foundation/Foundation.h>
#import <JDCloudOCSDKJdfusion/JdfusionApiModel.h>


@implementation JdfusionGetVpcSubnetByIdResult
-(id) initWithSubnet:(SubnetDesInfo*) subnet { 
    self.subnet = subnet;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnet])
    {
        [result setValue:[[self subnet] dictionary]forKey:@"subnet"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnet = [[SubnetDesInfo alloc]initWithDic:[dictionary objectForKey:@"subnet"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcSubnetByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcSubnetByIdResult* result = [[JdfusionGetVpcSubnetByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcSubnetByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcSubnetRequest
-(id) initWithRegion:(NSString *)regionId
subnet:(CreateSubnet*)subnet { 
    self.regionId = regionId;
    self.subnet = subnet;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
subnet:(CreateSubnet*)subnet { 
    self.regionId = regionId;
    self.version = version;
    self.subnet = subnet;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self subnet])
    {
        [result setValue:[[self subnet] dictionary]forKey:@"subnet"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.subnet = [[CreateSubnet alloc]initWithDic:[dictionary objectForKey:@"subnet"]];
    return self;
} 

@end
@implementation JdfusionGetVpcSubnetsResult
-(id) initWithSubnets:(NSArray<SubnetDesInfo*>*) subnets { 
    self.subnets = subnets;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self subnets])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self subnets] count]; i++) {
            SubnetDesInfo* item = [[self subnets] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"subnets"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* subnetsArray = [dictionary objectForKey:@"subnets"];
    if(subnetsArray&&![subnetsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [subnetsArray count];i++)
        {
            SubnetDesInfo* item = [[SubnetDesInfo alloc]initWithDic:[subnetsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.subnets = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionDeleteVpcSubnetByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetVpcSubnetsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionCreateVpcSubnetResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcSubnetsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcSubnetsResult* result = [[JdfusionGetVpcSubnetsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcSubnetsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionDeleteVpcSubnetByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVpcSubnetByIdResult* result = [[JdfusionDeleteVpcSubnetByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVpcSubnetByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVpcSubnetByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcSubnetResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcSubnetResult* result = [[JdfusionCreateVpcSubnetResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcSubnetResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcSubnetByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateVpcResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcResult* result = [[JdfusionCreateVpcResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcsResult
-(id) initWithVpcs:(NSArray<VpcListInfo*>*) vpcs { 
    self.vpcs = vpcs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vpcs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self vpcs] count]; i++) {
            VpcListInfo* item = [[self vpcs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"vpcs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* vpcsArray = [dictionary objectForKey:@"vpcs"];
    if(vpcsArray&&![vpcsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [vpcsArray count];i++)
        {
            VpcListInfo* item = [[VpcListInfo alloc]initWithDic:[vpcsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.vpcs = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionGetVpcByIdResult
-(id) initWithVpc:(VpcInfoDetail*) vpc { 
    self.vpc = vpc;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vpc])
    {
        [result setValue:[[self vpc] dictionary]forKey:@"vpc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vpc = [[VpcInfoDetail alloc]initWithDic:[dictionary objectForKey:@"vpc"]];
    return self;
} 

@end
@implementation JdfusionGetVpcsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetVpcByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionGetVpcsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcsResult* result = [[JdfusionGetVpcsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVpcByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateVpcRequest
-(id) initWithRegion:(NSString *)regionId
vpc:(VpcInfo*)vpc { 
    self.regionId = regionId;
    self.vpc = vpc;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
vpc:(VpcInfo*)vpc { 
    self.regionId = regionId;
    self.version = version;
    self.vpc = vpc;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self vpc])
    {
        [result setValue:[[self vpc] dictionary]forKey:@"vpc"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vpc = [[VpcInfo alloc]initWithDic:[dictionary objectForKey:@"vpc"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcByIdResult* result = [[JdfusionGetVpcByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVpcByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVpcByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVpcByIdResult* result = [[JdfusionDeleteVpcByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVpcByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVmInstancesByIdResult
-(id) initWithVm:(VmInfoDetail*) vm { 
    self.vm = vm;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vm])
    {
        [result setValue:[[self vm] dictionary]forKey:@"vm"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vm = [[VmInfoDetail alloc]initWithDic:[dictionary objectForKey:@"vm"]];
    return self;
} 

@end
  
@implementation JdfusionGetVmInstancesByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVmInstancesByIdResult* result = [[JdfusionGetVmInstancesByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVmInstancesByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVmInstanceByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateVmInstanceRequest
-(id) initWithRegion:(NSString *)regionId
vm:(CreateVm*)vm { 
    self.regionId = regionId;
    self.vm = vm;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
vm:(CreateVm*)vm { 
    self.regionId = regionId;
    self.version = version;
    self.vm = vm;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self vm])
    {
        [result setValue:[[self vm] dictionary]forKey:@"vm"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vm = [[CreateVm alloc]initWithDic:[dictionary objectForKey:@"vm"]];
    return self;
} 

@end
@implementation JdfusionStartVmInstanceByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVmInstancesByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteVmInstanceByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVmInstanceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVmInstanceByIdResult* result = [[JdfusionDeleteVmInstanceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVmInstanceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionRebootVmInstanceByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateVmInstanceResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionStopVmInstanceByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionStopVmInstanceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStopVmInstanceByIdResult* result = [[JdfusionStopVmInstanceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStopVmInstanceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionStopVmInstanceByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVmInstancesResult
-(id) initWithVms:(NSArray<VmInfo*>*) vms { 
    self.vms = vms;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vms])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self vms] count]; i++) {
            VmInfo* item = [[self vms] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"vms"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* vmsArray = [dictionary objectForKey:@"vms"];
    if(vmsArray&&![vmsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [vmsArray count];i++)
        {
            VmInfo* item = [[VmInfo alloc]initWithDic:[vmsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.vms = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetVmInstancesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVmInstancesResult* result = [[JdfusionGetVmInstancesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVmInstancesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionRebootVmInstanceByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionRebootVmInstanceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionRebootVmInstanceByIdResult* result = [[JdfusionRebootVmInstanceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionRebootVmInstanceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionStartVmInstanceByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetVmInstancesRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionCreateVmInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVmInstanceResult* result = [[JdfusionCreateVmInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVmInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionStartVmInstanceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStartVmInstanceByIdResult* result = [[JdfusionStartVmInstanceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStartVmInstanceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteRdsByInstIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteRdsByInstIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteRdsByInstIdResult* result = [[JdfusionDeleteRdsByInstIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteRdsByInstIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetRdsInstancesRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionCreateRdsInstanceRequest
-(id) initWithRegion:(NSString *)regionId
instance:(CreateRDSInstance*)instance { 
    self.regionId = regionId;
    self.instance = instance;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instance:(CreateRDSInstance*)instance { 
    self.regionId = regionId;
    self.version = version;
    self.instance = instance;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instance])
    {
        [result setValue:[[self instance] dictionary]forKey:@"instance"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instance = [[CreateRDSInstance alloc]initWithDic:[dictionary objectForKey:@"instance"]];
    return self;
} 

@end
@implementation JdfusionGetRdsInstancesResult
-(id) initWithInstances:(NSArray<RdsInstanceDetailInfo*>*) instances { 
    self.instances = instances;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instances])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self instances] count]; i++) {
            RdsInstanceDetailInfo* item = [[self instances] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"instances"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* instancesArray = [dictionary objectForKey:@"instances"];
    if(instancesArray&&![instancesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [instancesArray count];i++)
        {
            RdsInstanceDetailInfo* item = [[RdsInstanceDetailInfo alloc]initWithDic:[instancesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.instances = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionGetRdsByInstIdRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.instId = instId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    return self;
} 

@end
@implementation JdfusionDeleteRdsByInstIdRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.instId = instId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    return self;
} 

@end
@implementation JdfusionCreateRdsInstanceResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionGetRdsByInstIdResult
-(id) initWithInstance:(RdsInstanceDetailInfo*) instance { 
    self.instance = instance;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instance])
    {
        [result setValue:[[self instance] dictionary]forKey:@"instance"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instance = [[RdsInstanceDetailInfo alloc]initWithDic:[dictionary objectForKey:@"instance"]];
    return self;
} 

@end
  
@implementation JdfusionGetRdsInstancesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsInstancesResult* result = [[JdfusionGetRdsInstancesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsInstancesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetRdsByInstIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsByInstIdResult* result = [[JdfusionGetRdsByInstIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsByInstIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionCreateRdsInstanceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateRdsInstanceResult* result = [[JdfusionCreateRdsInstanceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateRdsInstanceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDeploymentResultResult
-(id) initWithTask:(TaskInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TaskInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionGetDeploymentsResult
-(id) initWithDeployments:(NSArray<DeploymentInfo*>*) deployments { 
    self.deployments = deployments;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployments])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self deployments] count]; i++) {
            DeploymentInfo* item = [[self deployments] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"deployments"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* deploymentsArray = [dictionary objectForKey:@"deployments"];
    if(deploymentsArray&&![deploymentsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [deploymentsArray count];i++)
        {
            DeploymentInfo* item = [[DeploymentInfo alloc]initWithDic:[deploymentsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.deployments = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetDeploymentsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDeploymentsResult* result = [[JdfusionGetDeploymentsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDeploymentsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDeploymentsResultsByIdRecordResult
-(id) initWithTask:(TaskInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TaskInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionDeleteDeploymentResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteDeploymentResult* result = [[JdfusionDeleteDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionReverseDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
reverse:(ReverseDeploymentInfo*)reverse { 
    self.regionId = regionId;
    self.reverse = reverse;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
reverse:(ReverseDeploymentInfo*)reverse { 
    self.regionId = regionId;
    self.version = version;
    self.reverse = reverse;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self reverse])
    {
        [result setValue:[[self reverse] dictionary]forKey:@"reverse"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.reverse = [[ReverseDeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"reverse"]];
    return self;
} 

@end
@implementation JdfusionCreateDeploymentResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
  
@implementation JdfusionCreateDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateDeploymentResult* result = [[JdfusionCreateDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionReverseDeploymentResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
  
@implementation JdfusionReverseDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionReverseDeploymentResult* result = [[JdfusionReverseDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionReverseDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCloneDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
deployment:(Deployment*)deployment
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.deployment = deployment;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
deployment:(Deployment*)deployment
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.deployment = deployment;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[Deployment alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionEditDeploymentResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
  
@implementation JdfusionEditDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionEditDeploymentResult* result = [[JdfusionEditDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionEditDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDeploymentVersionsRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionRollbackDeploymentsVersionRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue
version_id:(NSString*)version_id { 
    self.regionId = regionId;
    self.idValue = idValue;
    self.version_id = version_id;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue
version_id:(NSString*)version_id { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    self.version_id = version_id;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    if([self version_id])
    {
        [result setValue:[self version_id] forKey:@"version_id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    self.version_id = [dictionary objectForKey:@"version_id"];
    return self;
} 

@end
@implementation JdfusionCreateDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
deployment:(DeploymentInfo*)deployment { 
    self.regionId = regionId;
    self.deployment = deployment;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
deployment:(DeploymentInfo*)deployment { 
    self.regionId = regionId;
    self.version = version;
    self.deployment = deployment;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
@implementation JdfusionRollbackDeploymentsVersionResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
  
@implementation JdfusionRollbackDeploymentsVersionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionRollbackDeploymentsVersionResult* result = [[JdfusionRollbackDeploymentsVersionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionRollbackDeploymentsVersionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDeploymentsByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionGetDeploymentsResultsByIdRecordResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDeploymentsResultsByIdRecordResult* result = [[JdfusionGetDeploymentsResultsByIdRecordResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDeploymentsResultsByIdRecordResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionEditDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
deployment:(DeploymentInfo*)deployment
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.deployment = deployment;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
deployment:(DeploymentInfo*)deployment
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.deployment = deployment;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetDeploymentsVersionResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
@implementation JdfusionApplyDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
apply:(Apply*)apply
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.apply = apply;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
apply:(Apply*)apply
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.apply = apply;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self apply])
    {
        [result setValue:[[self apply] dictionary]forKey:@"apply"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.apply = [[Apply alloc]initWithDic:[dictionary objectForKey:@"apply"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetDeploymentVersionsResult
-(id) initWithVersions:(NSArray<DeploymentApplyInfo*>*) versions { 
    self.versions = versions;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self versions])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self versions] count]; i++) {
            DeploymentApplyInfo* item = [[self versions] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"versions"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* versionsArray = [dictionary objectForKey:@"versions"];
    if(versionsArray&&![versionsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [versionsArray count];i++)
        {
            DeploymentApplyInfo* item = [[DeploymentApplyInfo alloc]initWithDic:[versionsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.versions = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetDeploymentVersionsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDeploymentVersionsResult* result = [[JdfusionGetDeploymentVersionsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDeploymentVersionsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetDeploymentResultResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDeploymentResultResult* result = [[JdfusionGetDeploymentResultResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDeploymentResultResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCloneDeploymentResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
  
@implementation JdfusionCloneDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCloneDeploymentResult* result = [[JdfusionCloneDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCloneDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDeploymentsByIdResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
@implementation JdfusionGetDeploymentResultRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionApplyDeploymentResult
-(id) initWithDeployment:(DeploymentInfo*) deployment { 
    self.deployment = deployment;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self deployment])
    {
        [result setValue:[[self deployment] dictionary]forKey:@"deployment"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.deployment = [[DeploymentInfo alloc]initWithDic:[dictionary objectForKey:@"deployment"]];
    return self;
} 

@end
@implementation JdfusionGetDeploymentsResultsByIdRecordRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue
record:(NSString*)record { 
    self.regionId = regionId;
    self.idValue = idValue;
    self.record = record;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue
record:(NSString*)record { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    self.record = record;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    if([self record])
    {
        [result setValue:[self record] forKey:@"record"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    self.record = [dictionary objectForKey:@"record"];
    return self;
} 

@end
@implementation JdfusionGetDeploymentsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionDeleteDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionGetDeploymentsVersionResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDeploymentsVersionResult* result = [[JdfusionGetDeploymentsVersionResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDeploymentsVersionResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDryrunDeploymentResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDryrunDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDryrunDeploymentResult* result = [[JdfusionDryrunDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDryrunDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionApplyDeploymentResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionApplyDeploymentResult* result = [[JdfusionApplyDeploymentResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionApplyDeploymentResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDeploymentsVersionRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue
version_id:(NSString*)version_id { 
    self.regionId = regionId;
    self.idValue = idValue;
    self.version_id = version_id;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue
version_id:(NSString*)version_id { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    self.version_id = version_id;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    if([self version_id])
    {
        [result setValue:[self version_id] forKey:@"version_id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    self.version_id = [dictionary objectForKey:@"version_id"];
    return self;
} 

@end
@implementation JdfusionDryrunDeploymentRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionGetDeploymentsByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDeploymentsByIdResult* result = [[JdfusionGetDeploymentsByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDeploymentsByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVmKeypairByNameRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name { 
    self.regionId = regionId;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation JdfusionCreateVmKeypairResult
-(id) initWithTasks:(NSArray<ResourceTFInfo*>*) tasks { 
    self.tasks = tasks;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self tasks])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self tasks] count]; i++) {
            ResourceTFInfo* item = [[self tasks] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"tasks"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* tasksArray = [dictionary objectForKey:@"tasks"];
    if(tasksArray&&![tasksArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [tasksArray count];i++)
        {
            ResourceTFInfo* item = [[ResourceTFInfo alloc]initWithDic:[tasksArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.tasks = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionGetVmKeypairsByNameRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name { 
    self.regionId = regionId;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation JdfusionGetVmKeypairsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetVmKeypairsResult
-(id) initWithKeypairs:(NSArray<KeypairInfo*>*) keypairs { 
    self.keypairs = keypairs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self keypairs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self keypairs] count]; i++) {
            KeypairInfo* item = [[self keypairs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"keypairs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* keypairsArray = [dictionary objectForKey:@"keypairs"];
    if(keypairsArray&&![keypairsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [keypairsArray count];i++)
        {
            KeypairInfo* item = [[KeypairInfo alloc]initWithDic:[keypairsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.keypairs = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionGetVmKeypairsByNameResult
-(id) initWithKeypair:(KeypairInfo*) keypair { 
    self.keypair = keypair;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self keypair])
    {
        [result setValue:[[self keypair] dictionary]forKey:@"keypair"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypair = [[KeypairInfo alloc]initWithDic:[dictionary objectForKey:@"keypair"]];
    return self;
} 

@end
@implementation JdfusionCreateVmKeypairRequest
-(id) initWithRegion:(NSString *)regionId
keypair:(CreateKeypair*)keypair { 
    self.regionId = regionId;
    self.keypair = keypair;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
keypair:(CreateKeypair*)keypair { 
    self.regionId = regionId;
    self.version = version;
    self.keypair = keypair;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self keypair])
    {
        [result setValue:[[self keypair] dictionary]forKey:@"keypair"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.keypair = [[CreateKeypair alloc]initWithDic:[dictionary objectForKey:@"keypair"]];
    return self;
} 

@end
  
@implementation JdfusionCreateVmKeypairResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVmKeypairResult* result = [[JdfusionCreateVmKeypairResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVmKeypairResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVmKeypairByNameResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVmKeypairByNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVmKeypairByNameResult* result = [[JdfusionDeleteVmKeypairByNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVmKeypairByNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetVmKeypairsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVmKeypairsResult* result = [[JdfusionGetVmKeypairsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVmKeypairsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetVmKeypairsByNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVmKeypairsByNameResult* result = [[JdfusionGetVmKeypairsByNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVmKeypairsByNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateTransferTaskRequest
-(id) initWithRegion:(NSString *)regionId
task:(TransferSimpleTaskInfo*)task { 
    self.regionId = regionId;
    self.task = task;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
task:(TransferSimpleTaskInfo*)task { 
    self.regionId = regionId;
    self.version = version;
    self.task = task;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TransferSimpleTaskInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionStopTransferTaskRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateTransferTaskResult
-(id) initWithTask:(TransferTaskInfoWithID*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TransferTaskInfoWithID alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionStopTransferTaskResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetTransferTaskProgressResult
-(id) initWithTask:(TransferTaskProgressInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TransferTaskProgressInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionDeleteTransferTaskResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionStartTransferTaskRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetTransferTaskFailedFilesResult
-(id) initWithTask:(TransferTaskFailedDetailInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TransferTaskFailedDetailInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionGetTransferTasksResult
-(id) initWithTasks:(NSArray<TransferTaskInfoWithID*>*) tasks { 
    self.tasks = tasks;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self tasks])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self tasks] count]; i++) {
            TransferTaskInfoWithID* item = [[self tasks] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"tasks"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* tasksArray = [dictionary objectForKey:@"tasks"];
    if(tasksArray&&![tasksArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [tasksArray count];i++)
        {
            TransferTaskInfoWithID* item = [[TransferTaskInfoWithID alloc]initWithDic:[tasksArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.tasks = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetTransferTaskFailedFilesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetTransferTaskFailedFilesResult* result = [[JdfusionGetTransferTaskFailedFilesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetTransferTaskFailedFilesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteTransferTaskRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionStartTransferTaskResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionStartTransferTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStartTransferTaskResult* result = [[JdfusionStartTransferTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStartTransferTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTransferTaskByIdResult
-(id) initWithTask:(TransferTaskInfoWithID*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TransferTaskInfoWithID alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionGetTransferTasksRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionCreateTransferTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateTransferTaskResult* result = [[JdfusionCreateTransferTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateTransferTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTransferTaskProgressRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionStopTransferTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStopTransferTaskResult* result = [[JdfusionStopTransferTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStopTransferTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTransferTaskByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionEditTransferTaskResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionEditTransferTaskRequest
-(id) initWithRegion:(NSString *)regionId
task:(TransferTaskInfo*)task
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.task = task;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
task:(TransferTaskInfo*)task
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.task = task;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TransferTaskInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionEditTransferTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionEditTransferTaskResult* result = [[JdfusionEditTransferTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionEditTransferTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionDeleteTransferTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteTransferTaskResult* result = [[JdfusionDeleteTransferTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteTransferTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetTransferTaskProgressResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetTransferTaskProgressResult* result = [[JdfusionGetTransferTaskProgressResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetTransferTaskProgressResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTransferTaskFailedFilesRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionGetTransferTaskByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetTransferTaskByIdResult* result = [[JdfusionGetTransferTaskByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetTransferTaskByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetTransferTasksResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetTransferTasksResult* result = [[JdfusionGetTransferTasksResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetTransferTasksResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetBucketByNameResult
-(id) initWithBucket:(OssBucketDetailInfo*) bucket { 
    self.bucket = bucket;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self bucket])
    {
        [result setValue:[[self bucket] dictionary]forKey:@"bucket"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.bucket = [[OssBucketDetailInfo alloc]initWithDic:[dictionary objectForKey:@"bucket"]];
    return self;
} 

@end
@implementation JdfusionCreateBucketResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateBucketResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateBucketResult* result = [[JdfusionCreateBucketResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateBucketResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetBucketFilesResult
-(id) initWithIsTruncated:(NSNumber*) isTruncated
        marker:(NSString*)marker
        files:(NSArray<OssFileInfo*>*)files { 
    self.isTruncated = isTruncated;               
    self.marker = marker;               
    self.files = files;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self isTruncated])
    {
        [result setValue:[self isTruncated] forKey:@"isTruncated"];
    }
    if([self marker])
    {
        [result setValue:[self marker] forKey:@"marker"];
    }
    if([self files])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self files] count]; i++) {
            OssFileInfo* item = [[self files] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"files"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.isTruncated = [dictionary objectForKey:@"isTruncated"];
    self.marker = [dictionary objectForKey:@"marker"];
    NSArray* filesArray = [dictionary objectForKey:@"files"];
    if(filesArray&&![filesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [filesArray count];i++)
        {
            OssFileInfo* item = [[OssFileInfo alloc]initWithDic:[filesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.files = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetBucketFilesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetBucketFilesResult* result = [[JdfusionGetBucketFilesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetBucketFilesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteBucketResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetBucketsResult
-(id) initWithBuckets:(NSArray<OssBucketInfo*>*) buckets { 
    self.buckets = buckets;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self buckets])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self buckets] count]; i++) {
            OssBucketInfo* item = [[self buckets] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"buckets"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* bucketsArray = [dictionary objectForKey:@"buckets"];
    if(bucketsArray&&![bucketsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [bucketsArray count];i++)
        {
            OssBucketInfo* item = [[OssBucketInfo alloc]initWithDic:[bucketsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.buckets = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetBucketsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetBucketsResult* result = [[JdfusionGetBucketsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetBucketsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetBucketByNameRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name { 
    self.regionId = regionId;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation JdfusionCreateBucketRequest
-(id) initWithRegion:(NSString *)regionId
bucket:(CreateOSSBucket*)bucket { 
    self.regionId = regionId;
    self.bucket = bucket;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
bucket:(CreateOSSBucket*)bucket { 
    self.regionId = regionId;
    self.version = version;
    self.bucket = bucket;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self bucket])
    {
        [result setValue:[[self bucket] dictionary]forKey:@"bucket"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.bucket = [[CreateOSSBucket alloc]initWithDic:[dictionary objectForKey:@"bucket"]];
    return self;
} 

@end
@implementation JdfusionDeleteBucketRequest
-(id) initWithRegion:(NSString *)regionId
name:(NSString*)name { 
    self.regionId = regionId;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation JdfusionGetBucketsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionGetBucketByNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetBucketByNameResult* result = [[JdfusionGetBucketByNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetBucketByNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionDeleteBucketResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteBucketResult* result = [[JdfusionDeleteBucketResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteBucketResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetBucketFilesRequest
-(id) initWithRegion:(NSString *)regionId
marker:(NSString*)marker
name:(NSString*)name { 
    self.regionId = regionId;
    self.marker = marker;
    self.name = name;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
marker:(NSString*)marker
name:(NSString*)name { 
    self.regionId = regionId;
    self.version = version;
    self.marker = marker;
    self.name = name;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self marker])
    {
        [result setValue:[self marker] forKey:@"marker"];
    }
    if([self name])
    {
        [result setValue:[self name] forKey:@"name"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.marker = [dictionary objectForKey:@"marker"];
    self.name = [dictionary objectForKey:@"name"];
    return self;
} 

@end
@implementation JdfusionCreateChannelRequest
-(id) initWithRegion:(NSString *)regionId
channel:(ChannelInfo*)channel { 
    self.regionId = regionId;
    self.channel = channel;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
channel:(ChannelInfo*)channel { 
    self.regionId = regionId;
    self.version = version;
    self.channel = channel;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self channel])
    {
        [result setValue:[[self channel] dictionary]forKey:@"channel"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.channel = [[ChannelInfo alloc]initWithDic:[dictionary objectForKey:@"channel"]];
    return self;
} 

@end
@implementation JdfusionCreateDatasourceResult
-(id) initWithDatasource:(DatasourceInfo*) datasource { 
    self.datasource = datasource;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self datasource])
    {
        [result setValue:[[self datasource] dictionary]forKey:@"datasource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.datasource = [[DatasourceInfo alloc]initWithDic:[dictionary objectForKey:@"datasource"]];
    return self;
} 

@end
@implementation JdfusionDeleteChannelResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionStartChannelResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionStopChannelResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionStopChannelResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStopChannelResult* result = [[JdfusionStopChannelResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStopChannelResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionStartChannelResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStartChannelResult* result = [[JdfusionStartChannelResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStartChannelResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteDatasourceResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteDatasourceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteDatasourceResult* result = [[JdfusionDeleteDatasourceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteDatasourceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDatasourcesResult
-(id) initWithDatasources:(NSArray<DatasourceInfo*>*) datasources { 
    self.datasources = datasources;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self datasources])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self datasources] count]; i++) {
            DatasourceInfo* item = [[self datasources] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"datasources"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* datasourcesArray = [dictionary objectForKey:@"datasources"];
    if(datasourcesArray&&![datasourcesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [datasourcesArray count];i++)
        {
            DatasourceInfo* item = [[DatasourceInfo alloc]initWithDic:[datasourcesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.datasources = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetDatasourcesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDatasourcesResult* result = [[JdfusionGetDatasourcesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDatasourcesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionStartChannelRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetDatasourcesRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionDeleteDatasourceRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionCreateDatasourceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateDatasourceResult* result = [[JdfusionCreateDatasourceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateDatasourceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateDatasourceRequest
-(id) initWithRegion:(NSString *)regionId
datasource:(DatasourceInfo*)datasource { 
    self.regionId = regionId;
    self.datasource = datasource;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
datasource:(DatasourceInfo*)datasource { 
    self.regionId = regionId;
    self.version = version;
    self.datasource = datasource;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self datasource])
    {
        [result setValue:[[self datasource] dictionary]forKey:@"datasource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.datasource = [[DatasourceInfo alloc]initWithDic:[dictionary objectForKey:@"datasource"]];
    return self;
} 

@end
@implementation JdfusionStopChannelRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateChannelResult
-(id) initWithChannel:(ChannelInfo*) channel { 
    self.channel = channel;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self channel])
    {
        [result setValue:[[self channel] dictionary]forKey:@"channel"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.channel = [[ChannelInfo alloc]initWithDic:[dictionary objectForKey:@"channel"]];
    return self;
} 

@end
  
@implementation JdfusionCreateChannelResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateChannelResult* result = [[JdfusionCreateChannelResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateChannelResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionDeleteChannelResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteChannelResult* result = [[JdfusionDeleteChannelResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteChannelResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetChannelsResult
-(id) initWithChannels:(NSArray<ChannelInfo*>*) channels { 
    self.channels = channels;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self channels])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self channels] count]; i++) {
            ChannelInfo* item = [[self channels] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"channels"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* channelsArray = [dictionary objectForKey:@"channels"];
    if(channelsArray&&![channelsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [channelsArray count];i++)
        {
            ChannelInfo* item = [[ChannelInfo alloc]initWithDic:[channelsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.channels = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionDeleteChannelRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetChannelsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionGetChannelsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetChannelsResult* result = [[JdfusionGetChannelsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetChannelsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcSecurityGroupsResult
-(id) initWithSecurityGroups:(NSArray<SecurityGroupInfo*>*) securityGroups { 
    self.securityGroups = securityGroups;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self securityGroups])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self securityGroups] count]; i++) {
            SecurityGroupInfo* item = [[self securityGroups] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"securityGroups"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* securityGroupsArray = [dictionary objectForKey:@"securityGroups"];
    if(securityGroupsArray&&![securityGroupsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [securityGroupsArray count];i++)
        {
            SecurityGroupInfo* item = [[SecurityGroupInfo alloc]initWithDic:[securityGroupsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.securityGroups = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetVpcSecurityGroupsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcSecurityGroupsResult* result = [[JdfusionGetVpcSecurityGroupsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcSecurityGroupsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcSecurityGroupByIdResult
-(id) initWithSecurityGroup:(SecurityGroupDetail*) securityGroup { 
    self.securityGroup = securityGroup;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self securityGroup])
    {
        [result setValue:[[self securityGroup] dictionary]forKey:@"securityGroup"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.securityGroup = [[SecurityGroupDetail alloc]initWithDic:[dictionary objectForKey:@"securityGroup"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcSecurityGroupByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcSecurityGroupByIdResult* result = [[JdfusionGetVpcSecurityGroupByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcSecurityGroupByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcSecurityGroupResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionDeleteSecurityGroupsRuleResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteSecurityGroupsRuleResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteSecurityGroupsRuleResult* result = [[JdfusionDeleteSecurityGroupsRuleResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteSecurityGroupsRuleResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateSecurityGroupsRuleResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateSecurityGroupsRuleResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateSecurityGroupsRuleResult* result = [[JdfusionCreateSecurityGroupsRuleResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateSecurityGroupsRuleResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcSecurityGroupByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteSecurityGroupsRuleRequest
-(id) initWithRegion:(NSString *)regionId
ruleType:(NSString*)ruleType
protocol:(NSString*)protocol
fromPort:(NSString*)fromPort
toPort:(NSString*)toPort
nicType:(NSString*)nicType
policy:(NSString*)policy
priority:(NSString*)priority
cidrIp:(NSString*)cidrIp
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.ruleType = ruleType;
    self.protocol = protocol;
    self.fromPort = fromPort;
    self.toPort = toPort;
    self.nicType = nicType;
    self.policy = policy;
    self.priority = priority;
    self.cidrIp = cidrIp;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
ruleType:(NSString*)ruleType
protocol:(NSString*)protocol
fromPort:(NSString*)fromPort
toPort:(NSString*)toPort
nicType:(NSString*)nicType
policy:(NSString*)policy
priority:(NSString*)priority
cidrIp:(NSString*)cidrIp
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.ruleType = ruleType;
    self.protocol = protocol;
    self.fromPort = fromPort;
    self.toPort = toPort;
    self.nicType = nicType;
    self.policy = policy;
    self.priority = priority;
    self.cidrIp = cidrIp;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self ruleType])
    {
        [result setValue:[self ruleType] forKey:@"ruleType"];
    }
    if([self protocol])
    {
        [result setValue:[self protocol] forKey:@"protocol"];
    }
    if([self fromPort])
    {
        [result setValue:[self fromPort] forKey:@"fromPort"];
    }
    if([self toPort])
    {
        [result setValue:[self toPort] forKey:@"toPort"];
    }
    if([self nicType])
    {
        [result setValue:[self nicType] forKey:@"nicType"];
    }
    if([self policy])
    {
        [result setValue:[self policy] forKey:@"policy"];
    }
    if([self priority])
    {
        [result setValue:[self priority] forKey:@"priority"];
    }
    if([self cidrIp])
    {
        [result setValue:[self cidrIp] forKey:@"cidrIp"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.ruleType = [dictionary objectForKey:@"ruleType"];
    self.protocol = [dictionary objectForKey:@"protocol"];
    self.fromPort = [dictionary objectForKey:@"fromPort"];
    self.toPort = [dictionary objectForKey:@"toPort"];
    self.nicType = [dictionary objectForKey:@"nicType"];
    self.policy = [dictionary objectForKey:@"policy"];
    self.priority = [dictionary objectForKey:@"priority"];
    self.cidrIp = [dictionary objectForKey:@"cidrIp"];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteVpcSecurityGroupByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVpcSecurityGroupByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVpcSecurityGroupByIdResult* result = [[JdfusionDeleteVpcSecurityGroupByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVpcSecurityGroupByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcSecurityGroupRequest
-(id) initWithRegion:(NSString *)regionId
securityGroup:(CreateSecurityGroup*)securityGroup { 
    self.regionId = regionId;
    self.securityGroup = securityGroup;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
securityGroup:(CreateSecurityGroup*)securityGroup { 
    self.regionId = regionId;
    self.version = version;
    self.securityGroup = securityGroup;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self securityGroup])
    {
        [result setValue:[[self securityGroup] dictionary]forKey:@"securityGroup"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.securityGroup = [[CreateSecurityGroup alloc]initWithDic:[dictionary objectForKey:@"securityGroup"]];
    return self;
} 

@end
@implementation JdfusionGetVpcSecurityGroupsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionDeleteVpcSecurityGroupByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateSecurityGroupsRuleRequest
-(id) initWithRegion:(NSString *)regionId
sgRule:(CreateSgRule*)sgRule
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.sgRule = sgRule;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
sgRule:(CreateSgRule*)sgRule
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.sgRule = sgRule;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self sgRule])
    {
        [result setValue:[[self sgRule] dictionary]forKey:@"sgRule"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.sgRule = [[CreateSgRule alloc]initWithDic:[dictionary objectForKey:@"sgRule"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcSecurityGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcSecurityGroupResult* result = [[JdfusionCreateVpcSecurityGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcSecurityGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTaskInfoByIdResult
-(id) initWithTask:(TaskInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[TaskInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionGetTaskInfoByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetTaskInfoByIdResult* result = [[JdfusionGetTaskInfoByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetTaskInfoByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTaskInfoHistoryByIdRequest
-(id) initWithRegion:(NSString *)regionId
task:(NSString*)task { 
    self.regionId = regionId;
    self.task = task;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
task:(NSString*)task { 
    self.regionId = regionId;
    self.version = version;
    self.task = task;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self task])
    {
        [result setValue:[self task] forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [dictionary objectForKey:@"task"];
    return self;
} 

@end
@implementation JdfusionGetTaskInfoHistoryByIdResult
-(id) initWithTasks:(NSArray<TaskInfo*>*) tasks { 
    self.tasks = tasks;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self tasks])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self tasks] count]; i++) {
            TaskInfo* item = [[self tasks] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"tasks"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* tasksArray = [dictionary objectForKey:@"tasks"];
    if(tasksArray&&![tasksArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [tasksArray count];i++)
        {
            TaskInfo* item = [[TaskInfo alloc]initWithDic:[tasksArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.tasks = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetTaskInfoHistoryByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetTaskInfoHistoryByIdResult* result = [[JdfusionGetTaskInfoHistoryByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetTaskInfoHistoryByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetTaskInfoByIdRequest
-(id) initWithRegion:(NSString *)regionId
fileName:(NSString*)fileName
task:(NSString*)task { 
    self.regionId = regionId;
    self.fileName = fileName;
    self.task = task;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
fileName:(NSString*)fileName
task:(NSString*)task { 
    self.regionId = regionId;
    self.version = version;
    self.fileName = fileName;
    self.task = task;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self fileName])
    {
        [result setValue:[self fileName] forKey:@"fileName"];
    }
    if([self task])
    {
        [result setValue:[self task] forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.fileName = [dictionary objectForKey:@"fileName"];
    self.task = [dictionary objectForKey:@"task"];
    return self;
} 

@end
@implementation JdfusionCreateRdsAccountsResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionGetRdsAccountsByInstIdAndAccountNameResult
-(id) initWithAccount:(RdsAccountInfo*) account { 
    self.account = account;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self account])
    {
        [result setValue:[[self account] dictionary]forKey:@"account"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.account = [[RdsAccountInfo alloc]initWithDic:[dictionary objectForKey:@"account"]];
    return self;
} 

@end
  
@implementation JdfusionGetRdsAccountsByInstIdAndAccountNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsAccountsByInstIdAndAccountNameResult* result = [[JdfusionGetRdsAccountsByInstIdAndAccountNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsAccountsByInstIdAndAccountNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGrantRdsAccountsByTaskResult
-(id) initWithCloud:(ResourceTFInfo*) cloud { 
    self.cloud = cloud;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self cloud])
    {
        [result setValue:[[self cloud] dictionary]forKey:@"cloud"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloud = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"cloud"]];
    return self;
} 

@end
  
@implementation JdfusionGrantRdsAccountsByTaskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGrantRdsAccountsByTaskResult* result = [[JdfusionGrantRdsAccountsByTaskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGrantRdsAccountsByTaskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGrantRdsAccountResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionGrantRdsAccountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGrantRdsAccountResult* result = [[JdfusionGrantRdsAccountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGrantRdsAccountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteRdsAccountResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteRdsAccountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteRdsAccountResult* result = [[JdfusionDeleteRdsAccountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteRdsAccountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteRdsAccountRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation JdfusionGetRdsAccountsByInstIdResult
-(id) initWithAccounts:(NSArray<RdsAccountInfo*>*) accounts { 
    self.accounts = accounts;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self accounts])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self accounts] count]; i++) {
            RdsAccountInfo* item = [[self accounts] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"accounts"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* accountsArray = [dictionary objectForKey:@"accounts"];
    if(accountsArray&&![accountsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [accountsArray count];i++)
        {
            RdsAccountInfo* item = [[RdsAccountInfo alloc]initWithDic:[accountsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.accounts = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetRdsAccountsByInstIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsAccountsByInstIdResult* result = [[JdfusionGetRdsAccountsByInstIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsAccountsByInstIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionCreateRdsAccountsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateRdsAccountsResult* result = [[JdfusionCreateRdsAccountsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateRdsAccountsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionRevokeRdsAccountResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionRevokeRdsAccountResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionRevokeRdsAccountResult* result = [[JdfusionRevokeRdsAccountResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionRevokeRdsAccountResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGrantRdsAccountRequest
-(id) initWithRegion:(NSString *)regionId
dbPrivilegeInfo:(DbPrivilegeInfo*)dbPrivilegeInfo
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.dbPrivilegeInfo = dbPrivilegeInfo;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
dbPrivilegeInfo:(DbPrivilegeInfo*)dbPrivilegeInfo
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.dbPrivilegeInfo = dbPrivilegeInfo;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self dbPrivilegeInfo])
    {
        [result setValue:[[self dbPrivilegeInfo] dictionary]forKey:@"dbPrivilegeInfo"];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.dbPrivilegeInfo = [[DbPrivilegeInfo alloc]initWithDic:[dictionary objectForKey:@"dbPrivilegeInfo"]];
    self.instId = [dictionary objectForKey:@"instId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation JdfusionCreateRdsAccountsRequest
-(id) initWithRegion:(NSString *)regionId
account:(CreateRDSAccount*)account
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.account = account;
    self.instId = instId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
account:(CreateRDSAccount*)account
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.version = version;
    self.account = account;
    self.instId = instId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self account])
    {
        [result setValue:[[self account] dictionary]forKey:@"account"];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.account = [[CreateRDSAccount alloc]initWithDic:[dictionary objectForKey:@"account"]];
    self.instId = [dictionary objectForKey:@"instId"];
    return self;
} 

@end
@implementation JdfusionGrantRdsAccountsByTaskRequest
-(id) initWithRegion:(NSString *)regionId
info:(DbPrivilegeInfo*)info
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.info = info;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
info:(DbPrivilegeInfo*)info
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.info = info;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self info])
    {
        [result setValue:[[self info] dictionary]forKey:@"info"];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.info = [[DbPrivilegeInfo alloc]initWithDic:[dictionary objectForKey:@"info"]];
    self.instId = [dictionary objectForKey:@"instId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation JdfusionRevokeRdsAccountRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId
accountName:(NSString*)accountName
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.instId = instId;
    self.accountName = accountName;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId
accountName:(NSString*)accountName
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    self.accountName = accountName;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation JdfusionGetRdsAccountsByInstIdRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.instId = instId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    return self;
} 

@end
@implementation JdfusionGetRdsAccountsByInstIdAndAccountNameRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId
accountName:(NSString*)accountName { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    self.accountName = accountName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self accountName])
    {
        [result setValue:[self accountName] forKey:@"accountName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    self.accountName = [dictionary objectForKey:@"accountName"];
    return self;
} 

@end
@implementation JdfusionRegistCloudInfoRequest
-(id) initWithRegion:(NSString *)regionId
cloud:(CloudInfo*)cloud { 
    self.regionId = regionId;
    self.cloud = cloud;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
cloud:(CloudInfo*)cloud { 
    self.regionId = regionId;
    self.version = version;
    self.cloud = cloud;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self cloud])
    {
        [result setValue:[[self cloud] dictionary]forKey:@"cloud"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloud = [[CloudInfo alloc]initWithDic:[dictionary objectForKey:@"cloud"]];
    return self;
} 

@end
@implementation JdfusionUnregistCloudInfoResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionUnregistCloudInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionUnregistCloudInfoResult* result = [[JdfusionUnregistCloudInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionUnregistCloudInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetCloudInfoByIdResult
-(id) initWithCloud:(CloudInfo*) cloud { 
    self.cloud = cloud;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self cloud])
    {
        [result setValue:[[self cloud] dictionary]forKey:@"cloud"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloud = [[CloudInfo alloc]initWithDic:[dictionary objectForKey:@"cloud"]];
    return self;
} 

@end
@implementation JdfusionGetCloudInfosResult
-(id) initWithClouds:(NSArray<CloudInfo*>*) clouds { 
    self.clouds = clouds;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self clouds])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self clouds] count]; i++) {
            CloudInfo* item = [[self clouds] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"clouds"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* cloudsArray = [dictionary objectForKey:@"clouds"];
    if(cloudsArray&&![cloudsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [cloudsArray count];i++)
        {
            CloudInfo* item = [[CloudInfo alloc]initWithDic:[cloudsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.clouds = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetCloudInfosResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetCloudInfosResult* result = [[JdfusionGetCloudInfosResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetCloudInfosResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetCloudInfoByIdRequest
-(id) initWithRegion:(NSString *)regionId
cloudId:(NSString*)cloudId { 
    self.regionId = regionId;
    self.cloudId = cloudId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
cloudId:(NSString*)cloudId { 
    self.regionId = regionId;
    self.version = version;
    self.cloudId = cloudId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self cloudId])
    {
        [result setValue:[self cloudId] forKey:@"cloudId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloudId = [dictionary objectForKey:@"cloudId"];
    return self;
} 

@end
  
@implementation JdfusionGetCloudInfoByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetCloudInfoByIdResult* result = [[JdfusionGetCloudInfoByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetCloudInfoByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionRegistCloudInfoResult
-(id) initWithCloud:(CloudInfo*) cloud { 
    self.cloud = cloud;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self cloud])
    {
        [result setValue:[[self cloud] dictionary]forKey:@"cloud"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloud = [[CloudInfo alloc]initWithDic:[dictionary objectForKey:@"cloud"]];
    return self;
} 

@end
@implementation JdfusionUnregistCloudInfoRequest
-(id) initWithRegion:(NSString *)regionId
cloudId:(NSString*)cloudId { 
    self.regionId = regionId;
    self.cloudId = cloudId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
cloudId:(NSString*)cloudId { 
    self.regionId = regionId;
    self.version = version;
    self.cloudId = cloudId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self cloudId])
    {
        [result setValue:[self cloudId] forKey:@"cloudId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloudId = [dictionary objectForKey:@"cloudId"];
    return self;
} 

@end
@implementation JdfusionGetCloudInfosRequest
-(id) initWithRegion:(NSString *)regionId
driver:(NSString*)driver { 
    self.regionId = regionId;
    self.driver = driver;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
driver:(NSString*)driver { 
    self.regionId = regionId;
    self.version = version;
    self.driver = driver;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self driver])
    {
        [result setValue:[self driver] forKey:@"driver"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.driver = [dictionary objectForKey:@"driver"];
    return self;
} 

@end
  
@implementation JdfusionRegistCloudInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionRegistCloudInfoResult* result = [[JdfusionRegistCloudInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionRegistCloudInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionValidCloudInfoResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionValidCloudInfoResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionValidCloudInfoResult* result = [[JdfusionValidCloudInfoResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionValidCloudInfoResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionValidCloudInfoRequest
-(id) initWithRegion:(NSString *)regionId
cloudId:(NSString*)cloudId { 
    self.regionId = regionId;
    self.cloudId = cloudId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
cloudId:(NSString*)cloudId { 
    self.regionId = regionId;
    self.version = version;
    self.cloudId = cloudId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self cloudId])
    {
        [result setValue:[self cloudId] forKey:@"cloudId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.cloudId = [dictionary objectForKey:@"cloudId"];
    return self;
} 

@end
@implementation JdfusionGetVmInstanceTypesRequest
-(id) initWithRegion:(NSString *)regionId
az:(NSString*)az { 
    self.regionId = regionId;
    self.az = az;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
az:(NSString*)az { 
    self.regionId = regionId;
    self.version = version;
    self.az = az;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self az])
    {
        [result setValue:[self az] forKey:@"az"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.az = [dictionary objectForKey:@"az"];
    return self;
} 

@end
@implementation JdfusionGetVmInstanceTypesResult
-(id) initWithInstanceTypes:(NSArray<InstanceTypeInfo*>*) instanceTypes { 
    self.instanceTypes = instanceTypes;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self instanceTypes])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self instanceTypes] count]; i++) {
            InstanceTypeInfo* item = [[self instanceTypes] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"instanceTypes"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* instanceTypesArray = [dictionary objectForKey:@"instanceTypes"];
    if(instanceTypesArray&&![instanceTypesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [instanceTypesArray count];i++)
        {
            InstanceTypeInfo* item = [[InstanceTypeInfo alloc]initWithDic:[instanceTypesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.instanceTypes = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetVmInstanceTypesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVmInstanceTypesResult* result = [[JdfusionGetVmInstanceTypesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVmInstanceTypesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetLbHttpListenerResult
-(id) initWithHttpListeners:(NSArray<LbHttpListener*>*) httpListeners { 
    self.httpListeners = httpListeners;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self httpListeners])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self httpListeners] count]; i++) {
            LbHttpListener* item = [[self httpListeners] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"httpListeners"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* httpListenersArray = [dictionary objectForKey:@"httpListeners"];
    if(httpListenersArray&&![httpListenersArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [httpListenersArray count];i++)
        {
            LbHttpListener* item = [[LbHttpListener alloc]initWithDic:[httpListenersArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.httpListeners = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetLbHttpListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetLbHttpListenerResult* result = [[JdfusionGetLbHttpListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetLbHttpListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetLbHttpListenerRequest
-(id) initWithRegion:(NSString *)regionId
slbid:(NSString*)slbid { 
    self.regionId = regionId;
    self.slbid = slbid;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
slbid:(NSString*)slbid { 
    self.regionId = regionId;
    self.version = version;
    self.slbid = slbid;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self slbid])
    {
        [result setValue:[self slbid] forKey:@"slbid"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.slbid = [dictionary objectForKey:@"slbid"];
    return self;
} 

@end
@implementation JdfusionCreateVpcLBHttpListenerResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcLBHttpListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcLBHttpListenerResult* result = [[JdfusionCreateVpcLBHttpListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcLBHttpListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcLBHttpListenerRequest
-(id) initWithRegion:(NSString *)regionId
httpListener:(CreateLoadBalancerHTTPListener*)httpListener { 
    self.regionId = regionId;
    self.httpListener = httpListener;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
httpListener:(CreateLoadBalancerHTTPListener*)httpListener { 
    self.regionId = regionId;
    self.version = version;
    self.httpListener = httpListener;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self httpListener])
    {
        [result setValue:[[self httpListener] dictionary]forKey:@"httpListener"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.httpListener = [[CreateLoadBalancerHTTPListener alloc]initWithDic:[dictionary objectForKey:@"httpListener"]];
    return self;
} 

@end
@implementation JdfusionGetVpcEipsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionDeleteVpcEipByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVpcEipByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVpcEipByIdResult* result = [[JdfusionDeleteVpcEipByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVpcEipByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcEipResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcEipResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcEipResult* result = [[JdfusionCreateVpcEipResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcEipResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDisassociateVpcEipByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDisassociateVpcEipByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDisassociateVpcEipByIdResult* result = [[JdfusionDisassociateVpcEipByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDisassociateVpcEipByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcEipByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionAssociateVpcEipByIdRequest
-(id) initWithRegion:(NSString *)regionId
associate:(AssociateEipAddress*)associate
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.associate = associate;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
associate:(AssociateEipAddress*)associate
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.associate = associate;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self associate])
    {
        [result setValue:[[self associate] dictionary]forKey:@"associate"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.associate = [[AssociateEipAddress alloc]initWithDic:[dictionary objectForKey:@"associate"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVpcEipsResult
-(id) initWithEipAddresses:(NSArray<EipAddress*>*) eipAddresses { 
    self.eipAddresses = eipAddresses;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self eipAddresses])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self eipAddresses] count]; i++) {
            EipAddress* item = [[self eipAddresses] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"eipAddresses"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* eipAddressesArray = [dictionary objectForKey:@"eipAddresses"];
    if(eipAddressesArray&&![eipAddressesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [eipAddressesArray count];i++)
        {
            EipAddress* item = [[EipAddress alloc]initWithDic:[eipAddressesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.eipAddresses = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionDeleteVpcEipByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVpcEipByIdResult
-(id) initWithEipAddress:(EipAddress*) eipAddress { 
    self.eipAddress = eipAddress;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self eipAddress])
    {
        [result setValue:[[self eipAddress] dictionary]forKey:@"eipAddress"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.eipAddress = [[EipAddress alloc]initWithDic:[dictionary objectForKey:@"eipAddress"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcEipsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcEipsResult* result = [[JdfusionGetVpcEipsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcEipsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionAssociateVpcEipByIdResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionAssociateVpcEipByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionAssociateVpcEipByIdResult* result = [[JdfusionAssociateVpcEipByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionAssociateVpcEipByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetVpcEipByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcEipByIdResult* result = [[JdfusionGetVpcEipByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcEipByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcEipRequest
-(id) initWithRegion:(NSString *)regionId
jdfusionAllocate:(AllocateEipAddress*)jdfusionAllocate { 
    self.regionId = regionId;
    self.jdfusionAllocate = jdfusionAllocate;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
jdfusionAllocate:(AllocateEipAddress*)jdfusionAllocate { 
    self.regionId = regionId;
    self.version = version;
    self.jdfusionAllocate = jdfusionAllocate;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self jdfusionAllocate])
    {
        [result setValue:[[self jdfusionAllocate] dictionary]forKey:@"allocate"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.jdfusionAllocate = [[AllocateEipAddress alloc]initWithDic:[dictionary objectForKey:@"allocate"]];
    return self;
} 

@end
@implementation JdfusionDisassociateVpcEipByIdRequest
-(id) initWithRegion:(NSString *)regionId
unassociate:(UnassociateEipAddress*)unassociate
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.unassociate = unassociate;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
unassociate:(UnassociateEipAddress*)unassociate
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.unassociate = unassociate;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self unassociate])
    {
        [result setValue:[[self unassociate] dictionary]forKey:@"unassociate"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.unassociate = [[UnassociateEipAddress alloc]initWithDic:[dictionary objectForKey:@"unassociate"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetDisksResult
-(id) initWithDisks:(NSArray<CloudDataDisk*>*) disks { 
    self.disks = disks;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self disks])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self disks] count]; i++) {
            CloudDataDisk* item = [[self disks] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"disks"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* disksArray = [dictionary objectForKey:@"disks"];
    if(disksArray&&![disksArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [disksArray count];i++)
        {
            CloudDataDisk* item = [[CloudDataDisk alloc]initWithDic:[disksArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.disks = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetDisksResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDisksResult* result = [[JdfusionGetDisksResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDisksResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionRemoveDiskByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionDetachDiskToVmInstanceByDiskIdRequest
-(id) initWithRegion:(NSString *)regionId
detach:(DetachDataDisk*)detach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.detach = detach;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
detach:(DetachDataDisk*)detach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.detach = detach;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self detach])
    {
        [result setValue:[[self detach] dictionary]forKey:@"detach"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.detach = [[DetachDataDisk alloc]initWithDic:[dictionary objectForKey:@"detach"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionRemoveDiskByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDetachDiskToVmInstanceByDiskIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDetachDiskToVmInstanceByDiskIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDetachDiskToVmInstanceByDiskIdResult* result = [[JdfusionDetachDiskToVmInstanceByDiskIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDetachDiskToVmInstanceByDiskIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDisksRequest
-(id) initWithRegion:(NSString *)regionId
vmId:(NSString*)vmId { 
    self.regionId = regionId;
    self.vmId = vmId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
vmId:(NSString*)vmId { 
    self.regionId = regionId;
    self.version = version;
    self.vmId = vmId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self vmId])
    {
        [result setValue:[self vmId] forKey:@"vmId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vmId = [dictionary objectForKey:@"vmId"];
    return self;
} 

@end
@implementation JdfusionCreateDiskResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateDiskResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateDiskResult* result = [[JdfusionCreateDiskResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateDiskResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetDiskByIdResult
-(id) initWithDisk:(CloudDataDisk*) disk { 
    self.disk = disk;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self disk])
    {
        [result setValue:[[self disk] dictionary]forKey:@"disk"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.disk = [[CloudDataDisk alloc]initWithDic:[dictionary objectForKey:@"disk"]];
    return self;
} 

@end
@implementation JdfusionGetDiskByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateDiskRequest
-(id) initWithRegion:(NSString *)regionId
disk:(CreateDataDisk*)disk { 
    self.regionId = regionId;
    self.disk = disk;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
disk:(CreateDataDisk*)disk { 
    self.regionId = regionId;
    self.version = version;
    self.disk = disk;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self disk])
    {
        [result setValue:[[self disk] dictionary]forKey:@"disk"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.disk = [[CreateDataDisk alloc]initWithDic:[dictionary objectForKey:@"disk"]];
    return self;
} 

@end
  
@implementation JdfusionGetDiskByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetDiskByIdResult* result = [[JdfusionGetDiskByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetDiskByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionAttachDiskToVmInstanceByDiskIdResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionAttachDiskToVmInstanceByDiskIdRequest
-(id) initWithRegion:(NSString *)regionId
attach:(AttachDataDisk*)attach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.attach = attach;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
attach:(AttachDataDisk*)attach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.attach = attach;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self attach])
    {
        [result setValue:[[self attach] dictionary]forKey:@"attach"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.attach = [[AttachDataDisk alloc]initWithDic:[dictionary objectForKey:@"attach"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionRemoveDiskByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionRemoveDiskByIdResult* result = [[JdfusionRemoveDiskByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionRemoveDiskByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionAttachDiskToVmInstanceByDiskIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionAttachDiskToVmInstanceByDiskIdResult* result = [[JdfusionAttachDiskToVmInstanceByDiskIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionAttachDiskToVmInstanceByDiskIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDetachVpcNetworkInterfaceByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDetachVpcNetworkInterfaceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDetachVpcNetworkInterfaceByIdResult* result = [[JdfusionDetachVpcNetworkInterfaceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDetachVpcNetworkInterfaceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcNetworkInterfacesResult
-(id) initWithNetInterfaces:(NSArray<NetInterfaceInfo*>*) netInterfaces { 
    self.netInterfaces = netInterfaces;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self netInterfaces])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self netInterfaces] count]; i++) {
            NetInterfaceInfo* item = [[self netInterfaces] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"netInterfaces"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* netInterfacesArray = [dictionary objectForKey:@"netInterfaces"];
    if(netInterfacesArray&&![netInterfacesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [netInterfacesArray count];i++)
        {
            NetInterfaceInfo* item = [[NetInterfaceInfo alloc]initWithDic:[netInterfacesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.netInterfaces = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionAttachVpcNetworkInterfaceByIdRequest
-(id) initWithRegion:(NSString *)regionId
attach:(AttachNetInterface*)attach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.attach = attach;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
attach:(AttachNetInterface*)attach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.attach = attach;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self attach])
    {
        [result setValue:[[self attach] dictionary]forKey:@"attach"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.attach = [[AttachNetInterface alloc]initWithDic:[dictionary objectForKey:@"attach"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVpcNetworkInterfaceByIdResult
-(id) initWithNetInterface:(NetInterfaceInfo*) netInterface { 
    self.netInterface = netInterface;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self netInterface])
    {
        [result setValue:[[self netInterface] dictionary]forKey:@"netInterface"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.netInterface = [[NetInterfaceInfo alloc]initWithDic:[dictionary objectForKey:@"netInterface"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcNetworkInterfaceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcNetworkInterfaceByIdResult* result = [[JdfusionGetVpcNetworkInterfaceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcNetworkInterfaceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDetachVpcNetworkInterfaceByIdRequest
-(id) initWithRegion:(NSString *)regionId
detach:(DetachNetInterface*)detach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.detach = detach;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
detach:(DetachNetInterface*)detach
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.detach = detach;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self detach])
    {
        [result setValue:[[self detach] dictionary]forKey:@"detach"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.detach = [[DetachNetInterface alloc]initWithDic:[dictionary objectForKey:@"detach"]];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteVpcNetworkInterfaceByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVpcNetworkInterfacesRequest
-(id) initWithRegion:(NSString *)regionId
vmId:(NSString*)vmId { 
    self.regionId = regionId;
    self.vmId = vmId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
vmId:(NSString*)vmId { 
    self.regionId = regionId;
    self.version = version;
    self.vmId = vmId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self vmId])
    {
        [result setValue:[self vmId] forKey:@"vmId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vmId = [dictionary objectForKey:@"vmId"];
    return self;
} 

@end
@implementation JdfusionCreateVpcNetworkInterfaceResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcNetworkInterfaceResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcNetworkInterfaceResult* result = [[JdfusionCreateVpcNetworkInterfaceResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcNetworkInterfaceResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionGetVpcNetworkInterfacesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcNetworkInterfacesResult* result = [[JdfusionGetVpcNetworkInterfacesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcNetworkInterfacesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcNetworkInterfaceByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteVpcNetworkInterfaceByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVpcNetworkInterfaceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVpcNetworkInterfaceByIdResult* result = [[JdfusionDeleteVpcNetworkInterfaceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVpcNetworkInterfaceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionAttachVpcNetworkInterfaceByIdResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionAttachVpcNetworkInterfaceByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionAttachVpcNetworkInterfaceByIdResult* result = [[JdfusionAttachVpcNetworkInterfaceByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionAttachVpcNetworkInterfaceByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcNetworkInterfaceRequest
-(id) initWithRegion:(NSString *)regionId
netInterface:(CreateNetInterface*)netInterface { 
    self.regionId = regionId;
    self.netInterface = netInterface;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
netInterface:(CreateNetInterface*)netInterface { 
    self.regionId = regionId;
    self.version = version;
    self.netInterface = netInterface;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self netInterface])
    {
        [result setValue:[[self netInterface] dictionary]forKey:@"netInterface"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.netInterface = [[CreateNetInterface alloc]initWithDic:[dictionary objectForKey:@"netInterface"]];
    return self;
} 

@end
@implementation JdfusionGetVpcSlbsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionStopSlbResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionStopSlbResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStopSlbResult* result = [[JdfusionStopSlbResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStopSlbResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcSlbByIdResult
-(id) initWithSlb:(SlbInfoDetail*) slb { 
    self.slb = slb;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self slb])
    {
        [result setValue:[[self slb] dictionary]forKey:@"slb"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.slb = [[SlbInfoDetail alloc]initWithDic:[dictionary objectForKey:@"slb"]];
    return self;
} 

@end
  
@implementation JdfusionGetVpcSlbByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcSlbByIdResult* result = [[JdfusionGetVpcSlbByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcSlbByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteSlbsListenerResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionDeleteSlbsListenerRequest
-(id) initWithRegion:(NSString *)regionId
listenerPort:(NSNumber*)listenerPort
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.listenerPort = listenerPort;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
listenerPort:(NSNumber*)listenerPort
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.listenerPort = listenerPort;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self listenerPort])
    {
        [result setValue:[self listenerPort] forKey:@"listenerPort"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerPort = [dictionary objectForKey:@"listenerPort"];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionStopSlbListenerResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionStopSlbListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStopSlbListenerResult* result = [[JdfusionStopSlbListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStopSlbListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcSlbResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
@implementation JdfusionStartSlbResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetVpcSlbByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionStartSlbResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStartSlbResult* result = [[JdfusionStartSlbResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStartSlbResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionStopSlbListenerRequest
-(id) initWithRegion:(NSString *)regionId
listenerPort:(NSNumber*)listenerPort
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.listenerPort = listenerPort;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
listenerPort:(NSNumber*)listenerPort
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.listenerPort = listenerPort;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self listenerPort])
    {
        [result setValue:[self listenerPort] forKey:@"listenerPort"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerPort = [dictionary objectForKey:@"listenerPort"];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteVpcSlbByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionStartSlbRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionDeleteVpcSlbByIdResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVpcSlbByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVpcSlbByIdResult* result = [[JdfusionDeleteVpcSlbByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVpcSlbByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionStartSlbListenerResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetVpcSlbsResult
-(id) initWithSlbs:(NSArray<SlbInfo*>*) slbs { 
    self.slbs = slbs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self slbs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self slbs] count]; i++) {
            SlbInfo* item = [[self slbs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"slbs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* slbsArray = [dictionary objectForKey:@"slbs"];
    if(slbsArray&&![slbsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [slbsArray count];i++)
        {
            SlbInfo* item = [[SlbInfo alloc]initWithDic:[slbsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.slbs = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetVpcSlbsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcSlbsResult* result = [[JdfusionGetVpcSlbsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcSlbsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
  
@implementation JdfusionCreateVpcSlbResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcSlbResult* result = [[JdfusionCreateVpcSlbResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcSlbResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionStartSlbListenerRequest
-(id) initWithRegion:(NSString *)regionId
listenerPort:(NSNumber*)listenerPort
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.listenerPort = listenerPort;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
listenerPort:(NSNumber*)listenerPort
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.listenerPort = listenerPort;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self listenerPort])
    {
        [result setValue:[self listenerPort] forKey:@"listenerPort"];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.listenerPort = [dictionary objectForKey:@"listenerPort"];
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionStopSlbRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
  
@implementation JdfusionDeleteSlbsListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteSlbsListenerResult* result = [[JdfusionDeleteSlbsListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteSlbsListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcSlbRequest
-(id) initWithRegion:(NSString *)regionId
slb:(SlbInfo*)slb { 
    self.regionId = regionId;
    self.slb = slb;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
slb:(SlbInfo*)slb { 
    self.regionId = regionId;
    self.version = version;
    self.slb = slb;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self slb])
    {
        [result setValue:[[self slb] dictionary]forKey:@"slb"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.slb = [[SlbInfo alloc]initWithDic:[dictionary objectForKey:@"slb"]];
    return self;
} 

@end
  
@implementation JdfusionStartSlbListenerResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionStartSlbListenerResult* result = [[JdfusionStartSlbListenerResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionStartSlbListenerResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcVServerGroupsRequest
-(id) initWithRegion:(NSString *)regionId
slbid:(NSString*)slbid { 
    self.regionId = regionId;
    self.slbid = slbid;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
slbid:(NSString*)slbid { 
    self.regionId = regionId;
    self.version = version;
    self.slbid = slbid;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self slbid])
    {
        [result setValue:[self slbid] forKey:@"slbid"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.slbid = [dictionary objectForKey:@"slbid"];
    return self;
} 

@end
@implementation JdfusionGetVserverGroupsByIdRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionGetVserverGroupsByIdResult
-(id) initWithVserverGroup:(VserverGroupDetail*) vserverGroup { 
    self.vserverGroup = vserverGroup;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vserverGroup])
    {
        [result setValue:[[self vserverGroup] dictionary]forKey:@"vserverGroup"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vserverGroup = [[VserverGroupDetail alloc]initWithDic:[dictionary objectForKey:@"vserverGroup"]];
    return self;
} 

@end
  
@implementation JdfusionGetVserverGroupsByIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVserverGroupsByIdResult* result = [[JdfusionGetVserverGroupsByIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVserverGroupsByIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateVpcVServerGroupResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateVpcVServerGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateVpcVServerGroupResult* result = [[JdfusionCreateVpcVServerGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateVpcVServerGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetVpcVServerGroupsResult
-(id) initWithVserverGroups:(NSArray<VserverGroupInfo*>*) vserverGroups { 
    self.vserverGroups = vserverGroups;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self vserverGroups])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self vserverGroups] count]; i++) {
            VserverGroupInfo* item = [[self vserverGroups] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"vserverGroups"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* vserverGroupsArray = [dictionary objectForKey:@"vserverGroups"];
    if(vserverGroupsArray&&![vserverGroupsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [vserverGroupsArray count];i++)
        {
            VserverGroupInfo* item = [[VserverGroupInfo alloc]initWithDic:[vserverGroupsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.vserverGroups = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetVpcVServerGroupsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVpcVServerGroupsResult* result = [[JdfusionGetVpcVServerGroupsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVpcVServerGroupsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVserverGroupResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteVserverGroupResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteVserverGroupResult* result = [[JdfusionDeleteVserverGroupResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteVserverGroupResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteVserverGroupRequest
-(id) initWithRegion:(NSString *)regionId
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.idValue = idValue;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
idValue:(NSString*)idValue { 
    self.regionId = regionId;
    self.version = version;
    self.idValue = idValue;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self idValue])
    {
        [result setValue:[self idValue] forKey:@"id"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.idValue = [dictionary objectForKey:@"id"];
    return self;
} 

@end
@implementation JdfusionCreateVpcVServerGroupRequest
-(id) initWithRegion:(NSString *)regionId
vserverGroup:(CreateVserverGroup*)vserverGroup { 
    self.regionId = regionId;
    self.vserverGroup = vserverGroup;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
vserverGroup:(CreateVserverGroup*)vserverGroup { 
    self.regionId = regionId;
    self.version = version;
    self.vserverGroup = vserverGroup;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self vserverGroup])
    {
        [result setValue:[[self vserverGroup] dictionary]forKey:@"vserverGroup"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.vserverGroup = [[CreateVserverGroup alloc]initWithDic:[dictionary objectForKey:@"vserverGroup"]];
    return self;
} 

@end
@implementation JdfusionGetVmImagesResult
-(id) initWithImages:(NSArray<ImageInfo*>*) images { 
    self.images = images;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self images])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self images] count]; i++) {
            ImageInfo* item = [[self images] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"images"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* imagesArray = [dictionary objectForKey:@"images"];
    if(imagesArray&&![imagesArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [imagesArray count];i++)
        {
            ImageInfo* item = [[ImageInfo alloc]initWithDic:[imagesArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.images = propertyArray;
    }
    return self;
} 

@end
@implementation JdfusionGetVmImagesRequest
-(id) initWithRegion:(NSString *)regionId
imageSource:(NSString*)imageSource { 
    self.regionId = regionId;
    self.imageSource = imageSource;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
imageSource:(NSString*)imageSource { 
    self.regionId = regionId;
    self.version = version;
    self.imageSource = imageSource;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self imageSource])
    {
        [result setValue:[self imageSource] forKey:@"imageSource"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.imageSource = [dictionary objectForKey:@"imageSource"];
    return self;
} 

@end
  
@implementation JdfusionGetVmImagesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetVmImagesResult* result = [[JdfusionGetVmImagesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetVmImagesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetRdsSpecificationResult
-(id) initWithSpecifications:(NSArray<RdsSpecification*>*) specifications { 
    self.specifications = specifications;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self specifications])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self specifications] count]; i++) {
            RdsSpecification* item = [[self specifications] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"specifications"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* specificationsArray = [dictionary objectForKey:@"specifications"];
    if(specificationsArray&&![specificationsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [specificationsArray count];i++)
        {
            RdsSpecification* item = [[RdsSpecification alloc]initWithDic:[specificationsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.specifications = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetRdsSpecificationResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsSpecificationResult* result = [[JdfusionGetRdsSpecificationResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsSpecificationResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetRdsSpecificationRequest
-(id) initWithRegion:(NSString *)regionId
engine:(NSString*)engine { 
    self.regionId = regionId;
    self.engine = engine;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
engine:(NSString*)engine { 
    self.regionId = regionId;
    self.version = version;
    self.engine = engine;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self engine])
    {
        [result setValue:[self engine] forKey:@"engine"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.engine = [dictionary objectForKey:@"engine"];
    return self;
} 

@end
@implementation JdfusionGetRegionsResult
-(id) initWithRegions:(NSArray<RegionInfo*>*) regions { 
    self.regions = regions;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self regions])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self regions] count]; i++) {
            RegionInfo* item = [[self regions] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"regions"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* regionsArray = [dictionary objectForKey:@"regions"];
    if(regionsArray&&![regionsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [regionsArray count];i++)
        {
            RegionInfo* item = [[RegionInfo alloc]initWithDic:[regionsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.regions = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetRegionsResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRegionsResult* result = [[JdfusionGetRegionsResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRegionsResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetRegionsAvailableZonesRequest
-(id) initWithRegion:(NSString *)regionId
region:(NSString*)region { 
    self.regionId = regionId;
    self.region = region;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
region:(NSString*)region { 
    self.regionId = regionId;
    self.version = version;
    self.region = region;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self region])
    {
        [result setValue:[self region] forKey:@"region"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.region = [dictionary objectForKey:@"region"];
    return self;
} 

@end
@implementation JdfusionGetRegionsRequest
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
@implementation JdfusionGetRegionsAvailableZonesResult
-(id) initWithAzs:(NSArray<AzInfo*>*) azs { 
    self.azs = azs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self azs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self azs] count]; i++) {
            AzInfo* item = [[self azs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"azs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* azsArray = [dictionary objectForKey:@"azs"];
    if(azsArray&&![azsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [azsArray count];i++)
        {
            AzInfo* item = [[AzInfo alloc]initWithDic:[azsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.azs = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetRegionsAvailableZonesResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRegionsAvailableZonesResult* result = [[JdfusionGetRegionsAvailableZonesResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRegionsAvailableZonesResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetRdsDatabaseByInstIdAndDbNameResult
-(id) initWithDb:(RdsDBInfo*) db { 
    self.db = db;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self db])
    {
        [result setValue:[[self db] dictionary]forKey:@"db"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.db = [[RdsDBInfo alloc]initWithDic:[dictionary objectForKey:@"db"]];
    return self;
} 

@end
@implementation JdfusionCreateRdsDatabaseRequest
-(id) initWithRegion:(NSString *)regionId
database:(CreateRDSDB*)database
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.database = database;
    self.instId = instId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
database:(CreateRDSDB*)database
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.version = version;
    self.database = database;
    self.instId = instId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self database])
    {
        [result setValue:[[self database] dictionary]forKey:@"database"];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.database = [[CreateRDSDB alloc]initWithDic:[dictionary objectForKey:@"database"]];
    self.instId = [dictionary objectForKey:@"instId"];
    return self;
} 

@end
@implementation JdfusionGetRdsDatabasesByInstIdResult
-(id) initWithDbs:(NSArray<RdsDBInfo*>*) dbs { 
    self.dbs = dbs;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self dbs])
    {
        NSMutableArray<NSDictionary*>* arrayDic  = [[NSMutableArray alloc] init];
        for (int i =0 ; i< [[self dbs] count]; i++) {
            RdsDBInfo* item = [[self dbs] objectAtIndex:i];
            [arrayDic addObject:[item dictionary]];
        }
        [result setValue:arrayDic forKey:@"dbs"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    NSArray* dbsArray = [dictionary objectForKey:@"dbs"];
    if(dbsArray&&![dbsArray isKindOfClass:[NSNull class]])
    {
        NSMutableArray* propertyArray = [[NSMutableArray alloc]init];
        for(int i = 0 ; i< [dbsArray count];i++)
        {
            RdsDBInfo* item = [[RdsDBInfo alloc]initWithDic:[dbsArray objectAtIndex:i]];
            if(item)
            {
                [propertyArray addObject:item];
            }
        }
        self.dbs = propertyArray;
    }
    return self;
} 

@end
  
@implementation JdfusionGetRdsDatabasesByInstIdResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsDatabasesByInstIdResult* result = [[JdfusionGetRdsDatabasesByInstIdResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsDatabasesByInstIdResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteRdsDatabaseRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.instId = instId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
  
@implementation JdfusionGetRdsDatabaseByInstIdAndDbNameResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionGetRdsDatabaseByInstIdAndDbNameResult* result = [[JdfusionGetRdsDatabaseByInstIdAndDbNameResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionGetRdsDatabaseByInstIdAndDbNameResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionDeleteRdsDatabaseResult
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    return self;
} 

@end
  
@implementation JdfusionDeleteRdsDatabaseResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionDeleteRdsDatabaseResult* result = [[JdfusionDeleteRdsDatabaseResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionDeleteRdsDatabaseResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionCreateRdsDatabaseResult
-(id) initWithTask:(ResourceTFInfo*) task { 
    self.task = task;               
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    if([self task])
    {
        [result setValue:[[self task] dictionary]forKey:@"task"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.task = [[ResourceTFInfo alloc]initWithDic:[dictionary objectForKey:@"task"]];
    return self;
} 

@end
  
@implementation JdfusionCreateRdsDatabaseResponse
-(NSMutableDictionary*) dictionary
{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init]; 
    if([self requestId])
    {
        [result setValue:[self requestId] forKey:@"requestId"];
    } 
    if([self result])
    {
        
        [result setValue:[[self result] dictionary] forKey:@"result"];
    }
    if([self error])
    {
        
        [result setValue:[[self error] dictionary] forKey:@"error"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary
{
    
    self.requestId = [dictionary objectForKey:@"requestId"];
JdfusionCreateRdsDatabaseResult* result = [[JdfusionCreateRdsDatabaseResult alloc]initWithDic:[dictionary objectForKey:@"result"]];
    self.result = result;
    ServiceError* error = [[ServiceError alloc]initWithDic:[dictionary objectForKey:@"error"]];
    self.error = error;
    return self;
}

-(id) initWithRequestId:(NSString*) requestId
                  error:(ServiceError*) error
                 result:(JdfusionCreateRdsDatabaseResult*) result
{
    self.error = error;
    self.result =result;
    self.requestId = requestId;
    return self;
}

@end
@implementation JdfusionGetRdsDatabaseByInstIdAndDbNameRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.instId = instId;
    self.dbName = dbName;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId
dbName:(NSString*)dbName { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    self.dbName = dbName;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    if([self dbName])
    {
        [result setValue:[self dbName] forKey:@"dbName"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    self.dbName = [dictionary objectForKey:@"dbName"];
    return self;
} 

@end
@implementation JdfusionGetRdsDatabasesByInstIdRequest
-(id) initWithRegion:(NSString *)regionId
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.instId = instId;
    return self;
}

-(id) initWithRegion:(NSString *)regionId
             version:(NSString *)version
instId:(NSString*)instId { 
    self.regionId = regionId;
    self.version = version;
    self.instId = instId;
    return self;
}
-(NSMutableDictionary*) dictionary{
    NSMutableDictionary* result = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *superObjectDic = [super dictionary];
    if(superObjectDic && [superObjectDic count]>0)
    {
        [result addEntriesFromDictionary:superObjectDic];
    }
    if([self instId])
    {
        [result setValue:[self instId] forKey:@"instId"];
    }
    return result;
}

-(id) initWithDic:(NSDictionary*)dictionary{
    self.instId = [dictionary objectForKey:@"instId"];
    return self;
} 

@end
 
